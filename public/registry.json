{
  "dependencies": [
    "@radix-ui/react-slot",
    "class-variance-authority",
    "clsx",
    "fast-equals",
    "motion",
    "react-aria",
    "react-stately",
    "tailwind-merge",
    "@tabler/icons-react",
    "embla-carousel",
    "embla-carousel-react"
  ],
  "devDependencies": ["@bruhabruh/type-safe", "tailwindcss"],
  "files": [
    {
      "name": "index.ts",
      "content": "export * from './components';\nexport * from './config';\nexport * from './hooks';\nexport * from './types';\nexport * from './utility';\n",
      "type": "index"
    },
    {
      "name": "action/button/button.tsx",
      "content": "import { useInteractionsWithRipple } from '@/hooks';\nimport { useMergedRefs } from '@/hooks/use-merge-refs';\nimport { cn, mergeProps, unwrapChildren, withProvider } from '@/utility';\nimport { Slot, Slottable } from '@radix-ui/react-slot';\nimport React from 'react';\nimport { useButton } from 'react-aria';\nimport type { ButtonProps } from './button.types';\nimport { buttonVariants } from './button.variants';\nimport { ButtonContextProvider, useButtonContext } from './context';\nimport { InternalButtonIcon } from './internal';\n\nconst ButtonImpl = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  (\n    { variant, color, className, asChild, children, ...props },\n    forwardedRef,\n  ) => {\n    const ref = useMergedRefs(forwardedRef);\n    const [{ leftIcon, rightIcon }] = useButtonContext();\n\n    const { buttonProps } = useButton(props, ref);\n\n    const { interactionsProps, rippleProps } =\n      useInteractionsWithRipple<'button'>({\n        ...buttonProps,\n        isDisabled: props.isDisabled,\n      });\n\n    const Comp = asChild ? Slot : 'button';\n\n    return (\n      <Comp\n        type=\"button\"\n        {...mergeProps(props, interactionsProps, rippleProps)}\n        ref={ref}\n        className={cn(\n          buttonVariants({\n            color,\n            variant,\n          }),\n          className,\n        )}\n      >\n        <InternalButtonIcon className=\"button--icon-left\">\n          {leftIcon}\n        </InternalButtonIcon>\n        <Slottable>\n          {unwrapChildren(\n            children,\n            (child) => (\n              <span className={cn(buttonVariants.label({ variant }))}>\n                {child}\n              </span>\n            ),\n            !asChild,\n          )}\n        </Slottable>\n        <InternalButtonIcon className=\"button--icon-right\">\n          {rightIcon}\n        </InternalButtonIcon>\n      </Comp>\n    );\n  },\n);\nButtonImpl.displayName = 'Button';\n\nexport const Button = withProvider(ButtonContextProvider, ButtonImpl);\n",
      "type": "components"
    },
    {
      "name": "action/button/button.types.ts",
      "content": "import type { AriaPropsWithAsChild } from '@/types';\nimport type { VariantProps } from 'class-variance-authority';\nimport type { AriaButtonProps } from 'react-aria';\nimport type { buttonVariants } from './button.variants';\n\nexport type ButtonProps = AriaPropsWithAsChild<'button', AriaButtonProps> &\n  VariantProps<typeof buttonVariants>;\n",
      "type": "components"
    },
    {
      "name": "action/button/button.variants.ts",
      "content": "import { cva } from '@/utility';\n\nconst variants = cva(\n  {\n    name: 'button group/button',\n    layout: 'relative',\n    box: 'h-10 rounded-md',\n    flex: 'inline-flex items-center justify-center',\n    transitions: 'transition easing-standard duration-medium-1',\n    borders: 'outline-none border-transparent',\n    overflow: 'overflow-hidden',\n    typography: 'whitespace-nowrap',\n    states: [\n      'cursor-pointer',\n      'is-disabled:state-transparent',\n      'is-disabled:pointer-events-none',\n      'is-hovered:state-hover',\n      'in-focus-visible:state-focus',\n      'is-pressed:state-press',\n    ],\n    ripple: ['ripple-wrapper:-inset-1', 'ripple-wrapper:rounded-md'],\n  },\n  {\n    variants: {\n      variant: {\n        elevated: {\n          background: [\n            'bg-surface-container-low',\n            'is-disabled:bg-on-surface/12',\n          ],\n          typography: ['is-disabled:text-on-surface/38'],\n          effects: [\n            'elevation-1',\n            'is-disabled:elevation-0',\n            'is-hovered:elevation-2',\n            'in-focus-visible:elevation-1',\n            'is-pressed:elevation-1',\n          ],\n        },\n        filled: {\n          background: ['is-disabled:bg-on-surface/12'],\n          typography: ['is-disabled:text-on-surface/38'],\n          effects: [\n            'elevation-0',\n            'is-hovered:elevation-1',\n            'in-focus-visible:elevation-0',\n            'is-pressed:elevation-0',\n          ],\n        },\n        tonal: {\n          background: ['is-disabled:bg-on-surface/12'],\n          typography: ['is-disabled:text-on-surface/38'],\n          effects: [\n            'elevation-0',\n            'is-hovered:elevation-1',\n            'in-focus-visible:elevation-0',\n            'is-pressed:elevation-0',\n          ],\n        },\n        outlined: {\n          background: ['bg-transparent'],\n          typography: ['is-disabled:text-on-surface/38'],\n          borders: [\n            'border',\n            'border-outline',\n            'is-disabled:border-on-surface/38',\n          ],\n        },\n        text: {\n          background: 'bg-transparent',\n          typography: ['is-disabled:text-on-surface/38'],\n        },\n      },\n      color: {\n        primary: {},\n        secondary: {},\n        info: {},\n        success: {},\n        caution: {},\n        critical: {},\n      },\n    },\n    defaultVariants: {\n      color: 'primary',\n      variant: 'elevated',\n    },\n    compoundVariants: [\n      {\n        variant: ['elevated', 'filled', 'tonal', 'outlined'],\n        className: { spacing: 'px-md' },\n      },\n      {\n        variant: 'text',\n        className: {\n          spacing: [\n            'px-sm',\n            '[&>svg:first-child]:starting:mr-0',\n            '[&>svg:last-child]:starting:ml-0',\n            '[&>svg:first-child]:mr-2xs',\n            '[&>svg:last-child]:ml-2xs',\n          ],\n        },\n      },\n      // #region Elevated\n      {\n        variant: 'elevated',\n        color: 'primary',\n        className: {\n          typography: 'text-primary',\n          ripple: 'ripple:bg-primary',\n          states: 'state-primary',\n        },\n      },\n      {\n        variant: 'elevated',\n        color: 'secondary',\n        className: {\n          typography: 'text-secondary',\n          ripple: 'ripple:bg-secondary',\n          states: 'state-secondary',\n        },\n      },\n      {\n        variant: 'elevated',\n        color: 'info',\n        className: {\n          typography: 'text-info',\n          ripple: 'ripple:bg-info',\n          states: 'state-info',\n        },\n      },\n      {\n        variant: 'elevated',\n        color: 'success',\n        className: {\n          typography: 'text-success',\n          ripple: 'ripple:bg-success',\n          states: 'state-success',\n        },\n      },\n      {\n        variant: 'elevated',\n        color: 'caution',\n        className: {\n          typography: 'text-caution',\n          ripple: 'ripple:bg-caution',\n          states: 'state-caution',\n        },\n      },\n      {\n        variant: 'elevated',\n        color: 'critical',\n        className: {\n          typography: 'text-critical',\n          ripple: 'ripple:bg-critical',\n          states: 'state-critical',\n        },\n      },\n      // #endregion Elevated\n\n      // #region Filled\n      {\n        variant: 'filled',\n        color: 'primary',\n        className: {\n          background: 'bg-primary',\n          typography: 'text-on-primary',\n          ripple: 'ripple:bg-on-primary',\n          states: 'state-on-primary',\n        },\n      },\n      {\n        variant: 'filled',\n        color: 'secondary',\n        className: {\n          background: 'bg-secondary',\n          typography: 'text-on-secondary',\n          ripple: 'ripple:bg-on-secondary',\n          states: 'state-on-secondary',\n        },\n      },\n      {\n        variant: 'filled',\n        color: 'info',\n        className: {\n          background: 'bg-info',\n          typography: 'text-on-info',\n          ripple: 'ripple:bg-on-info',\n          states: 'state-on-info',\n        },\n      },\n      {\n        variant: 'filled',\n        color: 'success',\n        className: {\n          background: 'bg-success',\n          typography: 'text-on-success',\n          ripple: 'ripple:bg-on-success',\n          states: 'state-on-success',\n        },\n      },\n      {\n        variant: 'filled',\n        color: 'caution',\n        className: {\n          background: 'bg-caution',\n          typography: 'text-on-caution',\n          ripple: 'ripple:bg-on-caution',\n          states: 'state-on-caution',\n        },\n      },\n      {\n        variant: 'filled',\n        color: 'critical',\n        className: {\n          background: 'bg-critical',\n          typography: 'text-on-critical',\n          ripple: 'ripple:bg-on-critical',\n          states: 'state-on-critical',\n        },\n      },\n      // #endregion Filled\n\n      // #region Tonal\n      {\n        variant: 'tonal',\n        color: 'primary',\n        className: {\n          background: 'bg-primary-container',\n          typography: 'text-on-primary-container',\n          ripple: 'ripple:bg-on-primary-container',\n          states: 'state-on-primary-container',\n        },\n      },\n      {\n        variant: 'tonal',\n        color: 'secondary',\n        className: {\n          background: 'bg-secondary-container',\n          typography: 'text-on-secondary-container',\n          ripple: 'ripple:bg-on-secondary-container',\n          states: 'state-on-secondary-container',\n        },\n      },\n      {\n        variant: 'tonal',\n        color: 'info',\n        className: {\n          background: 'bg-info-container',\n          typography: 'text-on-info-container',\n          ripple: 'ripple:bg-on-info-container',\n          states: 'state-on-info-container',\n        },\n      },\n      {\n        variant: 'tonal',\n        color: 'success',\n        className: {\n          background: 'bg-success-container',\n          typography: 'text-on-success-container',\n          ripple: 'ripple:bg-on-success-container',\n          states: 'state-on-success-container',\n        },\n      },\n      {\n        variant: 'tonal',\n        color: 'caution',\n        className: {\n          background: 'bg-caution-container',\n          typography: 'text-on-caution-container',\n          ripple: 'ripple:bg-on-caution-container',\n          states: 'state-on-caution-container',\n        },\n      },\n      {\n        variant: 'tonal',\n        color: 'critical',\n        className: {\n          background: 'bg-critical-container',\n          typography: 'text-on-critical-container',\n          ripple: 'ripple:bg-on-critical-container',\n          states: 'state-on-critical-container',\n        },\n      },\n      // #endregion Tonal\n\n      // #region Outlined\n      {\n        variant: 'outlined',\n        color: 'primary',\n        className: {\n          typography: 'text-primary',\n          ripple: 'ripple:bg-primary',\n          states: ['state-primary', 'in-focus-visible:border-primary'],\n        },\n      },\n      {\n        variant: 'outlined',\n        color: 'secondary',\n        className: {\n          typography: 'text-secondary',\n          ripple: 'ripple:bg-secondary',\n          states: ['state-secondary', 'in-focus-visible:border-secondary'],\n        },\n      },\n      {\n        variant: 'outlined',\n        color: 'info',\n        className: {\n          typography: 'text-info',\n          ripple: 'ripple:bg-info',\n          states: ['state-info', 'in-focus-visible:border-info'],\n        },\n      },\n      {\n        variant: 'outlined',\n        color: 'success',\n        className: {\n          typography: 'text-success',\n          ripple: 'ripple:bg-success',\n          states: ['state-success', 'in-focus-visible:border-success'],\n        },\n      },\n      {\n        variant: 'outlined',\n        color: 'caution',\n        className: {\n          typography: 'text-caution',\n          ripple: 'ripple:bg-caution',\n          states: ['state-caution', 'in-focus-visible:border-caution'],\n        },\n      },\n      {\n        variant: 'outlined',\n        color: 'critical',\n        className: {\n          typography: 'text-critical',\n          ripple: 'ripple:bg-critical',\n          states: ['state-critical', 'in-focus-visible:border-critical'],\n        },\n      },\n      // #endregion Outlined\n\n      // #region Text\n      {\n        variant: 'text',\n        color: 'primary',\n        className: {\n          typography: 'text-primary',\n          ripple: 'ripple:bg-primary',\n          states: 'state-primary',\n        },\n      },\n      {\n        variant: 'text',\n        color: 'secondary',\n        className: {\n          typography: 'text-secondary',\n          ripple: 'ripple:bg-secondary',\n          states: 'state-secondary',\n        },\n      },\n      {\n        variant: 'text',\n        color: 'info',\n        className: {\n          typography: 'text-info',\n          ripple: 'ripple:bg-info',\n          states: 'state-info',\n        },\n      },\n      {\n        variant: 'text',\n        color: 'success',\n        className: {\n          typography: 'text-success',\n          ripple: 'ripple:bg-success',\n          states: 'state-success',\n        },\n      },\n      {\n        variant: 'text',\n        color: 'caution',\n        className: {\n          typography: 'text-caution',\n          ripple: 'ripple:bg-caution',\n          states: 'state-caution',\n        },\n      },\n      {\n        variant: 'text',\n        color: 'critical',\n        className: {\n          typography: 'text-critical',\n          ripple: 'ripple:bg-critical',\n          states: 'state-critical',\n        },\n      },\n      // #endregion Text\n    ],\n  },\n);\n\nconst labelVariants = cva(\n  {\n    name: 'button--label',\n    typography: ['typography-label-large', 'truncate'],\n  },\n  {\n    variants: {\n      variant: {\n        elevated: {},\n        filled: {},\n        tonal: {},\n        outlined: {},\n        text: {},\n      },\n    },\n    defaultVariants: {\n      variant: 'elevated',\n    },\n    compoundVariants: [\n      {\n        variant: ['elevated', 'filled', 'tonal', 'outlined'],\n        className: { spacing: 'px-xs' },\n      },\n      {\n        variant: 'text',\n        className: { spacing: 'px-2xs' },\n      },\n    ],\n  },\n);\n\nconst iconVariants = cva({\n  name: 'button--icon',\n  layout: 'relative',\n  flex: 'inline-flex',\n  box: 'size-4.5',\n  overflow: 'overflow-hidden empty:hidden',\n  other: '[&>*]:absolute [&>*]:inset-0 [&>*]:size-full',\n});\n\nexport const buttonVariants = Object.assign(variants, {\n  label: labelVariants,\n  icon: iconVariants,\n});\n",
      "type": "components"
    },
    {
      "name": "action/button/compound/button-left-icon.tsx",
      "content": "import React from 'react';\nimport { useButtonContext } from '../context';\n\nexport const ButtonLeftIcon: React.FC<React.PropsWithChildren> = ({\n  children,\n}) => {\n  const [, setState] = useButtonContext();\n\n  React.useEffect(() => {\n    setState((prev) => ({\n      ...prev,\n      leftIcon: children,\n    }));\n\n    return () => {\n      setState((prev) => ({ ...prev, leftIcon: null }));\n    };\n  }, [children, setState]);\n\n  return null;\n};\n",
      "type": "components"
    },
    {
      "name": "action/button/compound/button-right-icon.tsx",
      "content": "import React from 'react';\nimport { useButtonContext } from '../context';\n\nexport const ButtonRightIcon: React.FC<React.PropsWithChildren> = ({\n  children,\n}) => {\n  const [, setState] = useButtonContext();\n\n  React.useEffect(() => {\n    setState((prev) => ({\n      ...prev,\n      rightIcon: children,\n    }));\n\n    return () => {\n      setState((prev) => ({ ...prev, rightIcon: null }));\n    };\n  }, [children, setState]);\n\n  return null;\n};\n",
      "type": "components"
    },
    {
      "name": "action/button/compound/index.ts",
      "content": "export * from './button-left-icon';\nexport * from './button-right-icon';\n",
      "type": "components"
    },
    {
      "name": "action/button/context/button.context.tsx",
      "content": "import type { ContextState } from '@/types';\nimport React from 'react';\n\nexport type ButtonContextState = ContextState<{\n  leftIcon?: React.ReactNode;\n  rightIcon?: React.ReactNode;\n}>;\n\nconst ButtonContext = React.createContext<ButtonContextState | null>(null);\n\nexport const useButtonContext = () => {\n  const value = React.useContext(ButtonContext);\n  if (!value)\n    throw new Error('This component must be used within a <Button> component');\n  return value;\n};\n\nexport const ButtonContextProvider: React.FC<React.PropsWithChildren> = ({\n  children,\n}) => {\n  const state = React.useState<ButtonContextState[0]>({});\n\n  return (\n    <ButtonContext.Provider value={state}>{children}</ButtonContext.Provider>\n  );\n};\n",
      "type": "components"
    },
    {
      "name": "action/button/context/index.ts",
      "content": "export * from './button.context';\n",
      "type": "components"
    },
    {
      "name": "action/button/index.ts",
      "content": "export * from './button';\nexport * from './button.types';\nexport * from './button.variants';\nexport * from './compound';\n",
      "type": "components"
    },
    {
      "name": "action/button/internal/index.ts",
      "content": "export * from './internal-button-icon';\n",
      "type": "components"
    },
    {
      "name": "action/button/internal/internal-button-icon.tsx",
      "content": "import { materialDuration, materialEasing } from '@/config';\nimport { cn, keyFromChildren } from '@/utility';\nimport { AnimatePresence, motion } from 'motion/react';\nimport type React from 'react';\nimport { buttonVariants } from '../button.variants';\n\nexport const InternalButtonIcon: React.FC<\n  React.PropsWithChildren<{\n    className?: string;\n  }>\n> = ({ className, children }) => {\n  return (\n    <AnimatePresence mode=\"wait\">\n      {children && (\n        <motion.span\n          key={keyFromChildren(children)}\n          initial={{ width: 0, height: 0, opacity: 0 }}\n          animate={{\n            width: 'var(--spacing-4h)',\n            height: 'var(--spacing-4h)',\n            opacity: 1,\n          }}\n          exit={{ width: 0, height: 0, opacity: 0 }}\n          transition={{\n            duration: materialDuration.asMotion('medium-1'),\n            ease: materialEasing['standard'],\n          }}\n          className={cn(buttonVariants.icon(), className)}\n        >\n          {children}\n        </motion.span>\n      )}\n    </AnimatePresence>\n  );\n};\n",
      "type": "components"
    },
    {
      "name": "action/extended-fab/compound/extended-fab-icon.tsx",
      "content": "import React from 'react';\nimport { useExtendedFabContext } from '../context';\n\nexport const ExtendedFabIcon: React.FC<React.PropsWithChildren> = ({\n  children,\n}) => {\n  const [, setState] = useExtendedFabContext();\n\n  React.useEffect(() => {\n    setState((prev) => ({\n      ...prev,\n      icon: children,\n    }));\n\n    return () => {\n      setState((prev) => ({ ...prev, icon: null }));\n    };\n  }, [children, setState]);\n\n  return null;\n};\n",
      "type": "components"
    },
    {
      "name": "action/extended-fab/compound/index.ts",
      "content": "export * from './extended-fab-icon';\n",
      "type": "components"
    },
    {
      "name": "action/extended-fab/context/extended-fab.context.tsx",
      "content": "import type { ContextState } from '@/types';\nimport React from 'react';\n\nexport type ExtendedFabContextState = ContextState<{\n  icon?: React.ReactNode;\n}>;\n\nconst ExtendedFabContext = React.createContext<ExtendedFabContextState | null>(\n  null,\n);\n\nexport const useExtendedFabContext = () => {\n  const value = React.useContext(ExtendedFabContext);\n  if (!value)\n    throw new Error(\n      'This component must be used within a <ExtendedFab> component',\n    );\n  return value;\n};\n\nexport const ExtendedFabContextProvider: React.FC<React.PropsWithChildren> = ({\n  children,\n}) => {\n  const state = React.useState<ExtendedFabContextState[0]>({});\n\n  return (\n    <ExtendedFabContext.Provider value={state}>\n      {children}\n    </ExtendedFabContext.Provider>\n  );\n};\n",
      "type": "components"
    },
    {
      "name": "action/extended-fab/context/index.ts",
      "content": "export * from './extended-fab.context';\n",
      "type": "components"
    },
    {
      "name": "action/extended-fab/extended-fab.tsx",
      "content": "import { useInteractionsWithRipple, useMergedRefs } from '@/hooks';\nimport { cn, mergeProps, unwrapChildren, withProvider } from '@/utility';\nimport { Slot, Slottable } from '@radix-ui/react-slot';\nimport React from 'react';\nimport { useButton } from 'react-aria';\nimport { ExtendedFabContextProvider, useExtendedFabContext } from './context';\nimport type { ExtendedFabProps } from './extended-fab.types';\nimport { extendedFabVariants } from './extended-fab.variants';\nimport { InternalExtendedFabIcon, InternalExtendedFabLabel } from './internal';\n\nconst ExtendedFabImpl = React.forwardRef<HTMLButtonElement, ExtendedFabProps>(\n  (\n    { color, lowered, asFab, className, asChild, children, ...props },\n    forwardedRef,\n  ) => {\n    const ref = useMergedRefs(forwardedRef);\n    const [{ icon }] = useExtendedFabContext();\n\n    const { buttonProps } = useButton(props, ref);\n\n    const { interactionsProps, rippleProps } =\n      useInteractionsWithRipple<'button'>(buttonProps);\n\n    const Comp = asChild ? Slot : 'button';\n\n    return (\n      <Comp\n        type=\"button\"\n        {...mergeProps(props, interactionsProps, rippleProps)}\n        ref={ref}\n        className={cn(\n          extendedFabVariants({\n            color,\n            lowered,\n            asFab,\n          }),\n          className,\n        )}\n        data-lowered={lowered ?? false}\n        data-as-fab={asFab ?? false}\n      >\n        <InternalExtendedFabIcon asFab={asFab ?? false}>\n          {icon}\n        </InternalExtendedFabIcon>\n        <Slottable>\n          {unwrapChildren(\n            children,\n            (child) => (\n              <InternalExtendedFabLabel asFab={asFab ?? false}>\n                {child}\n              </InternalExtendedFabLabel>\n            ),\n            !asChild,\n          )}\n        </Slottable>\n      </Comp>\n    );\n  },\n);\nExtendedFabImpl.displayName = 'ExtendedFab';\n\nexport const ExtendedFab = withProvider(\n  ExtendedFabContextProvider,\n  ExtendedFabImpl,\n);\n",
      "type": "components"
    },
    {
      "name": "action/extended-fab/extended-fab.types.ts",
      "content": "import type { AriaPropsWithAsChild } from '@/types';\nimport type { VariantProps } from 'class-variance-authority';\nimport type { AriaButtonProps } from 'react-aria';\nimport type { extendedFabVariants } from './extended-fab.variants';\n\nexport type ExtendedFabProps = AriaPropsWithAsChild<\n  'button',\n  AriaButtonProps,\n  'isDisabled'\n> &\n  VariantProps<typeof extendedFabVariants>;\n",
      "type": "components"
    },
    {
      "name": "action/extended-fab/extended-fab.variants.ts",
      "content": "import { cva } from '@/utility';\n\nconst variants = cva(\n  {\n    name: 'extended-fab group/extended-fab',\n    layout: 'relative',\n    box: 'h-14 rounded-md',\n    spacing: 'p-md',\n    flex: 'inline-flex items-center justify-center',\n    transitions: [\n      'transition-[min-width,color,background-color,border-color,text-decoration-color,fill,stroke,opacity,box-shadow,transform,filter,backdrop-filter,-webkit-backdrop-filter]',\n      'easing-standard duration-medium-1',\n    ],\n    borders: 'outline-none border-transparent',\n    overflow: 'overflow-hidden',\n    typography: 'whitespace-nowrap',\n    states: [\n      'cursor-pointer',\n      'is-hovered:state-hover',\n      'in-focus-visible:state-focus',\n      'is-pressed:state-press',\n    ],\n    ripple: 'ripple-wrapper:-inset-1',\n  },\n  {\n    variants: {\n      color: {\n        surface: {\n          typography: 'state-primary',\n          ripple: 'ripple:bg-primary',\n          states: 'state-primary',\n        },\n        primary: {\n          background: 'bg-primary-container',\n          typography: 'text-on-primary-container',\n          ripple: 'ripple:bg-on-primary-container',\n          states: 'state-on-primary-container',\n        },\n        secondary: {\n          background: 'bg-secondary-container',\n          typography: 'text-on-secondary-container',\n          ripple: 'ripple:bg-on-secondary-container',\n          states: 'state-on-secondary-container',\n        },\n        info: {\n          background: 'bg-info-container',\n          typography: 'text-on-info-container',\n          ripple: 'ripple:bg-on-info-container',\n          states: 'state-on-info-container',\n        },\n        success: {\n          background: 'bg-success-container',\n          typography: 'text-on-success-container',\n          ripple: 'ripple:bg-on-success-container',\n          states: 'state-on-success-container',\n        },\n        caution: {\n          background: 'bg-caution-container',\n          typography: 'text-on-caution-container',\n          ripple: 'ripple:bg-on-caution-container',\n          states: 'state-on-caution-container',\n        },\n        critical: {\n          background: 'bg-critical-container',\n          typography: 'text-on-critical-container',\n          ripple: 'ripple:bg-on-critical-container',\n          states: 'state-on-critical-container',\n        },\n      },\n      lowered: {\n        true: {\n          effects: [\n            'elevation-1',\n            'is-hovered:elevation-2',\n            'in-focus-visible:elevation-1',\n            'is-pressed:elevation-1',\n          ],\n        },\n        false: {\n          effects: [\n            'elevation-3',\n            'is-hovered:elevation-4',\n            'in-focus-visible:elevation-3',\n            'is-pressed:elevation-3',\n          ],\n        },\n      },\n      asFab: {\n        true: {\n          box: 'min-w-14',\n        },\n        false: {\n          box: 'min-w-20',\n        },\n      },\n    },\n    defaultVariants: {\n      color: 'surface',\n      lowered: false,\n      asFab: false,\n    },\n    compoundVariants: [\n      {\n        color: 'surface',\n        lowered: false,\n        className: {\n          background: 'bg-surface-container-high',\n        },\n      },\n      {\n        color: 'surface',\n        lowered: true,\n        className: {\n          background: 'bg-surface-container-low',\n        },\n      },\n    ],\n  },\n);\n\nconst labelVariants = cva(\n  {\n    name: 'fab--label',\n    layout: 'relative',\n    flex: 'inline-flex',\n    box: 'w-max',\n    spacing: 'px-2xs',\n    typography: 'truncate typography-label-large',\n    overflow: 'overflow-hidden empty:hidden',\n  },\n  {\n    variants: {\n      asFab: {\n        true: {\n          overflow: 'hidden',\n        },\n        false: {},\n      },\n    },\n    defaultVariants: {\n      asFab: false,\n    },\n  },\n);\n\nconst iconVariants = cva({\n  name: 'fab--icon',\n  layout: 'relative',\n  flex: 'inline-flex',\n  box: 'size-6',\n  overflow: 'overflow-hidden empty:hidden',\n  other: '[&>*]:absolute [&>*]:inset-0 [&>*]:size-full',\n});\n\nexport const extendedFabVariants = Object.assign(variants, {\n  label: labelVariants,\n  icon: iconVariants,\n});\n",
      "type": "components"
    },
    {
      "name": "action/extended-fab/index.ts",
      "content": "export * from './compound';\nexport * from './extended-fab';\nexport * from './extended-fab.types';\nexport * from './extended-fab.variants';\n",
      "type": "components"
    },
    {
      "name": "action/extended-fab/internal/index.ts",
      "content": "export * from './internal-extended-fab-icon';\nexport * from './internal-extended-fab-label';\n",
      "type": "components"
    },
    {
      "name": "action/extended-fab/internal/internal-extended-fab-icon.tsx",
      "content": "import { materialDuration, materialEasing } from '@/config';\nimport { cn, keyFromChildren } from '@/utility';\nimport { AnimatePresence, motion } from 'motion/react';\nimport type React from 'react';\nimport type { ExtendedFabProps } from '../extended-fab.types';\nimport { extendedFabVariants } from '../extended-fab.variants';\n\nexport const InternalExtendedFabIcon: React.FC<\n  React.PropsWithChildren<{\n    asFab: NonNullable<ExtendedFabProps['asFab']>;\n    className?: string;\n  }>\n> = ({ asFab, className, children }) => {\n  return (\n    <AnimatePresence mode=\"wait\">\n      {children && (\n        <motion.span\n          key={keyFromChildren(children)}\n          initial={{ width: 0, height: 0, opacity: 0 }}\n          animate={{\n            width: 'var(--spacing-6)',\n            height: 'var(--spacing-6)',\n            opacity: 1,\n            marginRight: asFab ? 0 : 'var(--spacing-xs)',\n          }}\n          exit={{ width: 0, height: 0, opacity: 0 }}\n          transition={{\n            duration: materialDuration.asMotion('medium-1'),\n            ease: materialEasing['standard'],\n          }}\n          className={cn(extendedFabVariants.icon(), className)}\n        >\n          {children}\n        </motion.span>\n      )}\n    </AnimatePresence>\n  );\n};\n",
      "type": "components"
    },
    {
      "name": "action/extended-fab/internal/internal-extended-fab-label.tsx",
      "content": "import { materialDuration, materialEasing } from '@/config';\nimport { cn } from '@/utility';\nimport { AnimatePresence, motion } from 'motion/react';\nimport type React from 'react';\nimport type { ExtendedFabProps } from '../extended-fab.types';\nimport { extendedFabVariants } from '../extended-fab.variants';\n\nexport const InternalExtendedFabLabel: React.FC<\n  React.PropsWithChildren<{\n    asFab: NonNullable<ExtendedFabProps['asFab']>;\n    className?: string;\n  }>\n> = ({ asFab, className, children }) => {\n  return (\n    <AnimatePresence mode=\"wait\">\n      {children && (\n        <motion.span\n          key={`${asFab}`}\n          initial={{ width: 0, opacity: 0 }}\n          animate={{\n            width: 'max-content',\n            opacity: 1,\n          }}\n          exit={{ width: 0, opacity: 0 }}\n          transition={{\n            duration: materialDuration.asMotion('medium-1'),\n            ease: materialEasing['standard'],\n          }}\n          className={cn(extendedFabVariants.label({ asFab }), className)}\n        >\n          {children}\n        </motion.span>\n      )}\n    </AnimatePresence>\n  );\n};\n",
      "type": "components"
    },
    {
      "name": "action/fab/fab.tsx",
      "content": "import { useInteractionsWithRipple, useMergedRefs } from '@/hooks';\nimport { cn, mergeProps, unwrapChildren } from '@/utility';\nimport { Slot } from '@radix-ui/react-slot';\nimport React from 'react';\nimport { useButton } from 'react-aria';\nimport type { FabProps } from './fab.types';\nimport { fabVariants } from './fab.variants';\nimport { InternalFabIcon } from './internal/internal-fab-icon';\n\nexport const Fab = React.forwardRef<HTMLButtonElement, FabProps>(\n  (\n    { color, size, lowered, className, asChild, children, ...props },\n    forwardedRef,\n  ) => {\n    const ref = useMergedRefs(forwardedRef);\n\n    const { buttonProps } = useButton(props, ref);\n\n    const { interactionsProps, rippleProps } =\n      useInteractionsWithRipple<'button'>(buttonProps);\n\n    const Comp = asChild ? Slot : 'button';\n\n    return (\n      <Comp\n        type=\"button\"\n        {...mergeProps(props, interactionsProps, rippleProps)}\n        ref={ref}\n        className={cn(\n          'fab',\n          fabVariants({\n            color,\n            size,\n            lowered,\n          }),\n          className,\n        )}\n        data-lowered={lowered ?? 'false'}\n      >\n        {unwrapChildren(\n          children,\n          (child) => (\n            <InternalFabIcon size={size ?? 'md'}>{child}</InternalFabIcon>\n          ),\n          !asChild,\n        )}\n      </Comp>\n    );\n  },\n);\nFab.displayName = 'Fab';\n",
      "type": "components"
    },
    {
      "name": "action/fab/fab.types.ts",
      "content": "import type { AriaPropsWithAsChild } from '@/types';\nimport type { VariantProps } from 'class-variance-authority';\nimport type { AriaButtonProps } from 'react-aria';\nimport type { fabVariants } from './fab.variants';\n\nexport type FabProps = AriaPropsWithAsChild<\n  'button',\n  AriaButtonProps,\n  'isDisabled'\n> &\n  VariantProps<typeof fabVariants>;\n",
      "type": "components"
    },
    {
      "name": "action/fab/fab.variants.ts",
      "content": "import { cva } from '@/utility';\n\nconst variants = cva(\n  {\n    name: 'fab group/fab',\n    layout: 'relative',\n    flex: 'inline-flex items-center justify-center',\n    transitions: 'transition easing-standard duration-medium-1',\n    borders: 'outline-none border-transparent',\n    overflow: 'overflow-hidden',\n    typography: 'whitespace-wrap',\n    states: [\n      'cursor-pointer',\n      'is-hovered:state-hover',\n      'in-focus-visible:state-focus',\n      'is-pressed:state-press',\n    ],\n    ripple: 'ripple-wrapper:-inset-1',\n  },\n  {\n    variants: {\n      color: {\n        surface: {\n          typography: 'state-primary',\n          ripple: 'ripple:bg-primary',\n          states: 'state-primary',\n        },\n        primary: {\n          background: 'bg-primary-container',\n          typography: 'text-on-primary-container',\n          ripple: 'ripple:bg-on-primary-container',\n          states: 'state-on-primary-container',\n        },\n        secondary: {\n          background: 'bg-secondary-container',\n          typography: 'text-on-secondary-container',\n          ripple: 'ripple:bg-on-secondary-container',\n          states: 'state-on-secondary-container',\n        },\n        info: {\n          background: 'bg-info-container',\n          typography: 'text-on-info-container',\n          ripple: 'ripple:bg-on-info-container',\n          states: 'state-on-info-container',\n        },\n        success: {\n          background: 'bg-success-container',\n          typography: 'text-on-success-container',\n          ripple: 'ripple:bg-on-success-container',\n          states: 'state-on-success-container',\n        },\n        caution: {\n          background: 'bg-caution-container',\n          typography: 'text-on-caution-container',\n          ripple: 'ripple:bg-on-caution-container',\n          states: 'state-on-caution-container',\n        },\n        critical: {\n          background: 'bg-critical-container',\n          typography: 'text-on-critical-container',\n          ripple: 'ripple:bg-on-critical-container',\n          states: 'state-on-critical-container',\n        },\n      },\n      size: {\n        sm: {\n          box: 'size-10 rounded-xs',\n        },\n        md: {\n          box: 'size-14 rounded-md',\n          spacing: 'p-md',\n        },\n        lg: {\n          box: 'size-24 rounded-2xl',\n          spacing: 'p-md',\n        },\n      },\n      lowered: {\n        true: {\n          effects: [\n            'elevation-1',\n            'is-hovered:elevation-2',\n            'in-focus-visible:elevation-1',\n            'is-pressed:elevation-1',\n          ],\n        },\n        false: {\n          effects: [\n            'elevation-3',\n            'is-hovered:elevation-4',\n            'in-focus-visible:elevation-3',\n            'is-pressed:elevation-3',\n          ],\n        },\n      },\n    },\n    defaultVariants: {\n      color: 'surface',\n      size: 'md',\n      lowered: false,\n    },\n    compoundVariants: [\n      {\n        color: 'surface',\n        lowered: false,\n        className: {\n          background: 'bg-surface-container-high',\n        },\n      },\n      {\n        color: 'surface',\n        lowered: true,\n        className: {\n          background: 'bg-surface-container-low',\n        },\n      },\n    ],\n  },\n);\n\nconst iconVariants = cva(\n  {\n    name: 'fab--icon',\n    layout: 'relative',\n    flex: 'inline-flex',\n    overflow: 'overflow-hidden empty:hidden',\n    other: '[&>*]:absolute [&>*]:inset-0 [&>*]:size-full',\n  },\n  {\n    variants: {\n      size: {\n        sm: {\n          box: 'size-6',\n        },\n        md: {\n          box: 'size-6',\n        },\n        lg: {\n          box: 'size-9',\n        },\n      },\n    },\n  },\n);\n\nexport const fabVariants = Object.assign(variants, {\n  icon: iconVariants,\n});\n",
      "type": "components"
    },
    {
      "name": "action/fab/index.ts",
      "content": "export * from './fab';\nexport * from './fab.types';\nexport * from './fab.variants';\n",
      "type": "components"
    },
    {
      "name": "action/fab/internal/index.ts",
      "content": "",
      "type": "components"
    },
    {
      "name": "action/fab/internal/internal-fab-icon.tsx",
      "content": "import { materialDuration, materialEasing } from '@/config';\nimport { cn, keyFromChildren } from '@/utility';\nimport { AnimatePresence, motion } from 'motion/react';\nimport type React from 'react';\nimport type { FabProps } from '../fab.types';\nimport { fabVariants } from '../fab.variants';\n\nconst sizes = {\n  sm: 'var(--spacing-6)',\n  md: 'var(--spacing-6)',\n  lg: 'var(--spacing-9)',\n} as const;\n\nexport const InternalFabIcon: React.FC<\n  React.PropsWithChildren<{\n    size: NonNullable<FabProps['size']>;\n    className?: string;\n  }>\n> = ({ size, className, children }) => {\n  return (\n    <AnimatePresence mode=\"wait\">\n      {children && (\n        <motion.span\n          key={keyFromChildren(children)}\n          initial={{ width: 0, height: 0, opacity: 0 }}\n          animate={{\n            width: sizes[size],\n            height: sizes[size],\n            opacity: 1,\n          }}\n          exit={{ width: 0, height: 0, opacity: 0 }}\n          transition={{\n            duration: materialDuration.asMotion('medium-1'),\n            ease: materialEasing['standard'],\n          }}\n          className={cn(fabVariants.icon(), className)}\n        >\n          {children}\n        </motion.span>\n      )}\n    </AnimatePresence>\n  );\n};\n",
      "type": "components"
    },
    {
      "name": "action/icon-button/icon-button.tsx",
      "content": "import { useInteractionsWithRipple, useMergedRefs } from '@/hooks';\nimport type { Props } from '@/types';\nimport { cn, mergeProps, unwrapChildren } from '@/utility';\nimport { Slot } from '@radix-ui/react-slot';\nimport React from 'react';\nimport { useButton, useToggleButton } from 'react-aria';\nimport { useToggleState } from 'react-stately';\nimport type { IconButtonProps } from './icon-button.types';\nimport { iconButtonVariants } from './icon-button.variants';\nimport { InternalIconButtonIcon } from './internal';\n\nexport const IconButton = React.forwardRef<HTMLButtonElement, IconButtonProps>(\n  (\n    {\n      variant,\n      color,\n      isToggleable,\n      isDisabled,\n      isSelected,\n      className,\n      asChild,\n      children,\n      ...props\n    },\n    forwardedRef,\n  ) => {\n    const ref = useMergedRefs(forwardedRef);\n\n    const { buttonProps } = useButton({ ...props, isDisabled }, ref);\n\n    const state = useToggleState({ ...props, isDisabled });\n    const { buttonProps: toggleButtonProps } = useToggleButton(\n      { ...props, isDisabled },\n      state,\n      ref,\n    );\n\n    const { interactionsProps, rippleProps } =\n      useInteractionsWithRipple<'button'>({\n        isDisabled,\n      });\n\n    const Comp = asChild ? Slot : 'button';\n\n    return (\n      <Comp\n        type=\"button\"\n        {...mergeProps(\n          props as Props<'button'>,\n          isToggleable ? toggleButtonProps : buttonProps,\n          interactionsProps,\n          rippleProps,\n        )}\n        ref={ref}\n        className={cn(\n          iconButtonVariants({\n            variant,\n            color,\n            isToggleable,\n            isSelected,\n          }),\n          className,\n        )}\n        data-toggleable={isToggleable ?? false}\n        data-selected={(isToggleable && isSelected) ?? false}\n      >\n        {unwrapChildren(\n          children,\n          (child) => (\n            <InternalIconButtonIcon>{child}</InternalIconButtonIcon>\n          ),\n          !asChild,\n        )}\n      </Comp>\n    );\n  },\n);\nIconButton.displayName = 'IconButton';\n",
      "type": "components"
    },
    {
      "name": "action/icon-button/icon-button.types.ts",
      "content": "import type { AriaPropsWithAsChild } from '@/types';\nimport type { VariantProps } from 'class-variance-authority';\nimport type { AriaButtonProps, AriaToggleButtonProps } from 'react-aria';\nimport type { iconButtonVariants } from './icon-button.variants';\n\nexport type IconButtonProps = AriaPropsWithAsChild<\n  'button',\n  AriaButtonProps & AriaToggleButtonProps\n> &\n  VariantProps<typeof iconButtonVariants>;\n",
      "type": "components"
    },
    {
      "name": "action/icon-button/icon-button.variants.ts",
      "content": "import { cva } from '@/utility';\n\nconst variants = cva(\n  {\n    name: 'icon-button group/icon-button',\n    layout: 'relative',\n    box: 'size-10 rounded-md',\n    flex: 'inline-flex items-center justify-center',\n    transitions: 'transition easing-standard duration-medium-1',\n    borders: 'outline-none border-transparent',\n    overflow: 'overflow-hidden',\n    typography: 'whitespace-nowrap',\n    states: [\n      'cursor-pointer',\n      'is-disabled:state-transparent',\n      'is-disabled:pointer-events-none',\n      'is-hovered:state-hover',\n      'in-focus-visible:state-focus',\n      'is-pressed:state-press',\n    ],\n    ripple: 'ripple-wrapper:-inset-1',\n  },\n  {\n    variants: {\n      variant: {\n        standard: {\n          background: 'bg-transparent',\n          typography: ['is-disabled:text-on-surface/38'],\n        },\n        filled: {\n          background: ['is-disabled:bg-on-surface/12'],\n          typography: ['is-disabled:text-on-surface/38'],\n        },\n        tonal: {\n          background: ['is-disabled:bg-on-surface/12'],\n          typograhpy: ['is-disabled:text-on-surface/38'],\n        },\n        outlined: {\n          borders: 'border',\n          typography: ['is-disabled:text-on-surface/38'],\n        },\n      },\n      color: {\n        primary: {},\n        secondary: {},\n        info: {},\n        success: {},\n        caution: {},\n        critical: {},\n      },\n      isToggleable: {\n        true: {},\n        false: {},\n      },\n      isSelected: {\n        true: {},\n        false: {},\n      },\n    },\n    defaultVariants: {\n      color: 'primary',\n      variant: 'standard',\n      isToggleable: false,\n      isSelected: false,\n    },\n    compoundVariants: [\n      // #region Standard\n      {\n        variant: 'standard',\n        isToggleable: true,\n        isSelected: false,\n        className: {\n          typography: 'text-on-surface-variant',\n          ripple: 'ripple:bg-on-surface-variant',\n          states: 'state-on-surface-variant',\n        },\n      },\n      {\n        variant: 'standard',\n        color: 'primary',\n        isToggleable: false,\n        className: {\n          typography: 'text-primary',\n          ripple: 'ripple:bg-primary',\n          states: 'state-primary',\n        },\n      },\n      {\n        variant: 'standard',\n        color: 'primary',\n        isToggleable: true,\n        isSelected: true,\n        className: {\n          typography: 'text-primary',\n          ripple: 'ripple:bg-primary',\n          states: 'state-primary',\n        },\n      },\n      {\n        variant: 'standard',\n        color: 'secondary',\n        isToggleable: false,\n        className: {\n          typography: 'text-secondary',\n          ripple: 'ripple:bg-secondary',\n          states: 'state-secondary',\n        },\n      },\n      {\n        variant: 'standard',\n        color: 'secondary',\n        isToggleable: true,\n        isSelected: true,\n        className: {\n          typography: 'text-secondary',\n          ripple: 'ripple:bg-secondary',\n          states: 'state-secondary',\n        },\n      },\n      {\n        variant: 'standard',\n        color: 'info',\n        isToggleable: false,\n        className: {\n          typography: 'text-info',\n          ripple: 'ripple:bg-info',\n          states: 'state-info',\n        },\n      },\n      {\n        variant: 'standard',\n        color: 'info',\n        isToggleable: true,\n        isSelected: true,\n        className: {\n          typography: 'text-info',\n          ripple: 'ripple:bg-info',\n          states: 'state-info',\n        },\n      },\n      {\n        variant: 'standard',\n        color: 'success',\n        isToggleable: false,\n        className: {\n          typography: 'text-success',\n          ripple: 'ripple:bg-success',\n          states: 'state-success',\n        },\n      },\n      {\n        variant: 'standard',\n        color: 'success',\n        isToggleable: true,\n        isSelected: true,\n        className: {\n          typography: 'text-success',\n          ripple: 'ripple:bg-success',\n          states: 'state-success',\n        },\n      },\n      {\n        variant: 'standard',\n        color: 'caution',\n        isToggleable: false,\n        className: {\n          typography: 'text-caution',\n          ripple: 'ripple:bg-caution',\n          states: 'state-caution',\n        },\n      },\n      {\n        variant: 'standard',\n        color: 'caution',\n        isToggleable: true,\n        isSelected: true,\n        className: {\n          typography: 'text-caution',\n          ripple: 'ripple:bg-caution',\n          states: 'state-caution',\n        },\n      },\n      {\n        variant: 'standard',\n        color: 'critical',\n        isToggleable: false,\n        className: {\n          typography: 'text-critical',\n          ripple: 'ripple:bg-critical',\n          states: 'state-critical',\n        },\n      },\n      {\n        variant: 'standard',\n        color: 'critical',\n        isToggleable: true,\n        isSelected: true,\n        className: {\n          typography: 'text-critical',\n          ripple: 'ripple:bg-critical',\n          states: 'state-critical',\n        },\n      },\n      // #endregion Standard\n\n      // #region Filled\n      {\n        variant: 'filled',\n        color: 'primary',\n        isToggleable: false,\n        className: {\n          background: 'bg-primary',\n          typography: 'text-on-primary',\n          ripple: 'ripple:bg-on-primary',\n          states: 'state-on-primary',\n        },\n      },\n      {\n        variant: 'filled',\n        color: 'primary',\n        isToggleable: true,\n        isSelected: false,\n        className: {\n          background: 'bg-surface-container-highest',\n          typography: 'text-primary',\n          ripple: 'ripple:bg-primary',\n          states: 'state-primary',\n        },\n      },\n      {\n        variant: 'filled',\n        color: 'primary',\n        isToggleable: true,\n        isSelected: true,\n        className: {\n          background: 'bg-primary',\n          typography: 'text-on-primary',\n          ripple: 'ripple:bg-on-primary',\n          states: 'state-on-primary',\n        },\n      },\n      {\n        variant: 'filled',\n        color: 'secondary',\n        isToggleable: false,\n        className: {\n          background: 'bg-secondary',\n          typography: 'text-on-secondary',\n          ripple: 'ripple:bg-on-secondary',\n          states: 'state-on-secondary',\n        },\n      },\n      {\n        variant: 'filled',\n        color: 'secondary',\n        isToggleable: true,\n        isSelected: false,\n        className: {\n          background: 'bg-surface-container-highest',\n          typography: 'text-secondary',\n          ripple: 'ripple:bg-secondary',\n          states: 'state-secondary',\n        },\n      },\n      {\n        variant: 'filled',\n        color: 'secondary',\n        isToggleable: true,\n        isSelected: true,\n        className: {\n          background: 'bg-secondary',\n          typography: 'text-on-secondary',\n          ripple: 'ripple:bg-on-secondary',\n          states: 'state-on-secondary',\n        },\n      },\n      {\n        variant: 'filled',\n        color: 'info',\n        isToggleable: false,\n        className: {\n          background: 'bg-info',\n          typography: 'text-on-info',\n          ripple: 'ripple:bg-on-info',\n          states: 'state-on-info',\n        },\n      },\n      {\n        variant: 'filled',\n        color: 'info',\n        isToggleable: true,\n        isSelected: false,\n        className: {\n          background: 'bg-surface-container-highest',\n          typography: 'text-info',\n          ripple: 'ripple:bg-info',\n          states: 'state-info',\n        },\n      },\n      {\n        variant: 'filled',\n        color: 'info',\n        isToggleable: true,\n        isSelected: true,\n        className: {\n          background: 'bg-info',\n          typography: 'text-on-info',\n          ripple: 'ripple:bg-on-info',\n          states: 'state-on-info',\n        },\n      },\n      {\n        variant: 'filled',\n        color: 'success',\n        isToggleable: false,\n        className: {\n          background: 'bg-success',\n          typography: 'text-on-success',\n          ripple: 'ripple:bg-on-success',\n          states: 'state-on-success',\n        },\n      },\n      {\n        variant: 'filled',\n        color: 'success',\n        isToggleable: true,\n        isSelected: false,\n        className: {\n          background: 'bg-surface-container-highest',\n          typography: 'text-success',\n          ripple: 'ripple:bg-success',\n          states: 'state-success',\n        },\n      },\n      {\n        variant: 'filled',\n        color: 'success',\n        isToggleable: true,\n        isSelected: true,\n        className: {\n          background: 'bg-success',\n          typography: 'text-on-success',\n          ripple: 'ripple:bg-on-success',\n          states: 'state-on-success',\n        },\n      },\n      {\n        variant: 'filled',\n        color: 'caution',\n        isToggleable: false,\n        className: {\n          background: 'bg-caution',\n          typography: 'text-on-caution',\n          ripple: 'ripple:bg-on-caution',\n          states: 'state-on-caution',\n        },\n      },\n      {\n        variant: 'filled',\n        color: 'caution',\n        isToggleable: true,\n        isSelected: false,\n        className: {\n          background: 'bg-surface-container-highest',\n          typography: 'text-caution',\n          ripple: 'ripple:bg-caution',\n          states: 'state-caution',\n        },\n      },\n      {\n        variant: 'filled',\n        color: 'caution',\n        isToggleable: true,\n        isSelected: true,\n        className: {\n          background: 'bg-caution',\n          typography: 'text-on-caution',\n          ripple: 'ripple:bg-on-caution',\n          states: 'state-on-caution',\n        },\n      },\n      {\n        variant: 'filled',\n        color: 'critical',\n        isToggleable: false,\n        className: {\n          background: 'bg-critical',\n          typography: 'text-on-critical',\n          ripple: 'ripple:bg-on-critical',\n          states: 'state-on-critical',\n        },\n      },\n      {\n        variant: 'filled',\n        color: 'critical',\n        isToggleable: true,\n        isSelected: false,\n        className: {\n          background: 'bg-surface-container-highest',\n          typography: 'text-critical',\n          ripple: 'ripple:bg-critical',\n          states: 'state-critical',\n        },\n      },\n      {\n        variant: 'filled',\n        color: 'critical',\n        isToggleable: true,\n        isSelected: true,\n        className: {\n          background: 'bg-critical',\n          typography: 'text-on-critical',\n          ripple: 'ripple:bg-on-critical',\n          states: 'state-on-critical',\n        },\n      },\n      // #endregion Filled\n\n      // #region Tonal\n      {\n        variant: 'tonal',\n        isToggleable: true,\n        isSelected: false,\n        className: {\n          background: 'bg-surface-container-highest',\n          typography: 'text-on-surface-variant',\n          ripple: 'ripple:bg-on-surface-variant',\n          states: 'state-on-surface-variant',\n        },\n      },\n      {\n        variant: 'tonal',\n        color: 'primary',\n        isToggleable: false,\n        className: {\n          background: 'bg-primary-container',\n          typography: 'text-on-primary-container',\n          ripple: 'ripple:bg-on-primary-container',\n          states: 'state-on-primary-container',\n        },\n      },\n      {\n        variant: 'tonal',\n        color: 'primary',\n        isToggleable: true,\n        isSelected: true,\n        className: {\n          background: 'bg-primary-container',\n          typography: 'text-on-primary-container',\n          ripple: 'ripple:bg-on-primary-container',\n          states: 'state-on-primary-container',\n        },\n      },\n      {\n        variant: 'tonal',\n        color: 'secondary',\n        isToggleable: false,\n        className: {\n          background: 'bg-secondary-container',\n          typography: 'text-on-secondary-container',\n          ripple: 'ripple:bg-on-secondary-container',\n          states: 'state-on-secondary-container',\n        },\n      },\n      {\n        variant: 'tonal',\n        color: 'secondary',\n        isToggleable: true,\n        isSelected: true,\n        className: {\n          background: 'bg-secondary-container',\n          typography: 'text-on-secondary-container',\n          ripple: 'ripple:bg-on-secondary-container',\n          states: 'state-on-secondary-container',\n        },\n      },\n      {\n        variant: 'tonal',\n        color: 'info',\n        isToggleable: false,\n        className: {\n          background: 'bg-info-container',\n          typography: 'text-on-info-container',\n          ripple: 'ripple:bg-on-info-container',\n          states: 'state-on-info-container',\n        },\n      },\n      {\n        variant: 'tonal',\n        color: 'info',\n        isToggleable: true,\n        isSelected: true,\n        className: {\n          background: 'bg-info-container',\n          typography: 'text-on-info-container',\n          ripple: 'ripple:bg-on-info-container',\n          states: 'state-on-info-container',\n        },\n      },\n      {\n        variant: 'tonal',\n        color: 'success',\n        isToggleable: false,\n        className: {\n          background: 'bg-success-container',\n          typography: 'text-on-success-container',\n          ripple: 'ripple:bg-on-success-container',\n          states: 'state-on-success-container',\n        },\n      },\n      {\n        variant: 'tonal',\n        color: 'success',\n        isToggleable: true,\n        isSelected: true,\n        className: {\n          background: 'bg-success-container',\n          typography: 'text-on-success-container',\n          ripple: 'ripple:bg-on-success-container',\n          states: 'state-on-success-container',\n        },\n      },\n      {\n        variant: 'tonal',\n        color: 'caution',\n        isToggleable: false,\n        className: {\n          background: 'bg-caution-container',\n          typography: 'text-on-caution-container',\n          ripple: 'ripple:bg-on-caution-container',\n          states: 'state-on-caution-container',\n        },\n      },\n      {\n        variant: 'tonal',\n        color: 'caution',\n        isToggleable: true,\n        isSelected: true,\n        className: {\n          background: 'bg-caution-container',\n          typography: 'text-on-caution-container',\n          ripple: 'ripple:bg-on-caution-container',\n          states: 'state-on-caution-container',\n        },\n      },\n      {\n        variant: 'tonal',\n        color: 'critical',\n        isToggleable: false,\n        className: {\n          background: 'bg-critical-container',\n          typography: 'text-on-critical-container',\n          ripple: 'ripple:bg-on-critical-container',\n          states: 'state-on-critical-container',\n        },\n      },\n      {\n        variant: 'tonal',\n        color: 'critical',\n        isToggleable: true,\n        isSelected: true,\n        className: {\n          background: 'bg-critical-container',\n          typography: 'text-on-critical-container',\n          ripple: 'ripple:bg-on-critical-container',\n          states: 'state-on-critical-container',\n        },\n      },\n      // #endregion Tonal\n\n      // #region Outlined\n      {\n        variant: 'outlined',\n        isToggleable: false,\n        className: {\n          background: 'bg-transparent',\n          typography: 'text-on-surface-variant',\n          borders: ['border-outline', 'is-disabled:border-on-surface/12'],\n          ripple: 'ripple:bg-on-surface-variant',\n          states: 'state-on-surface-variant',\n        },\n      },\n      {\n        variant: 'outlined',\n        isToggleable: true,\n        isSelected: false,\n        className: {\n          background: 'bg-transparent',\n          typography: 'text-on-surface-variant',\n          borders: ['border-outline', 'is-disabled:border-on-surface/12'],\n          ripple: 'ripple:bg-on-surface-variant',\n          states: 'state-on-surface-variant',\n        },\n      },\n      {\n        variant: 'outlined',\n        isToggleable: true,\n        isSelected: true,\n        className: {\n          background: ['bg-inverse-surface', 'is-disabled:bg-on-surface/12'],\n          typography: 'text-inverse-on-surface',\n          ripple: 'ripple:bg-inverse-on-surface',\n          states: 'state-inverse-on-surface',\n        },\n      },\n      // #endregion Outlined\n    ],\n  },\n);\n\nconst iconVariants = cva({\n  name: 'icon-button--icon',\n  layout: 'relative',\n  box: 'size-6',\n  flex: 'inline-flex',\n  overflow: 'overflow-hidden empty:hidden',\n  other: '[&>*]:absolute [&>*]:inset-0 [&>*]:size-full',\n});\n\nexport const iconButtonVariants = Object.assign(variants, {\n  icon: iconVariants,\n});\n",
      "type": "components"
    },
    {
      "name": "action/icon-button/index.ts",
      "content": "export * from './icon-button';\nexport * from './icon-button.types';\nexport * from './icon-button.variants';\n",
      "type": "components"
    },
    {
      "name": "action/icon-button/internal/index.ts",
      "content": "export * from './internal-icon-button-icon';\n",
      "type": "components"
    },
    {
      "name": "action/icon-button/internal/internal-icon-button-icon.tsx",
      "content": "import { materialDuration, materialEasing } from '@/config';\nimport { cn, keyFromChildren } from '@/utility';\nimport { AnimatePresence, motion } from 'motion/react';\nimport type React from 'react';\nimport { iconButtonVariants } from '../icon-button.variants';\n\nexport const InternalIconButtonIcon: React.FC<\n  React.PropsWithChildren<{\n    className?: string;\n  }>\n> = ({ className, children }) => {\n  return (\n    <AnimatePresence mode=\"wait\">\n      {children && (\n        <motion.span\n          key={keyFromChildren(children)}\n          initial={{ width: 0, height: 0, opacity: 0 }}\n          animate={{\n            width: 'var(--spacing-6)',\n            height: 'var(--spacing-6)',\n            opacity: 1,\n          }}\n          exit={{ width: 0, height: 0, opacity: 0 }}\n          transition={{\n            duration: materialDuration.asMotion('medium-1'),\n            ease: materialEasing['standard'],\n          }}\n          className={cn(iconButtonVariants.icon(), className)}\n        >\n          {children}\n        </motion.span>\n      )}\n    </AnimatePresence>\n  );\n};\n",
      "type": "components"
    },
    {
      "name": "action/index.ts",
      "content": "export * from './button';\nexport * from './extended-fab';\nexport * from './fab';\nexport * from './icon-button';\nexport * from './segmented-button';\n",
      "type": "components"
    },
    {
      "name": "action/segmented-button/compound/index.ts",
      "content": "export * from './segmented-button-group';\n",
      "type": "components"
    },
    {
      "name": "action/segmented-button/compound/segmented-button-group/index.ts",
      "content": "export * from './segmented-button-group';\nexport * from './segmented-button-group.types';\n",
      "type": "components"
    },
    {
      "name": "action/segmented-button/compound/segmented-button-group/segmented-button-group.tsx",
      "content": "import { useMergedRefs } from '@/hooks';\nimport { cn } from '@/utility';\nimport { Slot } from '@radix-ui/react-slot';\nimport React from 'react';\nimport { useToggleButtonGroup } from 'react-aria';\nimport { useToggleGroupState } from 'react-stately';\nimport { SegmentedButtonGroupContextProvider } from '../../context';\nimport { segmentedButtonVariants } from '../../segmented-button.variants';\nimport type { SegmentedButtonGroupProps } from './segmented-button-group.types';\n\nexport const SegmentedButtonGroup = React.forwardRef<\n  HTMLElement,\n  SegmentedButtonGroupProps\n>(({ density, className, asChild, children, ...props }, forwardedRef) => {\n  const state = useToggleGroupState(props);\n  const ref = useMergedRefs(forwardedRef);\n  const { groupProps } = useToggleButtonGroup(props, state, ref);\n\n  const Comp = asChild ? Slot : 'section';\n\n  return (\n    <Comp\n      {...groupProps}\n      className={cn(segmentedButtonVariants.group({ density }), className)}\n      ref={ref}\n    >\n      <SegmentedButtonGroupContextProvider state={state}>\n        {children}\n      </SegmentedButtonGroupContextProvider>\n    </Comp>\n  );\n});\nSegmentedButtonGroup.displayName = 'SegmentedButtonGroup';\n",
      "type": "components"
    },
    {
      "name": "action/segmented-button/compound/segmented-button-group/segmented-button-group.types.ts",
      "content": "import type { AriaPropsWithAsChild } from '@/types';\nimport type { VariantProps } from 'class-variance-authority';\nimport type { AriaToggleButtonGroupProps } from 'react-aria';\nimport type { segmentedButtonVariants } from '../../segmented-button.variants';\n\nexport type SegmentedButtonGroupProps = AriaPropsWithAsChild<\n  'section',\n  AriaToggleButtonGroupProps\n> &\n  VariantProps<typeof segmentedButtonVariants.group>;\n",
      "type": "components"
    },
    {
      "name": "action/segmented-button/context/index.ts",
      "content": "export * from './segmented-button-group.context';\n",
      "type": "components"
    },
    {
      "name": "action/segmented-button/context/segmented-button-group.context.tsx",
      "content": "import React from 'react';\nimport type { ToggleGroupState } from 'react-stately';\n\nconst SegmentedButtonGroupContext =\n  React.createContext<ToggleGroupState | null>(null);\n\nexport const useSegmentedButtonGroupContext = () => {\n  const value = React.useContext(SegmentedButtonGroupContext);\n  if (!value)\n    throw new Error(\n      'This component must be used within a <SegmentedButtonGroup> component',\n    );\n  return value;\n};\n\nexport const SegmentedButtonGroupContextProvider: React.FC<\n  React.PropsWithChildren<{ state: ToggleGroupState }>\n> = ({ state, children }) => {\n  return (\n    <SegmentedButtonGroupContext.Provider value={state}>\n      {children}\n    </SegmentedButtonGroupContext.Provider>\n  );\n};\n",
      "type": "components"
    },
    {
      "name": "action/segmented-button/index.ts",
      "content": "export * from './compound';\nexport * from './segmented-button';\nexport * from './segmented-button.types';\nexport * from './segmented-button.variants';\n",
      "type": "components"
    },
    {
      "name": "action/segmented-button/segmented-button.tsx",
      "content": "import { materialDuration, materialEasing } from '@/config';\nimport { useInteractionsWithRipple, useMergedRefs } from '@/hooks';\nimport type { Props } from '@/types';\nimport { cn, mergeProps } from '@/utility';\nimport { Slot } from '@radix-ui/react-slot';\nimport { IconCheck } from '@tabler/icons-react';\nimport { AnimatePresence, motion } from 'motion/react';\nimport React from 'react';\nimport { useToggleButtonGroupItem } from 'react-aria';\nimport { useSegmentedButtonGroupContext } from './context';\nimport type { SegmentedButtonProps } from './segmented-button.types';\nimport { segmentedButtonVariants } from './segmented-button.variants';\n\nexport const SegmentedButton = React.forwardRef<\n  HTMLButtonElement,\n  SegmentedButtonProps\n>(\n  (\n    {\n      color,\n      checkIcon = <IconCheck />,\n      className,\n      asChild,\n      children,\n      ...props\n    },\n    forwardedRef,\n  ) => {\n    const ref = useMergedRefs(forwardedRef);\n    const state = useSegmentedButtonGroupContext();\n\n    const { buttonProps, isSelected } = useToggleButtonGroupItem(\n      { ...props, elementType: 'button' },\n      state,\n      ref,\n    );\n\n    const { interactionsProps, rippleProps } =\n      useInteractionsWithRipple<'button'>({\n        ...buttonProps,\n        isDisabled: props.isDisabled,\n      });\n\n    const Comp = asChild ? Slot : 'button';\n\n    return (\n      <Comp\n        {...mergeProps(\n          props as Props<'button'>,\n          interactionsProps,\n          rippleProps,\n        )}\n        className={cn(\n          segmentedButtonVariants({ isSelected, color }),\n          className,\n        )}\n        ref={ref}\n        data-is-selected={isSelected}\n      >\n        <AnimatePresence mode=\"wait\">\n          {!isSelected && (\n            <motion.span\n              aria-hidden={true}\n              initial={{ width: 0, height: 0, opacity: 0 }}\n              animate={{\n                width: 'var(--spacing-2h)',\n                height: 'var(--spacing-4h)',\n                opacity: 1,\n              }}\n              exit={{ width: 0, height: 0, opacity: 0 }}\n              transition={{\n                duration: materialDuration.asMotion('medium-1'),\n                ease: materialEasing['standard'],\n              }}\n            />\n          )}\n        </AnimatePresence>\n        <AnimatePresence mode=\"wait\">\n          {isSelected && (\n            <motion.span\n              initial={{ width: 0, height: 0, opacity: 0 }}\n              animate={{\n                width: 'var(--spacing-4h)',\n                height: 'var(--spacing-4h)',\n                opacity: 1,\n              }}\n              exit={{ width: 0, height: 0, opacity: 0 }}\n              transition={{\n                duration: materialDuration.asMotion('medium-1'),\n                ease: materialEasing['standard'],\n              }}\n              className={cn(segmentedButtonVariants.icon())}\n            >\n              {checkIcon}\n            </motion.span>\n          )}\n        </AnimatePresence>\n        <span className={cn(segmentedButtonVariants.label())}>{children}</span>\n        <AnimatePresence mode=\"wait\">\n          {!isSelected && (\n            <motion.span\n              aria-hidden={true}\n              initial={{ width: 0, height: 0, opacity: 0 }}\n              animate={{\n                width: 'var(--spacing-2h)',\n                height: 'var(--spacing-4h)',\n                opacity: 1,\n              }}\n              exit={{ width: 0, height: 0, opacity: 0 }}\n              transition={{\n                duration: materialDuration.asMotion('medium-1'),\n                ease: materialEasing['standard'],\n              }}\n            />\n          )}\n        </AnimatePresence>\n      </Comp>\n    );\n  },\n);\nSegmentedButton.displayName = 'SegmentedButton';\n",
      "type": "components"
    },
    {
      "name": "action/segmented-button/segmented-button.types.ts",
      "content": "import type { AriaPropsWithAsChild } from '@/types';\nimport type { VariantProps } from 'class-variance-authority';\nimport type { useToggleButtonGroupItem } from 'react-aria';\nimport type { segmentedButtonVariants } from './segmented-button.variants';\n\ntype AriaToggleButtonGroupItemProps = Parameters<\n  typeof useToggleButtonGroupItem\n>[0];\n\nexport type SegmentedButtonProps = AriaPropsWithAsChild<\n  'button',\n  AriaToggleButtonGroupItemProps\n> &\n  VariantProps<typeof segmentedButtonVariants> & {\n    checkIcon?: React.ReactNode;\n  };\n",
      "type": "components"
    },
    {
      "name": "action/segmented-button/segmented-button.variants.ts",
      "content": "import { cva } from '@/utility';\n\nconst variants = cva(\n  {\n    name: 'segmented-button group/segmented-button',\n    layout: 'relative',\n    flex: 'inline-flex items-center justify-center',\n    transitions: 'transition easing-standard duration-medium-1',\n    background: 'is-disabled:bg-transparent',\n    borders: [\n      'border outline-none border-outline',\n      'is-disabled:border-on-surface/38',\n    ],\n    typography: ['typography-label-large', 'is-disabled:text-on-surface/38'],\n    spacing: 'px-sm',\n    overflow: 'overflow-hidden',\n    states: [\n      'cursor-pointer',\n      'is-disabled:state-transparent',\n      'is-disabled:pointer-events-none',\n      'is-hovered:state-hover',\n      'in-focus-visible:state-focus',\n      'is-pressed:state-press',\n    ],\n    ripple: 'ripple-wrapper:-inset-0.25',\n  },\n  {\n    variants: {\n      color: {\n        primary: {},\n        secondary: {},\n        info: {},\n        success: {},\n        caution: {},\n        critical: {},\n      },\n      isSelected: {\n        true: {},\n        false: {\n          background: 'bg-transparent',\n          typography: 'text-on-surface',\n          states: 'state-on-surface',\n          ripple: 'ripple:bg-on-surface',\n        },\n      },\n    },\n    defaultVariants: {\n      isSelected: false,\n      color: 'primary',\n    },\n    compoundVariants: [\n      {\n        color: 'primary',\n        isSelected: true,\n        className: {\n          background: 'bg-primary-container',\n          typography: 'text-on-primary-container',\n          states: 'state-on-primary-container',\n          ripple: 'ripple:bg-on-primary-container',\n        },\n      },\n      {\n        color: 'secondary',\n        isSelected: true,\n        className: {\n          background: 'bg-secondary-container',\n          typography: 'text-on-secondary-container',\n          states: 'state-on-secondary-container',\n          ripple: 'ripple:bg-on-secondary-container',\n        },\n      },\n      {\n        color: 'info',\n        isSelected: true,\n        className: {\n          background: 'bg-info-container',\n          typography: 'text-on-info-container',\n          states: 'state-on-info-container',\n          ripple: 'ripple:bg-on-info-container',\n        },\n      },\n      {\n        color: 'success',\n        isSelected: true,\n        className: {\n          background: 'bg-success-container',\n          typography: 'text-on-success-container',\n          states: 'state-on-success-container',\n          ripple: 'ripple:bg-on-success-container',\n        },\n      },\n      {\n        color: 'caution',\n        isSelected: true,\n        className: {\n          background: 'bg-caution-container',\n          typography: 'text-on-caution-container',\n          states: 'state-on-caution-container',\n          ripple: 'ripple:bg-on-caution-container',\n        },\n      },\n      {\n        color: 'critical',\n        isSelected: true,\n        className: {\n          background: 'bg-critical-container',\n          typography: 'text-on-critical-container',\n          states: 'state-on-critical-container',\n          ripple: 'ripple:bg-on-critical-container',\n        },\n      },\n    ],\n  },\n);\n\nconst groupVariants = cva(\n  {\n    name: 'segmented-button-group group/segmented-button-group',\n    flex: 'inline-grid auto-cols-fr grid-flow-col',\n    // background: 'bg-secondary-container',\n    other: [\n      '[&>*:first-child]:ml-0 [&>*]:-ml-0.25',\n      '[&>*:first-child]:rounded-l-md [&>*:last-child]:rounded-r-md',\n    ],\n  },\n  {\n    variants: {\n      density: {\n        0: { box: 'h-10' },\n        [-1]: { box: 'h-9' },\n        [-2]: { box: 'h-8' },\n        [-3]: { box: 'h-7' },\n      },\n    },\n    defaultVariants: {\n      density: 0,\n    },\n  },\n);\n\nconst labelVariants = cva({\n  name: 'segmented-button--label group/segmented-button--label',\n  spacing: 'px-2xs',\n  other: '[&>svg]:size-4.5',\n});\n\nconst iconVariants = cva(\n  {\n    name: 'segmented-button--icon group/segmented-button--icon',\n    layout: 'relative inline-block',\n    box: 'size-4.5',\n    overflow: 'overflow-hidden',\n    other: '[&>*]:absolute [&>*]:inset-0 [&>*]:size-full',\n  },\n  {\n    variants: {\n      hiddenOnEmpty: {\n        true: {\n          overflow: 'empty:hidden',\n        },\n        false: {},\n      },\n    },\n    defaultVariants: {\n      hiddenOnEmpty: true,\n    },\n  },\n);\n\nexport const segmentedButtonVariants = Object.assign(variants, {\n  group: groupVariants,\n  label: labelVariants,\n  icon: iconVariants,\n});\n",
      "type": "components"
    },
    {
      "name": "communication/badge/badge.tsx",
      "content": "import { useMergedRefs } from '@/hooks';\nimport { cn } from '@/utility';\nimport { Slot } from '@radix-ui/react-slot';\nimport React from 'react';\nimport type { BadgeProps } from './badge.types';\nimport { badgeVariants } from './badge.variants';\n\nexport const Badge = React.forwardRef<HTMLElement, BadgeProps>(\n  (\n    {\n      size,\n      color,\n      placement,\n      value,\n      maxValue = 999,\n      className,\n      asChild,\n      ...props\n    },\n    forwardedRef,\n  ) => {\n    const ref = useMergedRefs(forwardedRef);\n\n    if (size === 'large' && !value) return null;\n\n    const displayValue = (value || 0) > maxValue ? `${maxValue}+` : value;\n\n    const Comp = asChild ? Slot : 'section';\n\n    return (\n      <Comp\n        {...props}\n        ref={ref}\n        className={cn(badgeVariants({ size, color, placement }), className)}\n        data-one-digit={(value || 0).toString().length === 1}\n      >\n        {size === 'large' && displayValue}\n      </Comp>\n    );\n  },\n);\nBadge.displayName = 'Badge';\n",
      "type": "components"
    },
    {
      "name": "communication/badge/badge.types.ts",
      "content": "import type { PropsWithAsChild } from '@/types';\nimport type { VariantProps } from 'class-variance-authority';\nimport type { badgeVariants } from './badge.variants';\n\nexport type BadgeProps = PropsWithAsChild<'section', 'children'> &\n  VariantProps<typeof badgeVariants> & {\n    value?: number;\n    maxValue?: number;\n  };\n",
      "type": "components"
    },
    {
      "name": "communication/badge/badge.variants.ts",
      "content": "import { cva } from '@/utility';\n\nconst variants = cva(\n  {\n    name: 'badge group/badge',\n    box: 'rounded-full',\n    layout: 'z-10',\n    flex: 'inline-flex items-center justify-center',\n    typography: 'typography-label-small',\n    other: 'pointer-events-none select-none',\n  },\n  {\n    variants: {\n      size: {\n        small: {\n          box: 'size-1.5',\n        },\n        large: {\n          box: [\n            'h-4',\n            'data-[one-digit=true]:w-4',\n            'data-[one-digit=false]:px-2xs',\n          ],\n        },\n      },\n      color: {\n        primary: {\n          background: 'bg-primary',\n          typography: 'text-on-primary',\n        },\n        'primary-container': {\n          background: 'bg-primary-container',\n          typography: 'text-on-primary-container',\n        },\n        secondary: {\n          background: 'bg-secondary',\n          typography: 'text-on-secondary',\n        },\n        'secondary-container': {\n          background: 'bg-secondary-container',\n          typography: 'text-on-secondary-container',\n        },\n        info: {\n          background: 'bg-info',\n          typography: 'text-on-info',\n        },\n        'info-container': {\n          background: 'bg-info-container',\n          typography: 'text-on-info-container',\n        },\n        success: {\n          background: 'bg-success',\n          typography: 'text-on-success',\n        },\n        'success-container': {\n          background: 'bg-success-container',\n          typography: 'text-on-success-container',\n        },\n        caution: {\n          background: 'bg-caution',\n          typography: 'text-on-caution',\n        },\n        'caution-container': {\n          background: 'bg-caution-container',\n          typography: 'text-on-caution-container',\n        },\n        critical: {\n          background: 'bg-critical',\n          typography: 'text-on-critical',\n        },\n        'critical-container': {\n          background: 'bg-critical-container',\n          typography: 'text-on-critical-container',\n        },\n      },\n      placement: {\n        default: {},\n        icon: {\n          layout: 'absolute',\n          transforms: '-translate-y-full translate-x-full',\n        },\n      },\n    },\n    defaultVariants: {\n      size: 'small',\n      color: 'primary',\n    },\n    compoundVariants: [\n      {\n        size: 'small',\n        placement: 'icon',\n        className: {\n          spacing: 'top-1.5 right-1.5',\n        },\n      },\n      {\n        size: 'large',\n        placement: 'icon',\n        className: {\n          spacing: 'top-3.5 right-3',\n        },\n      },\n    ],\n  },\n);\n\nexport const badgeVariants = Object.assign(variants, {});\n",
      "type": "components"
    },
    {
      "name": "communication/badge/index.ts",
      "content": "export * from './badge';\nexport * from './badge.types';\nexport * from './badge.variants';\n",
      "type": "components"
    },
    {
      "name": "communication/index.ts",
      "content": "export * from './badge';\nexport * from './tooltip';\n",
      "type": "components"
    },
    {
      "name": "communication/tooltip/compound/index.ts",
      "content": "export * from './tooltip-actions';\nexport * from './tooltip-content';\nexport * from './tooltip-subhead';\nexport * from './tooltip-text';\nexport * from './tooltip-trigger';\n",
      "type": "components"
    },
    {
      "name": "communication/tooltip/compound/tooltip-actions.tsx",
      "content": "import React from 'react';\nimport { useTooltipSetContext } from '../context';\n\nexport const TooltipActions: React.FC<React.PropsWithChildren> = ({\n  children,\n}) => {\n  const setState = useTooltipSetContext();\n\n  React.useEffect(() => {\n    setState((prev) => ({\n      ...prev,\n      actions: children,\n    }));\n\n    return () => {\n      setState((prev) => ({ ...prev, actions: null }));\n    };\n  }, [children, setState]);\n\n  return null;\n};\n",
      "type": "components"
    },
    {
      "name": "communication/tooltip/compound/tooltip-content.tsx",
      "content": "import { materialDuration, materialEasing } from '@/config';\nimport type { Props } from '@/types';\nimport { cn, mergeProps, throttle } from '@/utility';\nimport type { VariantProps } from 'class-variance-authority';\nimport { AnimatePresence, motion } from 'motion/react';\nimport React from 'react';\nimport { useTooltip } from 'react-aria';\nimport { useTooltipContext } from '../context';\nimport { tooltipVariants } from '../tooltip.variants';\n\nexport type TooltipContentProps = Props<'section'> &\n  VariantProps<typeof tooltipVariants>;\n\nconst calculatePosition = (\n  bounding: DOMRect,\n  position: NonNullable<TooltipContentProps['position']> = 'top',\n): { x: number; y: number } => {\n  let x = -9999;\n  let y = -9999;\n  if (position.includes('left')) {\n    x = bounding.left;\n  } else if (position.includes('right')) {\n    x = bounding.left + bounding.width;\n  } else {\n    x = bounding.left + bounding.width / 2;\n  }\n  if (position.includes('top')) {\n    y = bounding.top;\n  } else if (position.includes('bottom')) {\n    y = bounding.top + bounding.height;\n  } else {\n    y = bounding.top + bounding.height / 2;\n  }\n\n  return { x, y };\n};\n\nconst calculateMotionPosition = (\n  position: NonNullable<TooltipContentProps['position']> = 'top',\n): { x: string; y: string } => {\n  let x = '-9999px';\n  let y = '-9999px';\n  if (position.includes('left')) {\n    x = '-100%';\n  } else if (position.includes('right')) {\n    x = '0%';\n  } else {\n    x = '-50%';\n  }\n  if (position.includes('top')) {\n    y = '-100%';\n  } else if (position.includes('bottom')) {\n    y = '0%';\n  } else {\n    y = '-50%';\n  }\n  return { x, y };\n};\n\nconst calculateMotionStartEndPosition = (\n  position: NonNullable<TooltipContentProps['position']> = 'top',\n): { x: string; y: string } => {\n  const values = calculateMotionPosition(position);\n  if (position.includes('left')) {\n    values.x = `calc(${values.x} + 4px)`;\n  } else if (position.includes('right')) {\n    values.x = `calc(${values.x} - 4px)`;\n  }\n  if (position.includes('top')) {\n    values.y = `calc(${values.y} + 4px)`;\n  } else if (position.includes('bottom')) {\n    values.y = `calc(${values.y} - 4px)`;\n  }\n  return values;\n};\n\nexport const TooltipContent: React.FC<TooltipContentProps> = ({\n  variant,\n  position,\n  className,\n  children,\n  ...props\n}) => {\n  const [\n    {\n      trigger,\n      text,\n      subhead,\n      actions,\n      state,\n      tooltipProps: ariaTooltipProps,\n      triggerTooltipProps,\n    },\n  ] = useTooltipContext();\n\n  const { tooltipProps } = useTooltip(\n    mergeProps(\n      props as Props<'section'>,\n      triggerTooltipProps,\n      ariaTooltipProps,\n    ),\n    state,\n  );\n\n  const [absolutePosition, setAbsolutePosition] = React.useState({\n    x: 0,\n    y: 0,\n  });\n\n  React.useEffect(() => {\n    if (!trigger) {\n      setAbsolutePosition({ x: -9999, y: -9999 });\n      return () => {};\n    }\n\n    const recalculateThrottled = throttle(() => {\n      if (!trigger) {\n        setAbsolutePosition({ x: -9999, y: -9999 });\n        return;\n      }\n      setAbsolutePosition(\n        calculatePosition(trigger.getBoundingClientRect(), position ?? 'top'),\n      );\n    }, 50);\n\n    recalculateThrottled();\n\n    const abortController = new AbortController();\n    window.addEventListener('scroll', recalculateThrottled, {\n      signal: abortController.signal,\n    });\n    window.addEventListener('resize', recalculateThrottled, {\n      signal: abortController.signal,\n    });\n\n    return () => {\n      abortController.abort();\n    };\n  }, [trigger, position]);\n\n  return (\n    <>\n      {children}\n      <AnimatePresence mode=\"wait\">\n        {state?.isOpen && (\n          <motion.section\n            {...(tooltipProps as Record<string, unknown>)}\n            initial={{\n              opacity: 0,\n              top: absolutePosition.y,\n              left: absolutePosition.x,\n              ...calculateMotionStartEndPosition(position ?? 'top'),\n            }}\n            animate={{\n              opacity: 1,\n              top: absolutePosition.y,\n              left: absolutePosition.x,\n              ...calculateMotionPosition(position ?? 'top'),\n            }}\n            exit={{\n              opacity: 0,\n              top: absolutePosition.y,\n              left: absolutePosition.x,\n              ...calculateMotionStartEndPosition(position ?? 'top'),\n            }}\n            transition={{\n              duration: materialDuration.asMotion('medium-1'),\n              ease: materialEasing['standard'],\n            }}\n            className={cn(\n              tooltipVariants.wrapper({ variant, position }),\n              className,\n            )}\n          >\n            <section className={cn(tooltipVariants({ variant, position }))}>\n              {variant === 'rich' && subhead && (\n                <p className={cn(tooltipVariants.subhead())}>{subhead}</p>\n              )}\n              <p className={cn(tooltipVariants.text({ variant }))}>{text}</p>\n              {variant === 'rich' && actions && (\n                <p className={cn(tooltipVariants.actions())}>{actions}</p>\n              )}\n            </section>\n          </motion.section>\n        )}\n      </AnimatePresence>\n    </>\n  );\n};\n",
      "type": "components"
    },
    {
      "name": "communication/tooltip/compound/tooltip-subhead.tsx",
      "content": "import React from 'react';\nimport { useTooltipSetContext } from '../context';\n\nexport const TooltipSubhead: React.FC<React.PropsWithChildren> = ({\n  children,\n}) => {\n  const setState = useTooltipSetContext();\n\n  React.useEffect(() => {\n    setState((prev) => ({\n      ...prev,\n      subhead: children,\n    }));\n\n    return () => {\n      setState((prev) => ({ ...prev, subhead: null }));\n    };\n  }, [children, setState]);\n\n  return null;\n};\n",
      "type": "components"
    },
    {
      "name": "communication/tooltip/compound/tooltip-text.tsx",
      "content": "import React from 'react';\nimport { useTooltipSetContext } from '../context';\n\nexport const TooltipText: React.FC<React.PropsWithChildren> = ({\n  children,\n}) => {\n  const setState = useTooltipSetContext();\n\n  React.useEffect(() => {\n    setState((prev) => ({\n      ...prev,\n      text: children,\n    }));\n\n    return () => {\n      setState((prev) => ({ ...prev, text: null }));\n    };\n  }, [children, setState]);\n\n  return null;\n};\n",
      "type": "components"
    },
    {
      "name": "communication/tooltip/compound/tooltip-trigger.tsx",
      "content": "import { useMergedRefs } from '@/hooks';\nimport type { AriaProps } from '@/types';\nimport { Slot, Slottable } from '@radix-ui/react-slot';\nimport React from 'react';\nimport type { TooltipTriggerProps as AriaTooltipTriggerProps } from 'react-aria';\nimport { useTooltipTrigger } from 'react-aria';\nimport { useTooltipTriggerState } from 'react-stately';\nimport { useTooltipContext, useTooltipSetContext } from '../context';\n\nexport type TooltipTriggerProps = AriaProps<'button', AriaTooltipTriggerProps>;\n\nexport const TooltipTrigger = React.forwardRef<\n  HTMLButtonElement,\n  TooltipTriggerProps\n>(({ children, delay = 0, ...props }, forwardedRef) => {\n  const ref = useMergedRefs(forwardedRef);\n  const [isOpen] = useTooltipContext((s) => s.tooltipProps?.isOpen);\n  const setState = useTooltipSetContext();\n\n  const mergedProps: AriaTooltipTriggerProps = {\n    ...props,\n    delay,\n    isOpen: props.isOpen || isOpen,\n  };\n\n  const state = useTooltipTriggerState(mergedProps);\n  const { triggerProps, tooltipProps } = useTooltipTrigger(\n    mergedProps,\n    state,\n    ref,\n  );\n\n  React.useEffect(() => {\n    setState((p) => ({\n      ...p,\n      state,\n      triggerTooltipProps: tooltipProps,\n      trigger: ref.current,\n    }));\n\n    return () => {\n      setState((prev) => ({\n        ...prev,\n        state: undefined,\n        triggerTooltipProps: undefined,\n        trigger: null,\n      }));\n    };\n  }, [ref, setState, state, tooltipProps]);\n\n  const Comp = Slot;\n\n  return (\n    <Comp {...triggerProps} ref={ref}>\n      <Slottable>{children}</Slottable>\n    </Comp>\n  );\n});\nTooltipTrigger.displayName = 'TooltipTrigger';\n",
      "type": "components"
    },
    {
      "name": "communication/tooltip/context/index.ts",
      "content": "export * from './tooltip.context';\n",
      "type": "components"
    },
    {
      "name": "communication/tooltip/context/tooltip.context.tsx",
      "content": "import { createContext } from '@/utility';\nimport type React from 'react';\nimport type { AriaTooltipProps } from 'react-aria';\nimport type { TooltipTriggerState } from 'react-stately';\n\nexport type TooltipContextState = {\n  subhead?: React.ReactNode;\n  text?: React.ReactNode;\n  actions?: React.ReactNode;\n  state?: TooltipTriggerState;\n  tooltipProps?: AriaTooltipProps;\n  trigger?: HTMLElement | null;\n  triggerTooltipProps?: React.DOMAttributes<HTMLElement>;\n};\n\nconst { useStore, useSetStore, Provider } = createContext<TooltipContextState>(\n  {},\n  {\n    storeName: 'Tooltip',\n  },\n);\n\nexport const TooltipContextProvider = Provider;\n\nexport const useTooltipContext = useStore;\n\nexport const useTooltipSetContext = useSetStore;\n",
      "type": "components"
    },
    {
      "name": "communication/tooltip/index.ts",
      "content": "export * from './compound';\nexport * from './tooltip';\nexport * from './tooltip.types';\nexport * from './tooltip.variants';\n",
      "type": "components"
    },
    {
      "name": "communication/tooltip/tooltip.tsx",
      "content": "import { withProvider } from '@/utility';\nimport React from 'react';\nimport { TooltipContextProvider, useTooltipSetContext } from './context';\nimport type { TooltipProps } from './tooltip.types';\n\nconst TooltipImpl: React.FC<TooltipProps> = ({ children, ...tooltipProps }) => {\n  const setState = useTooltipSetContext();\n\n  React.useEffect(() => {\n    setState((p) => ({\n      ...p,\n      tooltipProps,\n    }));\n\n    return () => setState((p) => ({ ...p, tooltipProps: undefined }));\n  }, [setState, tooltipProps]);\n\n  return <>{children}</>;\n};\n\nexport const Tooltip = withProvider(TooltipContextProvider, TooltipImpl);\n",
      "type": "components"
    },
    {
      "name": "communication/tooltip/tooltip.types.ts",
      "content": "import type { AriaTooltipProps } from 'react-aria';\n\nexport type TooltipProps = React.PropsWithChildren<AriaTooltipProps>;\n",
      "type": "components"
    },
    {
      "name": "communication/tooltip/tooltip.variants.tsx",
      "content": "import { cva } from '@/utility';\n\nconst variants = cva(\n  {\n    name: 'tooltip group/tooltip',\n    overflow: 'overflow-hidden',\n    layout: 'relative',\n    box: 'h-full w-max max-w-full',\n  },\n  {\n    variants: {\n      position: {\n        'top-left': {},\n        top: {},\n        'top-right': {},\n        right: {},\n        'bottom-right': {},\n        bottom: {},\n        'bottom-left': {},\n        left: {},\n      },\n      variant: {\n        plain: {\n          background: 'bg-inverse-surface',\n          flex: 'inline-flex items-center',\n          spacing: 'px-xs py-2xs',\n          borders: 'rounded-3xs',\n          other: 'select-none',\n        },\n        rich: {\n          background: 'bg-surface-container',\n          flex: 'inline-flex flex-col',\n          spacing: 'px-md pb-xs pt-sm',\n          effects: 'elevation-2',\n          borders: 'rounded-sm',\n        },\n      },\n    },\n    defaultVariants: {\n      variant: 'plain',\n      position: 'top',\n    },\n  },\n);\n\nconst wrapperVariants = cva(\n  {\n    name: 'tooltip--wrapper',\n    layout: 'fixed z-20 h-max',\n  },\n  {\n    variants: {\n      position: {\n        'top-left': {},\n        top: {},\n        'top-right': {},\n        right: {},\n        'bottom-right': {},\n        bottom: {},\n        'bottom-left': {},\n        left: {},\n      },\n      variant: {\n        plain: {\n          box: 'max-w-48',\n          spacing: 'p-2xs',\n        },\n        rich: {\n          box: 'max-w-80',\n          spacing: 'p-xs',\n        },\n      },\n    },\n    defaultVariants: {\n      position: 'top',\n      variant: 'plain',\n    },\n  },\n);\n\nconst subheadVariants = cva({\n  name: 'tooltip--subhead',\n  typography: 'text-balance typography-title-small text-on-surface-variant',\n  spacing: 'mb-2xs',\n});\n\nconst textVariants = cva(\n  {\n    name: 'tooltip--text',\n  },\n  {\n    variants: {\n      variant: {\n        plain: {\n          typography: 'typography-body-small text-inverse-on-surface',\n        },\n        rich: {\n          typography: 'typography-body-medium text-on-surface-variant',\n        },\n      },\n    },\n    defaultVariants: {\n      variant: 'plain',\n    },\n  },\n);\n\nconst actionsVariants = cva({\n  name: 'tooltip--actions',\n  box: 'items-centeer inline-flex gap-xs',\n  spacing: 'mt-sm',\n});\n\nexport const tooltipVariants = Object.assign(variants, {\n  wrapper: wrapperVariants,\n  text: textVariants,\n  subhead: subheadVariants,\n  actions: actionsVariants,\n});\n",
      "type": "components"
    },
    {
      "name": "containment/carousel/carousel.tsx",
      "content": "import { useMergedRefs } from '@/hooks';\nimport { cn, withProvider } from '@/utility';\nimport useEmblaCarousel from 'embla-carousel-react';\nimport React from 'react';\nimport type { CarouselProps } from './carousel.types';\nimport { carouselVariants } from './carousel.variants';\nimport { CarouselContextProvider, useCarouselContext } from './context';\n\nconst CarouselImpl = React.forwardRef<HTMLElement, CarouselProps>(\n  ({ after, apiRef, options, className, children, ...props }, forwardedRef) => {\n    const ref = useMergedRefs(forwardedRef);\n    const [emblaRef, emblaApi] = useEmblaCarousel(options, []);\n    const [, setState] = useCarouselContext();\n\n    React.useEffect(() => {\n      if (!apiRef || typeof apiRef !== 'function') return () => {};\n      apiRef(emblaApi ?? null);\n      return () => apiRef(null);\n    }, [apiRef, emblaApi]);\n\n    React.useEffect(() => {\n      setState((prev) => ({\n        ...prev,\n        emblaApi,\n        emblaRef,\n      }));\n    }, [emblaApi, emblaRef, setState]);\n\n    return (\n      <section\n        {...props}\n        ref={ref}\n        className={cn(carouselVariants(), className)}\n      >\n        <section className={cn(carouselVariants.container())}>\n          {children}\n        </section>\n        {after}\n      </section>\n    );\n  },\n);\nCarouselImpl.displayName = 'Carousel';\n\nexport const Carousel = withProvider(CarouselContextProvider, CarouselImpl);\n",
      "type": "components"
    },
    {
      "name": "containment/carousel/carousel.types.ts",
      "content": "import type { Props } from '@/types';\nimport type { VariantProps } from 'class-variance-authority';\nimport type { EmblaCarouselType, EmblaOptionsType } from 'embla-carousel';\nimport type { carouselVariants } from './carousel.variants';\n\nexport type CarouselProps = Props<'section'> &\n  VariantProps<typeof carouselVariants> & {\n    apiRef?: React.Ref<EmblaCarouselType>;\n    options?: EmblaOptionsType;\n    after?: React.ReactNode;\n  };\n",
      "type": "components"
    },
    {
      "name": "containment/carousel/carousel.variants.ts",
      "content": "import { cva } from '@/utility';\n\nconst variants = cva({\n  name: 'carousel group/carousel',\n  box: 'grid gap-2xs',\n});\n\nconst containerVariants = cva({\n  name: 'carousel--container',\n  box: 'grid grid-cols-[max-content_1fr_max-content]',\n  spacing: 'gap-2xs',\n});\n\nconst arrowButtonVariants = cva({\n  name: 'carousel--arrow-button',\n  box: 'h-auto self-stretch',\n});\n\nconst viewVariants = cva({\n  name: 'carousel--view',\n  flex: 'flex-1',\n  overflow: 'overflow-hidden',\n  spacing: 'p-3xs',\n  box: 'col-start-2',\n});\n\nconst viewContainerVariants = cva({\n  name: 'carousel--view-container',\n  flex: 'flex',\n  spacing: '-ml-md',\n  other: 'touch-pan-y touch-pinch-zoom',\n});\n\nconst slideVariants = cva({\n  name: 'carousel--slide',\n  box: 'min-w-0',\n  flex: 'shrink-0 grow-0',\n  transforms: 'translate-x-0 translate-y-0',\n  spacing: 'pl-md',\n});\n\nconst slideContentVariants = cva({\n  name: 'carousel--content',\n  other: 'select-none',\n});\n\nconst circleContainerVariants = cva({\n  name: 'carousel--circle-container',\n  flex: 'flex items-center justify-center',\n  spacing: 'gap-3xs',\n});\n\nconst circleVariants = cva(\n  {\n    name: 'carousel--circle',\n    flex: 'flex items-center justify-center',\n    spacing: 'size-6',\n    transitions: 'transition easing-standard duration-medium-1',\n    other: '[&>*]:size-4 cursor-pointer',\n  },\n  {\n    variants: {\n      isSelected: {\n        true: {\n          typography: 'text-outline',\n        },\n        false: {\n          typography: 'text-outline-variant',\n        },\n      },\n    },\n    defaultVariants: {\n      isSelected: false,\n    },\n  },\n);\n\nexport const carouselVariants = Object.assign(variants, {\n  container: containerVariants,\n  arrowButton: arrowButtonVariants,\n  view: viewVariants,\n  viewContainer: viewContainerVariants,\n  slide: slideVariants,\n  slideContent: slideContentVariants,\n  circleContainer: circleContainerVariants,\n  cirlce: circleVariants,\n});\n",
      "type": "components"
    },
    {
      "name": "containment/carousel/compound/carousel-dots.tsx",
      "content": "import { cn } from '@/utility';\nimport { IconCircleFilled } from '@tabler/icons-react';\nimport { carouselVariants } from '../carousel.variants';\nimport { useCarouselContext } from '../context';\nimport { useDotButton } from '../internal';\n\nexport const CarouselDots: React.FC<React.PropsWithChildren> = ({\n  children,\n}) => {\n  const [{ emblaApi }] = useCarouselContext();\n  const { selectedIndex, scrollSnaps, onDotButtonClick } =\n    useDotButton(emblaApi);\n\n  return (\n    <div className={cn(carouselVariants.circleContainer())}>\n      {scrollSnaps.map((_, index) => (\n        <button\n          key={index}\n          onClick={() => onDotButtonClick(index)}\n          className={cn(\n            carouselVariants.cirlce({\n              isSelected: selectedIndex === index,\n            }),\n          )}\n        >\n          {children ?? <IconCircleFilled />}\n        </button>\n      ))}\n    </div>\n  );\n};\n",
      "type": "components"
    },
    {
      "name": "containment/carousel/compound/carousel-next-button.tsx",
      "content": "import type { IconButtonProps } from '@/components/action';\nimport { IconButton } from '@/components/action';\nimport { cn } from '@/utility';\nimport { IconChevronRight } from '@tabler/icons-react';\nimport { carouselVariants } from '../carousel.variants';\nimport { useCarouselContext } from '../context';\nimport { useNextButton } from '../internal';\n\nexport const CarouselNextButton: React.FC<IconButtonProps> = ({\n  className,\n  children,\n  ...props\n}) => {\n  const [{ emblaApi }] = useCarouselContext();\n  const { isDisabled, onPress } = useNextButton(emblaApi);\n\n  return (\n    <IconButton\n      color=\"secondary\"\n      {...props}\n      isDisabled={isDisabled}\n      onPress={onPress}\n      className={cn(carouselVariants.arrowButton(), className)}\n    >\n      {children ?? <IconChevronRight />}\n    </IconButton>\n  );\n};\n",
      "type": "components"
    },
    {
      "name": "containment/carousel/compound/carousel-prev-button.tsx",
      "content": "import type { IconButtonProps } from '@/components/action';\nimport { IconButton } from '@/components/action';\nimport { cn } from '@/utility';\nimport { IconChevronLeft } from '@tabler/icons-react';\nimport { carouselVariants } from '../carousel.variants';\nimport { useCarouselContext } from '../context';\nimport { usePrevButton } from '../internal';\n\nexport const CarouselPrevButton: React.FC<IconButtonProps> = ({\n  className,\n  children,\n  ...props\n}) => {\n  const [{ emblaApi }] = useCarouselContext();\n  const { isDisabled, onPress } = usePrevButton(emblaApi);\n\n  return (\n    <IconButton\n      color=\"secondary\"\n      {...props}\n      isDisabled={isDisabled}\n      onPress={onPress}\n      className={cn(carouselVariants.arrowButton(), className)}\n    >\n      {children ?? <IconChevronLeft />}\n    </IconButton>\n  );\n};\n",
      "type": "components"
    },
    {
      "name": "containment/carousel/compound/carousel-slide-content.tsx",
      "content": "import { useMergedRefs } from '@/hooks';\nimport type { PropsWithAsChild } from '@/types';\nimport { cn } from '@/utility';\nimport { Slot } from '@radix-ui/react-slot';\nimport React from 'react';\nimport { carouselVariants } from '../carousel.variants';\n\nexport const CarouselSlideContent = React.forwardRef<\n  HTMLElement,\n  PropsWithAsChild<'section'>\n>(({ asChild, className, children, ...props }, forwardedRef) => {\n  const ref = useMergedRefs(forwardedRef);\n\n  const Comp = asChild ? Slot : 'section';\n\n  return (\n    <Comp\n      {...props}\n      ref={ref}\n      className={cn(carouselVariants.slideContent(), className)}\n    >\n      {children}\n    </Comp>\n  );\n});\nCarouselSlideContent.displayName = 'CarouselSlideContent';\n",
      "type": "components"
    },
    {
      "name": "containment/carousel/compound/carousel-slide.tsx",
      "content": "import { useMergedRefs } from '@/hooks';\nimport type { PropsWithAsChild } from '@/types';\nimport { cn } from '@/utility';\nimport { Slot } from '@radix-ui/react-slot';\nimport React from 'react';\nimport { carouselVariants } from '../carousel.variants';\n\nexport const CarouselSlide = React.forwardRef<\n  HTMLElement,\n  PropsWithAsChild<'article'>\n>(({ asChild, className, children, ...props }, forwardedRef) => {\n  const ref = useMergedRefs(forwardedRef);\n\n  const Comp = asChild ? Slot : 'article';\n\n  return (\n    <Comp\n      {...props}\n      ref={ref}\n      className={cn(carouselVariants.slide(), className)}\n    >\n      {children}\n    </Comp>\n  );\n});\nCarouselSlide.displayName = 'CarouselSlide';\n",
      "type": "components"
    },
    {
      "name": "containment/carousel/compound/carousel-view.tsx",
      "content": "import { useMergedRefs } from '@/hooks';\nimport type { PropsWithAsChild } from '@/types';\nimport { cn } from '@/utility';\nimport { Slot } from '@radix-ui/react-slot';\nimport React from 'react';\nimport { carouselVariants } from '../carousel.variants';\nimport { useCarouselContext } from '../context';\n\nexport type CarouselViewProps = PropsWithAsChild<'section'> & {\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n};\n\nexport const CarouselView = React.forwardRef<HTMLElement, CarouselViewProps>(\n  ({ left, right, className, asChild, children, ...props }, forwardedRef) => {\n    const [{ emblaRef }] = useCarouselContext();\n    const ref = useMergedRefs(forwardedRef, emblaRef);\n\n    const Comp = asChild ? Slot : 'section';\n\n    return (\n      <>\n        {left}\n        <Comp\n          {...props}\n          ref={ref}\n          className={cn(carouselVariants.view(), className)}\n        >\n          <div className={cn(carouselVariants.viewContainer())}>\n            {children}\n            {/* {[0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map((index) => (\n              <div\n                key={index}\n                className={cn(carouselVariants.slide(), 'basis-1/4')}\n              >\n                <div\n                  className={cn(\n                    carouselVariants.slideContent(),\n                    'flex h-96 items-center justify-center rounded-lg border typography-display-large border-outline',\n                  )}\n                >\n                  {index + 1}\n                </div>\n              </div>\n            ))} */}\n          </div>\n        </Comp>\n        {right}\n      </>\n    );\n  },\n);\nCarouselView.displayName = 'CarouselView';\n",
      "type": "components"
    },
    {
      "name": "containment/carousel/compound/index.ts",
      "content": "export * from './carousel-dots';\nexport * from './carousel-next-button';\nexport * from './carousel-prev-button';\nexport * from './carousel-slide';\nexport * from './carousel-slide-content';\nexport * from './carousel-view';\n",
      "type": "components"
    },
    {
      "name": "containment/carousel/context/carousel.context.tsx",
      "content": "import type { ContextState } from '@/types';\nimport type { EmblaCarouselType } from 'embla-carousel';\nimport type { EmblaViewportRefType } from 'embla-carousel-react';\nimport React from 'react';\n\nexport type CarouselContextState = ContextState<{\n  emblaApi?: EmblaCarouselType;\n  emblaRef?: EmblaViewportRefType;\n}>;\n\nconst CarouselContext = React.createContext<CarouselContextState | null>(null);\n\nexport const useCarouselContext = () => {\n  const value = React.useContext(CarouselContext);\n  if (!value)\n    throw new Error(\n      'This component must be used within a <Carousel> component',\n    );\n  return value;\n};\n\nexport const CarouselContextProvider: React.FC<React.PropsWithChildren> = ({\n  children,\n}) => {\n  const state = React.useState<CarouselContextState[0]>({});\n\n  return (\n    <CarouselContext.Provider value={state}>\n      {children}\n    </CarouselContext.Provider>\n  );\n};\n",
      "type": "components"
    },
    {
      "name": "containment/carousel/context/index.ts",
      "content": "export * from './carousel.context';\n",
      "type": "components"
    },
    {
      "name": "containment/carousel/index.ts",
      "content": "export * from './carousel';\nexport * from './carousel.types';\nexport * from './carousel.variants';\nexport * from './compound';\n",
      "type": "components"
    },
    {
      "name": "containment/carousel/internal/index.ts",
      "content": "export * from './use-dot-button';\nexport * from './use-next-button';\nexport * from './use-prev-button';\n",
      "type": "components"
    },
    {
      "name": "containment/carousel/internal/use-dot-button.tsx",
      "content": "import type { EmblaCarouselType } from 'embla-carousel';\nimport React from 'react';\n\ntype UseDotButtonType = {\n  selectedIndex: number;\n  scrollSnaps: number[];\n  onDotButtonClick: (index: number) => void;\n};\n\nexport const useDotButton = (\n  emblaApi: EmblaCarouselType | undefined,\n  onButtonClick?: (emblaApi: EmblaCarouselType) => void,\n): UseDotButtonType => {\n  const [selectedIndex, setSelectedIndex] = React.useState(0);\n  const [scrollSnaps, setScrollSnaps] = React.useState<number[]>([]);\n\n  const onDotButtonClick = React.useCallback(\n    (index: number) => {\n      if (!emblaApi) return;\n      emblaApi.scrollTo(index);\n      if (onButtonClick) onButtonClick(emblaApi);\n    },\n    [emblaApi, onButtonClick],\n  );\n\n  const onInit = React.useCallback((api: EmblaCarouselType) => {\n    setScrollSnaps(api.scrollSnapList());\n  }, []);\n\n  const onSelect = React.useCallback((api: EmblaCarouselType) => {\n    setSelectedIndex(api.selectedScrollSnap());\n  }, []);\n\n  React.useEffect(() => {\n    if (!emblaApi) return;\n\n    onInit(emblaApi);\n    onSelect(emblaApi);\n    emblaApi.on('reInit', onInit).on('reInit', onSelect).on('select', onSelect);\n  }, [emblaApi, onInit, onSelect]);\n\n  return {\n    selectedIndex,\n    scrollSnaps,\n    onDotButtonClick,\n  };\n};\n",
      "type": "components"
    },
    {
      "name": "containment/carousel/internal/use-next-button.tsx",
      "content": "import type { EmblaCarouselType } from 'embla-carousel';\nimport React from 'react';\n\ntype UseNextButtonType = {\n  isDisabled: boolean;\n  onPress: () => void;\n};\n\nexport const useNextButton = (\n  emblaApi: EmblaCarouselType | undefined,\n  onButtonClick?: (emblaApi: EmblaCarouselType) => void,\n): UseNextButtonType => {\n  const [isDisabled, setIsDisabled] = React.useState(true);\n\n  const onPress = React.useCallback(() => {\n    if (!emblaApi) return;\n    emblaApi.scrollNext();\n    if (onButtonClick) onButtonClick(emblaApi);\n  }, [emblaApi, onButtonClick]);\n\n  const onSelect = React.useCallback((api: EmblaCarouselType) => {\n    setIsDisabled(!api.canScrollNext());\n  }, []);\n\n  React.useEffect(() => {\n    if (!emblaApi) return;\n\n    onSelect(emblaApi);\n    emblaApi.on('reInit', onSelect).on('select', onSelect);\n  }, [emblaApi, onSelect]);\n\n  return {\n    isDisabled,\n    onPress,\n  };\n};\n",
      "type": "components"
    },
    {
      "name": "containment/carousel/internal/use-prev-button.tsx",
      "content": "import type { EmblaCarouselType } from 'embla-carousel';\nimport React from 'react';\n\ntype UsePrevButtonType = {\n  isDisabled: boolean;\n  onPress: () => void;\n};\n\nexport const usePrevButton = (\n  emblaApi: EmblaCarouselType | undefined,\n  onButtonClick?: (emblaApi: EmblaCarouselType) => void,\n): UsePrevButtonType => {\n  const [isDisabled, setIsDisabled] = React.useState(true);\n\n  const onPress = React.useCallback(() => {\n    if (!emblaApi) return;\n    emblaApi.scrollPrev();\n    if (onButtonClick) onButtonClick(emblaApi);\n  }, [emblaApi, onButtonClick]);\n\n  const onSelect = React.useCallback((api: EmblaCarouselType) => {\n    setIsDisabled(!api.canScrollPrev());\n  }, []);\n\n  React.useEffect(() => {\n    if (!emblaApi) return;\n\n    onSelect(emblaApi);\n    emblaApi.on('reInit', onSelect).on('select', onSelect);\n  }, [emblaApi, onSelect]);\n\n  return {\n    isDisabled,\n    onPress,\n  };\n};\n",
      "type": "components"
    },
    {
      "name": "containment/container/compound/conteiner-content/container-content.tsx",
      "content": "import { useMergedRefs } from '@/hooks';\nimport { cn } from '@/utility';\nimport { Slot } from '@radix-ui/react-slot';\nimport React from 'react';\nimport { containerVariants } from '../../container.variants';\nimport type { ContainerContentProps } from './container-content.types';\n\nexport const ContainerContent = React.forwardRef<\n  HTMLElement,\n  ContainerContentProps\n>(\n  (\n    { variant, padding, fluid, className, asChild, children, ...props },\n    forwardedRef,\n  ) => {\n    const ref = useMergedRefs(forwardedRef);\n\n    const Comp = asChild ? Slot : 'section';\n\n    return (\n      <Comp\n        {...props}\n        className={cn(\n          containerVariants.content({ variant, padding, fluid }),\n          className,\n        )}\n        ref={ref}\n      >\n        {children}\n      </Comp>\n    );\n  },\n);\nContainerContent.displayName = 'ContainerContent';\n",
      "type": "components"
    },
    {
      "name": "containment/container/compound/conteiner-content/container-content.types.ts",
      "content": "import type { PropsWithAsChild } from '@/types';\nimport type { VariantProps } from 'class-variance-authority';\nimport type { containerVariants } from '../../container.variants';\n\nexport type ContainerContentProps = PropsWithAsChild<'section'> &\n  VariantProps<typeof containerVariants.content>;\n",
      "type": "components"
    },
    {
      "name": "containment/container/compound/conteiner-content/index.ts",
      "content": "export * from './container-content';\nexport * from './container-content.types';\n",
      "type": "components"
    },
    {
      "name": "containment/container/compound/index.ts",
      "content": "export * from './conteiner-content';\n",
      "type": "components"
    },
    {
      "name": "containment/container/container.tsx",
      "content": "import { useMergedRefs } from '@/hooks';\nimport { cn } from '@/utility';\nimport { Slot } from '@radix-ui/react-slot';\nimport React from 'react';\nimport type { ContainerProps } from './container.types';\nimport { containerVariants } from './container.variants';\n\nexport const Container = React.forwardRef<HTMLElement, ContainerProps>(\n  ({ color, className, asChild, children, ...props }, forwardedRef) => {\n    const ref = useMergedRefs(forwardedRef);\n\n    const Comp = asChild ? Slot : 'section';\n\n    return (\n      <Comp\n        {...props}\n        className={cn(containerVariants({ color }), className)}\n        ref={ref}\n      >\n        {children}\n      </Comp>\n    );\n  },\n);\nContainer.displayName = 'Container';\n",
      "type": "components"
    },
    {
      "name": "containment/container/container.types.ts",
      "content": "import type { PropsWithAsChild } from '@/types';\nimport type { VariantProps } from 'class-variance-authority';\nimport type { containerVariants } from './container.variants';\n\nexport type ContainerProps = PropsWithAsChild<'section'> &\n  VariantProps<typeof containerVariants>;\n",
      "type": "components"
    },
    {
      "name": "containment/container/container.variants.ts",
      "content": "import { cva } from '@/utility';\n\nconst variants = cva(\n  {\n    name: 'group/container',\n    flex: 'flex items-stretch justify-center',\n  },\n  {\n    variants: {\n      color: {\n        surface: {\n          background: 'bg-surface',\n          typography: 'text-on-surface',\n        },\n        'surface-container': {\n          background: 'bg-surface-container',\n          typography: 'text-on-surface',\n        },\n        'inverse-surface': {\n          background: 'bg-inverse-surface',\n          typography: 'text-inverse-on-surface',\n        },\n        primary: {\n          background: 'bg-primary',\n          typography: 'text-on-primary',\n        },\n        'primary-container': {\n          background: 'bg-primary-container',\n          typography: 'text-on-primary-container',\n        },\n        secondary: {\n          background: 'bg-secondary',\n          typography: 'text-on-secondary',\n        },\n        'secondary-container': {\n          background: 'bg-secondary-container',\n          typography: 'text-on-secondary-container',\n        },\n        info: {\n          background: 'bg-info',\n          typography: 'text-on-info',\n        },\n        'info-container': {\n          background: 'bg-info-container',\n          typography: 'text-on-info-container',\n        },\n        success: {\n          background: 'bg-success',\n          typography: 'text-on-success',\n        },\n        'success-container': {\n          background: 'bg-success-container',\n          typography: 'text-on-success-container',\n        },\n        caution: {\n          background: 'bg-caution',\n          typography: 'text-on-caution',\n        },\n        'caution-container': {\n          background: 'bg-caution-container',\n          typography: 'text-on-caution-container',\n        },\n        critical: {\n          background: 'bg-critical',\n          typography: 'text-on-critical',\n        },\n        'critical-container': {\n          background: 'bg-critical-container',\n          typography: 'text-on-critical-container',\n        },\n        none: {},\n      },\n    },\n    defaultVariants: {\n      color: 'none',\n    },\n  },\n);\n\nconst contentVariants = cva(\n  {\n    name: 'container--content',\n    flex: 'flex-1',\n    spacing: 'px-md',\n  },\n  {\n    variants: {\n      variant: {\n        grid: {\n          box: 'grid grid-cols-12 gap-md',\n        },\n        flex: {\n          flex: 'flex gap-md',\n        },\n        none: {},\n      },\n      fluid: {\n        true: {},\n        false: {\n          box: 'container',\n        },\n      },\n      padding: {\n        top: {\n          spacing: 'pt-3xl',\n        },\n        bottom: {\n          spacing: 'pb-3xl',\n        },\n        both: {\n          spacing: 'py-3xl',\n        },\n        none: {},\n      },\n    },\n    defaultVariants: {\n      variant: 'none',\n      fluid: false,\n      padding: 'none',\n    },\n  },\n);\n\nexport const containerVariants = Object.assign(variants, {\n  content: contentVariants,\n});\n",
      "type": "components"
    },
    {
      "name": "containment/container/index.ts",
      "content": "export * from './compound';\nexport * from './container';\nexport * from './container.types';\nexport * from './container.variants';\n",
      "type": "components"
    },
    {
      "name": "containment/dialog/compound/dialog-actions.tsx",
      "content": "import type { Props } from '@/types';\nimport { cn } from '@/utility';\nimport { dialogVariants } from '../dialog.variants';\n\nexport const DialogActions: React.FC<Props<'section'>> = ({\n  className,\n  ...props\n}) => {\n  return (\n    <section {...props} className={cn(dialogVariants.actions(), className)} />\n  );\n};\n",
      "type": "components"
    },
    {
      "name": "containment/dialog/compound/dialog-divider.tsx",
      "content": "import { cn } from '@/utility';\nimport type { VariantProps } from 'class-variance-authority';\nimport type { DividerProps } from '../../divider';\nimport { Divider } from '../../divider';\nimport { dialogVariants } from '../dialog.variants';\n\nexport const DialogDivider: React.FC<\n  DividerProps & VariantProps<typeof dialogVariants.divider>\n> = ({ spacing, className, ...props }) => {\n  return (\n    <Divider\n      {...props}\n      className={cn(dialogVariants.divider({ spacing }), className)}\n    />\n  );\n};\n",
      "type": "components"
    },
    {
      "name": "containment/dialog/compound/dialog-icon.tsx",
      "content": "import type { Props } from '@/types';\nimport { cn } from '@/utility';\nimport { dialogVariants } from '../dialog.variants';\n\nexport const DialogIcon: React.FC<Props<'span'>> = ({\n  className,\n  ...props\n}) => {\n  return <span {...props} className={cn(dialogVariants.icon(), className)} />;\n};\n",
      "type": "components"
    },
    {
      "name": "containment/dialog/compound/dialog-subhead.tsx",
      "content": "import type { Props } from '@/types';\nimport { cn } from '@/utility';\nimport { dialogVariants } from '../dialog.variants';\n\nexport const DialogSubhead: React.FC<Props<'p'>> = ({\n  className,\n  ...props\n}) => {\n  return <p {...props} className={cn(dialogVariants.subhead(), className)} />;\n};\n",
      "type": "components"
    },
    {
      "name": "containment/dialog/compound/dialog-text.tsx",
      "content": "import type { Props } from '@/types';\nimport { cn } from '@/utility';\nimport { dialogVariants } from '../dialog.variants';\n\nexport const DialogText: React.FC<Props<'p'>> = ({ className, ...props }) => {\n  return <p {...props} className={cn(dialogVariants.text(), className)} />;\n};\n",
      "type": "components"
    },
    {
      "name": "containment/dialog/compound/index.ts",
      "content": "export * from './dialog-actions';\nexport * from './dialog-divider';\nexport * from './dialog-icon';\nexport * from './dialog-subhead';\nexport * from './dialog-text';\n",
      "type": "components"
    },
    {
      "name": "containment/dialog/dialog.tsx",
      "content": "import { materialDuration, materialEasing } from '@/config';\nimport { useMergedRefs } from '@/hooks';\nimport { cn, mergeProps } from '@/utility';\nimport { motion } from 'motion/react';\nimport React from 'react';\nimport { useDialog } from 'react-aria';\nimport type { DialogProps } from './dialog.types';\nimport { dialogVariants } from './dialog.variants';\n\nconst DialogImpl = React.forwardRef<HTMLElement, DialogProps>(\n  ({ className, children, ...props }, forwardedRef) => {\n    const ref = useMergedRefs(forwardedRef);\n    const { dialogProps } = useDialog(props, ref);\n\n    return (\n      <motion.section\n        {...(mergeProps(props, dialogProps) as Record<string, unknown>)}\n        initial={{\n          opacity: 0,\n          y: '100%',\n        }}\n        animate={{\n          opacity: 1,\n          y: 0,\n        }}\n        exit={{\n          opacity: 0,\n          y: '100%',\n        }}\n        transition={{\n          duration: materialDuration.asMotion('long-1'),\n          ease: materialEasing['standard'],\n        }}\n        className={cn(dialogVariants(), className)}\n        ref={ref}\n      >\n        {children}\n      </motion.section>\n    );\n  },\n);\nDialogImpl.displayName = 'Dialog';\n\nexport const Dialog = DialogImpl;\n",
      "type": "components"
    },
    {
      "name": "containment/dialog/dialog.types.ts",
      "content": "import type { AriaProps } from '@/types';\nimport type { VariantProps } from 'class-variance-authority';\nimport type { AriaDialogProps } from 'react-aria';\nimport type { dialogVariants } from './dialog.variants';\n\nexport type DialogProps = AriaProps<'section', AriaDialogProps> &\n  VariantProps<typeof dialogVariants>;\n",
      "type": "components"
    },
    {
      "name": "containment/dialog/dialog.variants.ts",
      "content": "import { cva } from '@/utility';\n\nconst variants = cva({\n  name: 'dialog group/dialog',\n  box: 'min-w-72 max-w-72 sm:max-w-[calc(var(--spacing-96)+var(--spacing-44))]',\n  flex: 'inline-flex flex-col',\n  spacing: 'p-lg',\n  borders: 'rounded-2xl',\n  background: 'bg-surface-container-high',\n  typography: 'text-on-surface',\n  effects: 'elevation-3',\n  other: 'outline-none',\n});\n\nconst iconVariants = cva({\n  name: 'dialog--icon',\n  typography: 'text-secondary',\n  box: 'size-6',\n  layout: 'relative inline-block',\n  overflow: 'overflow-hidden empty:hidden',\n  other: '[&>*]:absolute [&>*]:inset-0 [&>*]:size-full',\n  spacing: 'mx-auto mb-md',\n});\n\nconst subheadVariants = cva({\n  name: 'dialog--subhead',\n  typography: 'text-center typography-headline-small text-on-surface',\n  spacing: 'mb-md',\n});\n\nconst dividerVariants = cva(\n  {\n    name: 'dialog--divider',\n  },\n  {\n    variants: {\n      spacing: {\n        top: {\n          spacing: 'mt-md',\n        },\n        bottom: {\n          spacing: 'mb-md',\n        },\n        both: {\n          spacing: 'my-md',\n        },\n        none: {},\n      },\n    },\n    defaultVariants: {\n      spacing: 'none',\n    },\n  },\n);\n\nconst textVariants = cva({\n  name: 'dialog--text',\n  typography: 'typography-body-medium text-on-surface-variant',\n});\n\nconst actionsVariants = cva({\n  name: 'dialog--actions',\n  flex: 'inline-flex items-center justify-end gap-sm',\n  spacing: 'mt-lg',\n});\n\nexport const dialogVariants = Object.assign(variants, {\n  icon: iconVariants,\n  subhead: subheadVariants,\n  divider: dividerVariants,\n  text: textVariants,\n  actions: actionsVariants,\n});\n",
      "type": "components"
    },
    {
      "name": "containment/dialog/index.ts",
      "content": "export * from './compound';\nexport * from './dialog';\nexport * from './dialog.types';\nexport * from './dialog.variants';\n",
      "type": "components"
    },
    {
      "name": "containment/divider/divider.tsx",
      "content": "import { useMergedRefs } from '@/hooks';\nimport { cn } from '@/utility';\nimport { Slot } from '@radix-ui/react-slot';\nimport React from 'react';\nimport { useSeparator } from 'react-aria';\nimport type { DividerProps } from './divider.types';\nimport { dividerVariants } from './divider.variants';\n\nexport const Divider = React.forwardRef<HTMLElement, DividerProps>(\n  (\n    { inset, orientation = 'horizontal', asChild, className, ...props },\n    forwardedRef,\n  ) => {\n    const ref = useMergedRefs(forwardedRef);\n\n    const { separatorProps } = useSeparator({ orientation, ...props });\n\n    const Comp = asChild ? Slot : 'section';\n\n    return (\n      <Comp\n        {...separatorProps}\n        ref={ref}\n        className={cn(dividerVariants({ inset }), className)}\n        data-orientation={orientation}\n      />\n    );\n  },\n);\nDivider.displayName = 'Divider';\n",
      "type": "components"
    },
    {
      "name": "containment/divider/divider.types.ts",
      "content": "import type { AriaPropsWithAsChild } from '@/types';\nimport type { VariantProps } from 'class-variance-authority';\nimport type { SeparatorProps } from 'react-aria';\nimport type { dividerVariants } from './divider.variants';\n\nexport type DividerProps = AriaPropsWithAsChild<'section', SeparatorProps> &\n  VariantProps<typeof dividerVariants>;\n",
      "type": "components"
    },
    {
      "name": "containment/divider/divider.variants.ts",
      "content": "import { cva } from '@/utility';\n\nconst variants = cva(\n  {\n    name: 'divider group/divider',\n    layout: 'relative',\n    flex: 'inline-flex items-center justify-center',\n    box: [\n      'data-[orientation=horizontal]:h-0.25 data-[orientation=horizontal]:w-full',\n      'data-[orientation=vertical]:h-full data-[orientation=vertical]:w-0.25',\n    ],\n    after: ['after:bg-outline-variant', 'after:size-full'],\n  },\n  {\n    variants: {\n      inset: {\n        true: {\n          spacing: [\n            'data-[orientation=horizontal]:px-md',\n            'data-[orientation=vertical]:py-md',\n          ],\n        },\n        false: {},\n      },\n    },\n  },\n);\n\nexport const dividerVariants = Object.assign(variants, {});\n",
      "type": "components"
    },
    {
      "name": "containment/divider/index.ts",
      "content": "export * from './divider';\nexport * from './divider.types';\nexport * from './divider.variants';\n",
      "type": "components"
    },
    {
      "name": "containment/index.ts",
      "content": "export * from './carousel';\nexport * from './container';\nexport * from './dialog';\nexport * from './divider';\nexport * from './modal';\nexport * from './popover';\n",
      "type": "components"
    },
    {
      "name": "containment/modal/compound/index.ts",
      "content": "export * from './modal-content';\nexport * from './modal-trigger';\n",
      "type": "components"
    },
    {
      "name": "containment/modal/compound/modal-content.tsx",
      "content": "import { Portal } from '@/components/utility';\nimport { useMergedRefs } from '@/hooks';\nimport type { Props } from '@/types';\nimport { cn, mergeProps } from '@/utility';\nimport { AnimatePresence } from 'motion/react';\nimport React from 'react';\nimport { useModalContext } from '../context';\nimport { modalVariants } from '../modal.variants';\n\nexport type ModalContentProps = Props<'section', 'children'> & {\n  children: (close: () => void) => React.ReactElement;\n};\n\nexport const ModalContent = React.forwardRef<HTMLElement, ModalContentProps>(\n  ({ children, className, ...props }, forwardedRef) => {\n    const ref = useMergedRefs(forwardedRef);\n    const [{ state, modalProps, overlayProps, underlayProps }] =\n      useModalContext();\n\n    return (\n      <Portal>\n        <AnimatePresence mode=\"wait\">\n          {state?.isOpen && (\n            <section\n              {...underlayProps}\n              onClick={(e) => {\n                if (e.currentTarget === e.target) state.close();\n                underlayProps?.onMouseDown?.(e);\n              }}\n              onTouchStart={(e) => {\n                if (e.currentTarget === e.target) state.close();\n                underlayProps?.onTouchStart?.(e);\n              }}\n              className={cn(modalVariants.underlay())}\n            >\n              <section\n                {...mergeProps(props, modalProps)}\n                className={cn(modalVariants(), className)}\n                ref={ref}\n              >\n                {React.cloneElement(children(state.close), overlayProps)}\n              </section>\n            </section>\n          )}\n        </AnimatePresence>\n      </Portal>\n    );\n  },\n);\nModalContent.displayName = 'ModalContent';\n",
      "type": "components"
    },
    {
      "name": "containment/modal/compound/modal-trigger.tsx",
      "content": "import { useMergedRefs } from '@/hooks';\nimport { Slot, Slottable } from '@radix-ui/react-slot';\nimport React from 'react';\nimport { useModalContext } from '../context';\n\nexport const ModalTrigger = React.forwardRef<\n  HTMLButtonElement,\n  React.PropsWithChildren\n>(({ children }, forwardedRef) => {\n  const ref = useMergedRefs(forwardedRef);\n  const [triggerProps] = useModalContext((s) => s.triggerProps);\n\n  const Comp = Slot;\n\n  return (\n    <Comp {...triggerProps} ref={ref}>\n      <Slottable>{children}</Slottable>\n    </Comp>\n  );\n});\nModalTrigger.displayName = 'ModalTrigger';\n",
      "type": "components"
    },
    {
      "name": "containment/modal/context/index.ts",
      "content": "export * from './modal.context';\n",
      "type": "components"
    },
    {
      "name": "containment/modal/context/modal.context.tsx",
      "content": "import { createContext } from '@/utility';\nimport type React from 'react';\nimport type { AriaButtonProps } from 'react-aria';\nimport type { OverlayTriggerState } from 'react-stately';\n\nexport type ModalContextState = {\n  triggerProps?: AriaButtonProps<'button'>;\n  overlayProps?: { id?: string };\n  modalProps?: React.DOMAttributes<HTMLElement>;\n  underlayProps?: React.DOMAttributes<HTMLElement>;\n  state?: OverlayTriggerState;\n};\n\nconst { useStore, useSetStore, Provider } = createContext<ModalContextState>(\n  {},\n  {\n    storeName: 'Modal',\n  },\n);\n\nexport const ModalContextProvider = Provider;\n\nexport const useModalContext = useStore;\n\nexport const useModalSetContext = useSetStore;\n",
      "type": "components"
    },
    {
      "name": "containment/modal/index.ts",
      "content": "export * from './compound';\nexport * from './modal';\nexport * from './modal.types';\nexport * from './modal.variants';\n",
      "type": "components"
    },
    {
      "name": "containment/modal/modal.tsx",
      "content": "import { useMergedRefs } from '@/hooks';\nimport { withProvider } from '@/utility';\nimport React from 'react';\nimport { useModalOverlay, useOverlayTrigger } from 'react-aria';\nimport { useOverlayTriggerState } from 'react-stately';\nimport { ModalContextProvider, useModalSetContext } from './context';\nimport type { ModalProps } from './modal.types';\n\nconst ModalImpl = React.forwardRef<HTMLElement, ModalProps>(\n  (\n    {\n      isDismissable = true,\n      isOpen,\n      defaultOpen,\n      onOpenChange,\n      children,\n      ...props\n    },\n    forwardedRef,\n  ) => {\n    const ref = useMergedRefs(forwardedRef);\n    const setState = useModalSetContext();\n\n    const state = useOverlayTriggerState({\n      isOpen,\n      defaultOpen,\n      onOpenChange,\n    });\n    const { triggerProps, overlayProps } = useOverlayTrigger(\n      { type: 'dialog' },\n      state,\n    );\n\n    const { modalProps, underlayProps } = useModalOverlay(\n      { ...props, isDismissable },\n      state,\n      ref,\n    );\n\n    React.useEffect(() => {\n      setState((p) => ({\n        ...p,\n        state,\n        triggerProps,\n        overlayProps,\n        modalProps,\n        underlayProps,\n      }));\n\n      return () => setState({});\n    }, [\n      modalProps,\n      overlayProps,\n      setState,\n      state,\n      triggerProps,\n      underlayProps,\n    ]);\n\n    return children;\n  },\n);\nModalImpl.displayName = 'Modal';\n\nexport const Modal = withProvider(ModalContextProvider, ModalImpl);\n",
      "type": "components"
    },
    {
      "name": "containment/modal/modal.types.ts",
      "content": "import type { AriaProps } from '@/types';\nimport type { VariantProps } from 'class-variance-authority';\nimport type { AriaModalOverlayProps } from 'react-aria';\nimport type { modalVariants } from './modal.variants';\n\nexport type ModalProps = AriaProps<'section', AriaModalOverlayProps> &\n  VariantProps<typeof modalVariants> & {\n    isOpen?: boolean;\n    defaultOpen?: boolean;\n    onOpenChange?: (isOpen: boolean) => void;\n  };\n",
      "type": "components"
    },
    {
      "name": "containment/modal/modal.variants.ts",
      "content": "import { cva } from '@/utility';\n\nconst variants = cva({\n  name: 'modal group/modal',\n  other: 'p-md',\n});\n\nconst underlayVariants = cva({\n  name: 'modal--underlay',\n  layout: 'fixed inset-0',\n  flex: 'inline-flex items-center justify-center',\n  overflow: 'overflow-hidden',\n  other: 'z-30',\n});\n\nexport const modalVariants = Object.assign(variants, {\n  underlay: underlayVariants,\n});\n",
      "type": "components"
    },
    {
      "name": "containment/popover/compound/index.ts",
      "content": "export * from './popover-content';\nexport * from './popover-trigger';\n",
      "type": "components"
    },
    {
      "name": "containment/popover/compound/popover-content.tsx",
      "content": "import { Portal } from '@/components/utility';\nimport { materialDuration, materialEasing } from '@/config';\nimport type { Props } from '@/types';\nimport { cn, mergeProps } from '@/utility';\nimport type { VariantProps } from 'class-variance-authority';\nimport { AnimatePresence, motion } from 'motion/react';\nimport React from 'react';\nimport type { AriaPopoverProps } from 'react-aria';\nimport { usePopover } from 'react-aria';\nimport type { OverlayTriggerState } from 'react-stately';\nimport { usePopoverContext } from '../context';\nimport { popoverVariants } from '../popover.variants';\n\nexport type PopoverContentProps = Props<'section'> &\n  VariantProps<typeof popoverVariants> & {\n    state?: OverlayTriggerState;\n  };\n\nconst positionToPlacement = (\n  position: PopoverContentProps['position'],\n): AriaPopoverProps['placement'] => {\n  if (!position) return 'top';\n  const mapped: Record<\n    NonNullable<PopoverContentProps['position']>,\n    AriaPopoverProps['placement']\n  > = {\n    'top-start': 'top start',\n    top: 'top',\n    'top-end': 'top end',\n    'right-start': 'right top',\n    right: 'right',\n    'right-end': 'right bottom',\n    'bottom-start': 'bottom start',\n    bottom: 'bottom',\n    'bottom-end': 'bottom end',\n    'left-start': 'left top',\n    left: 'left',\n    'left-end': 'left bottom',\n  };\n  return mapped[position];\n};\n\nconst calculateMotionPosition = (\n  position: NonNullable<PopoverContentProps['position']> = 'top',\n): { x: number; y: number } => {\n  const values = { x: 0, y: 0 };\n  if (position.includes('left')) {\n    values.x = 4;\n  } else if (position.includes('right')) {\n    values.x = -4;\n  }\n  if (position.includes('top')) {\n    values.y = 4;\n  } else if (position.includes('bottom')) {\n    values.y = -4;\n  }\n  return values;\n};\n\nexport const PopoverContent: React.FC<PopoverContentProps> = ({\n  position = 'top',\n  state: popoverState,\n  className,\n  children,\n  ...props\n}) => {\n  const ref = React.useRef<HTMLElement>(null);\n  const [\n    {\n      triggerRef,\n      state: contextState,\n      popoverProps: ariaPopoverProps,\n      triggerPopoverProps,\n    },\n  ] = usePopoverContext();\n\n  const state = popoverState ?? contextState;\n\n  const { popoverProps } = usePopover(\n    {\n      ...mergeProps(\n        props as Props<'section'>,\n        triggerPopoverProps,\n        ariaPopoverProps as Props<'section'>,\n      ),\n      placement: positionToPlacement(position),\n      triggerRef: triggerRef ?? React.createRef(),\n      popoverRef: ref,\n    },\n    state ?? {\n      isOpen: false,\n      open() {},\n      close() {},\n      setOpen() {},\n      toggle() {},\n    },\n  );\n\n  return (\n    <Portal>\n      <AnimatePresence mode=\"wait\">\n        {state?.isOpen && (\n          <motion.section\n            {...(popoverProps as Record<string, unknown>)}\n            initial={{\n              opacity: 0,\n              ...calculateMotionPosition(position ?? 'top'),\n            }}\n            animate={{\n              opacity: 1,\n              x: 0,\n              y: 0,\n            }}\n            exit={{\n              opacity: 0,\n              ...calculateMotionPosition(position ?? 'top'),\n            }}\n            transition={{\n              duration: materialDuration.asMotion('medium-1'),\n              ease: materialEasing['standard'],\n            }}\n            className={cn(popoverVariants({ position }), className)}\n            ref={ref}\n          >\n            {children}\n          </motion.section>\n        )}\n      </AnimatePresence>\n    </Portal>\n  );\n};\n",
      "type": "components"
    },
    {
      "name": "containment/popover/compound/popover-trigger.tsx",
      "content": "import { useMergedRefs } from '@/hooks';\nimport type { AriaProps } from '@/types';\nimport { Slot, Slottable } from '@radix-ui/react-slot';\nimport React from 'react';\nimport { useOverlayTrigger } from 'react-aria';\nimport type { OverlayTriggerProps } from 'react-stately';\nimport { useOverlayTriggerState } from 'react-stately';\nimport { usePopoverContext, usePopoverSetContext } from '../context';\n\nexport type PopoverTriggerProps = AriaProps<'button', OverlayTriggerProps>;\n\nexport const PopoverTrigger = React.forwardRef<\n  HTMLButtonElement,\n  PopoverTriggerProps\n>(({ children, ...props }, forwardedRef) => {\n  const ref = useMergedRefs(forwardedRef);\n  const [type] = usePopoverContext((s) => s.popoverProps?.type ?? 'dialog');\n  const setState = usePopoverSetContext();\n\n  const state = useOverlayTriggerState(props);\n  const { triggerProps, overlayProps } = useOverlayTrigger(\n    { ...props, type },\n    state,\n    ref,\n  );\n\n  React.useEffect(() => {\n    setState((p) => ({\n      ...p,\n      state,\n      triggerRef: ref,\n      triggerPopoverProps: overlayProps,\n    }));\n\n    return () => {\n      setState((prev) => ({\n        ...prev,\n        state: undefined,\n        triggerRef: undefined,\n        triggerPopoverProps: undefined,\n      }));\n    };\n  }, [ref, setState, state, overlayProps]);\n\n  const Comp = Slot;\n\n  return (\n    <Comp {...triggerProps} ref={ref}>\n      <Slottable>{children}</Slottable>\n    </Comp>\n  );\n});\nPopoverTrigger.displayName = 'PopoverTrigger';\n",
      "type": "components"
    },
    {
      "name": "containment/popover/context/index.ts",
      "content": "export * from './popover.context';\n",
      "type": "components"
    },
    {
      "name": "containment/popover/context/popover.context.tsx",
      "content": "import { createContext } from '@/utility';\nimport type { AriaPopoverProps, OverlayTriggerProps } from 'react-aria';\nimport type { OverlayTriggerState } from 'react-stately';\n\nexport type PopoverContextState = {\n  state?: OverlayTriggerState;\n  popoverProps?: Omit<AriaPopoverProps, 'triggerRef' | 'popoverRef'> &\n    Partial<OverlayTriggerProps>;\n  triggerRef?: React.RefObject<HTMLElement | null>;\n  triggerPopoverProps?: { id?: string };\n};\n\nconst { useStore, useSetStore, Provider } = createContext<PopoverContextState>(\n  {},\n  {\n    storeName: 'Popover',\n  },\n);\n\nexport const PopoverContextProvider = Provider;\n\nexport const usePopoverContext = useStore;\n\nexport const usePopoverSetContext = useSetStore;\n",
      "type": "components"
    },
    {
      "name": "containment/popover/index.ts",
      "content": "export * from './compound';\nexport * from './popover';\nexport * from './popover.types';\nexport * from './popover.variants';\n",
      "type": "components"
    },
    {
      "name": "containment/popover/popover.tsx",
      "content": "import { withProvider } from '@/utility';\nimport React from 'react';\nimport { PopoverContextProvider, usePopoverSetContext } from './context';\nimport type { PopoverProps } from './popover.types';\n\nconst PopoverImpl: React.FC<PopoverProps> = ({ children, ...popoverProps }) => {\n  const setState = usePopoverSetContext();\n\n  React.useEffect(() => {\n    setState((p) => ({\n      ...p,\n      popoverProps,\n    }));\n\n    return () => setState((p) => ({ ...p, popoverProps: undefined }));\n  }, [setState, popoverProps]);\n\n  return <>{children}</>;\n};\n\nexport const Popover = withProvider(PopoverContextProvider, PopoverImpl);\n",
      "type": "components"
    },
    {
      "name": "containment/popover/popover.types.ts",
      "content": "import type { AriaPopoverProps, OverlayTriggerProps } from 'react-aria';\n\nexport type PopoverProps = React.PropsWithChildren<\n  Omit<AriaPopoverProps, 'triggerRef' | 'popoverRef' | 'placement'> &\n    Partial<OverlayTriggerProps>\n>;\n",
      "type": "components"
    },
    {
      "name": "containment/popover/popover.variants.ts",
      "content": "import { cva } from '@/utility';\n\nconst variants = cva(\n  {\n    name: 'popover group/popover',\n    overflow: 'overflow-hidden',\n    layout: 'relative',\n  },\n  {\n    variants: {\n      position: {\n        'top-start': {},\n        top: {},\n        'top-end': {},\n        'right-start': {},\n        right: {},\n        'right-end': {},\n        'bottom-start': {},\n        bottom: {},\n        'bottom-end': {},\n        'left-start': {},\n        left: {},\n        'left-end': {},\n      },\n    },\n    defaultVariants: {\n      position: 'top',\n    },\n  },\n);\n\nexport const popoverVariants = Object.assign(variants, {});\n",
      "type": "components"
    },
    {
      "name": "index.ts",
      "content": "export * from './action';\nexport * from './communication';\nexport * from './containment';\nexport * from './input';\nexport * from './selection';\nexport * from './utility';\n",
      "type": "components"
    },
    {
      "name": "input/field/context/field.context.tsx",
      "content": "import type { ContextState } from '@/types';\nimport React from 'react';\n\nexport type FieldContextState = ContextState<{\n  leftIcon?: React.ReactNode;\n  rightIcon?: React.ReactNode;\n}>;\n\nconst FieldContext = React.createContext<FieldContextState | null>(null);\n\nexport const useFieldContext = () => {\n  const value = React.useContext(FieldContext);\n  if (!value)\n    throw new Error('This component must be used within a <Field> component');\n  return value;\n};\n\nexport const FieldContextProvider: React.FC<React.PropsWithChildren> = ({\n  children,\n}) => {\n  const state = React.useState<FieldContextState[0]>({});\n\n  return (\n    <FieldContext.Provider value={state}>{children}</FieldContext.Provider>\n  );\n};\n",
      "type": "components"
    },
    {
      "name": "input/field/context/index.ts",
      "content": "export * from './field.context';\n",
      "type": "components"
    },
    {
      "name": "input/field/field.tsx",
      "content": "import type { Props } from '@/types';\nimport { cn, mergeProps, withProvider } from '@/utility';\nimport type React from 'react';\nimport { useField, useFocusRing, useHover } from 'react-aria';\nimport { FieldContextProvider } from './context';\nimport type { FieldProps } from './field.types';\nimport { fieldVariants } from './field.variants';\nimport { InternalFieldIcon } from './internal/internal-field-icon';\n\nconst FieldImpl: React.FC<FieldProps> = ({\n  left,\n  right,\n  isInvalid,\n  isDisabled,\n  fieldClassName,\n  children,\n  className,\n  ...props\n}) => {\n  const { labelProps, fieldProps, descriptionProps, errorMessageProps } =\n    useField(props);\n\n  const { focusProps, isFocused, isFocusVisible } = useFocusRing({\n    isTextInput: true,\n  });\n  const {\n    focusProps: focusVisibleWithinProps,\n    isFocused: isFocusedWithin,\n    isFocusVisible: isFocusVisibleWithin,\n  } = useFocusRing({\n    ...props,\n    within: true,\n  });\n  const { hoverProps, isHovered } = useHover({\n    isDisabled: isDisabled ?? false,\n  });\n\n  return (\n    <section className={cn(fieldVariants.wrapper(), className)}>\n      <label\n        {...mergeProps(\n          focusProps as Props<'label'>,\n          focusVisibleWithinProps,\n          hoverProps,\n          labelProps,\n        )}\n        className={cn(\n          fieldVariants({\n            isInvalid,\n            isDisabled,\n          }),\n          fieldClassName,\n        )}\n        data-is-disabled={isDisabled ?? false}\n        data-is-hovered={isHovered}\n        data-in-focus={isFocused}\n        data-in-focus-within={isFocusedWithin}\n        data-in-focus-visible={isFocusVisible}\n        data-in-focus-visible-within={isFocusVisibleWithin}\n      >\n        <InternalFieldIcon position=\"left\" className=\"field--left-icon\">\n          {left}\n        </InternalFieldIcon>\n        <span\n          aria-hidden={Boolean(props.label)}\n          className={cn(fieldVariants.content())}\n        >\n          <span className={cn(fieldVariants.label({ isInvalid }))}>\n            {props.label}\n          </span>\n          {children(fieldProps)}\n        </span>\n        <InternalFieldIcon position=\"right\" className=\"field--right-icon\">\n          {right}\n        </InternalFieldIcon>\n      </label>\n      {props.description && (\n        <p {...descriptionProps} className={cn(fieldVariants.description())}>\n          {props.description}\n        </p>\n      )}\n      {props.errorMessage && (\n        <p\n          {...errorMessageProps}\n          className={cn(fieldVariants.description({ isErrorMessage: true }))}\n        >\n          {props.errorMessage}\n        </p>\n      )}\n    </section>\n  );\n};\nFieldImpl.displayName = 'Field';\n\nexport const Field = withProvider(FieldContextProvider, FieldImpl);\n",
      "type": "components"
    },
    {
      "name": "input/field/field.types.ts",
      "content": "import type { AriaProps } from '@/types';\nimport type { VariantProps } from 'class-variance-authority';\nimport type React from 'react';\nimport type { AriaFieldProps } from 'react-aria';\nimport type { fieldVariants } from './field.variants';\n\nexport type FieldProps = Omit<\n  AriaProps<'label', AriaFieldProps, 'errorMessage'>,\n  'children'\n> &\n  VariantProps<typeof fieldVariants> & {\n    errorMessage?: React.ReactNode;\n    children: (fieldProps: {\n      id?: string;\n      'aria-label'?: string;\n      'aria-labelledby'?: string;\n      'aria-describedby'?: string;\n      'aria-details'?: string;\n    }) => React.ReactNode;\n  } & {\n    left?: React.ReactNode;\n    right?: React.ReactNode;\n  } & {\n    fieldClassName?: string;\n  };\n",
      "type": "components"
    },
    {
      "name": "input/field/field.variants.ts",
      "content": "import { cva } from '@/utility';\n\nconst variants = cva(\n  {\n    name: 'field group/field',\n    layout: 'relative',\n    box: 'min-h-14 w-full rounded-md',\n    flex: 'inline-flex items-center justify-between',\n    transitions: 'transition easing-standard duration-medium-1',\n    borders: 'border-2 outline-none',\n    overflow: 'overflow-hidden',\n    background: ['bg-surface-container', 'is-disabled:bg-on-surface/8'],\n    typography: 'whitespace-nowrap text-on-surface',\n    spacing: 'px-md',\n    states: [\n      'state-on-surface',\n      'is-disabled:state-transparent',\n      'is-disabled:pointer-events-none',\n      'is-hovered:state-hover',\n      'in-focus-within:state-focus',\n      'is-pressed:state-press',\n    ],\n  },\n  {\n    variants: {\n      isInvalid: {\n        true: {\n          borders: 'border-critical',\n        },\n        false: {\n          borders: 'border-transparent',\n        },\n      },\n      isDisabled: {\n        true: {},\n        false: {},\n      },\n    },\n    defaultVariants: {\n      isInvalid: false,\n      isDisabled: false,\n    },\n  },\n);\n\nconst wrapperVariants = cva({\n  name: 'field--wrapper',\n  box: 'inline-grid gap-2xs',\n});\n\nconst contentVariants = cva({\n  name: 'field--content',\n  layout: 'relative',\n  box: 'min-h-12',\n  flex: 'inline-flex flex-1 flex-col justify-center',\n  transitions: [\n    'transition-[grid-template-rows,color,background-color,border-color,text-decoration-color,fill,stroke,opacity,box-shadow,transform,filter,backdrop-filter,-webkit-backdrop-filter]',\n    'easing-standard duration-medium-1',\n  ],\n  overflow: 'overflow-hidden',\n  typography: 'whitespace-nowrap typography-body-large',\n});\n\nconst labelVariants = cva(\n  {\n    name: 'field--label',\n    typography: [\n      'text-ellipsis whitespace-nowrap typography-label-medium',\n      'group-is-disabled/field:text-on-surface/38',\n    ],\n    transitions: 'transition easing-standard duration-medium-1',\n    overflow: 'overflow-hidden',\n    other: 'select-none',\n  },\n  {\n    variants: {\n      isInvalid: {\n        true: {\n          typography: 'text-critical',\n        },\n        false: {\n          typography: 'text-on-surface-variant',\n        },\n      },\n    },\n    defaultVariants: {\n      isInvalid: false,\n    },\n  },\n);\n\nconst descriptionVariants = cva(\n  {\n    name: 'field--description',\n    spacing: 'px-md',\n    typography: 'typography-body-small',\n    transitions: 'transition easing-standard duration-medium-1',\n    flex: 'inline-flex items-center justify-between gap-md',\n  },\n  {\n    variants: {\n      isErrorMessage: {\n        true: {\n          typography: 'text-critical',\n        },\n        false: {\n          typography: 'text-on-surface-variant',\n        },\n      },\n    },\n    defaultVariants: {\n      isErrorMessage: false,\n    },\n  },\n);\n\nconst iconVariants = cva(\n  {\n    name: 'field--icon',\n    typography: [\n      'text-on-surface-variant',\n      'group-is-disabled/field:text-on-surface/38',\n    ],\n    layout: 'relative inline-block',\n    box: 'size-6',\n    overflow: 'overflow-hidden empty:hidden',\n    other: '[&>*]:absolute [&>*]:inset-0 [&>*]:size-full',\n  },\n  {\n    variants: {\n      position: {\n        left: {\n          box: 'mr-sm',\n        },\n        right: {\n          box: 'ml-sm',\n        },\n        none: {},\n      },\n    },\n    defaultVariants: {\n      position: 'none',\n    },\n  },\n);\n\nexport const fieldVariants = Object.assign(variants, {\n  wrapper: wrapperVariants,\n  content: contentVariants,\n  label: labelVariants,\n  description: descriptionVariants,\n  icon: iconVariants,\n});\n",
      "type": "components"
    },
    {
      "name": "input/field/index.ts",
      "content": "export * from './field';\nexport * from './field.types';\nexport * from './field.variants';\n",
      "type": "components"
    },
    {
      "name": "input/field/internal/index.ts",
      "content": "",
      "type": "components"
    },
    {
      "name": "input/field/internal/internal-field-icon.tsx",
      "content": "import { materialDuration, materialEasing } from '@/config';\nimport { cn, keyFromChildren } from '@/utility';\nimport type { VariantProps } from 'class-variance-authority';\nimport { AnimatePresence, motion } from 'motion/react';\nimport type React from 'react';\nimport { fieldVariants } from '../field.variants';\n\nexport const InternalFieldIcon: React.FC<\n  React.PropsWithChildren<{\n    className?: string;\n  }> &\n    VariantProps<typeof fieldVariants.icon>\n> = ({ position, className, children }) => {\n  return (\n    <AnimatePresence mode=\"sync\">\n      {children && (\n        <motion.span\n          key={keyFromChildren(children)}\n          initial={{\n            width: 0,\n            height: 0,\n            opacity: 0,\n            marginRight: 0,\n            marginLeft: 0,\n          }}\n          animate={{\n            width: 'var(--spacing-6)',\n            height: 'var(--spacing-6)',\n            marginRight: position === 'left' ? 'var(--spacing-sm)' : 0,\n            marginLeft: position === 'right' ? 'var(--spacing-sm)' : 0,\n            opacity: 1,\n          }}\n          exit={{\n            width: 0,\n            height: 0,\n            opacity: 0,\n            marginRight: 0,\n            marginLeft: 0,\n          }}\n          transition={{\n            duration: materialDuration.asMotion('medium-1'),\n            ease: materialEasing['standard'],\n          }}\n          className={cn(fieldVariants.icon({ position }), className)}\n        >\n          {children}\n        </motion.span>\n      )}\n    </AnimatePresence>\n  );\n};\n",
      "type": "components"
    },
    {
      "name": "input/index.ts",
      "content": "export * from './field';\nexport * from './number-field';\nexport * from './text-area-field';\nexport * from './text-field';\n",
      "type": "components"
    },
    {
      "name": "input/number-field/index.ts",
      "content": "export * from './number-field';\nexport * from './number-field.types';\nexport * from './number-field.variants';\n",
      "type": "components"
    },
    {
      "name": "input/number-field/number-field.tsx",
      "content": "import { materialDuration, materialEasing } from '@/config';\nimport type { Props } from '@/types';\nimport { cn, mergeProps } from '@/utility';\nimport { motion } from 'motion/react';\nimport React from 'react';\nimport { useFocus, useNumberField } from 'react-aria';\nimport { useNumberFieldState } from 'react-stately';\nimport { Field } from '../field';\nimport type { NumberFieldProps } from './number-field.types';\nimport { numberFieldVariants } from './number-field.variants';\n\nexport const NumberField: React.FC<NumberFieldProps> = ({\n  left,\n  right,\n  isDisabled,\n  isInvalid,\n  fieldClassName,\n  className,\n  label,\n  description,\n  errorMessage,\n  ...props\n}) => {\n  const ref = React.useRef<HTMLInputElement>(null);\n  const state = useNumberFieldState({ ...props, locale: 'ru' });\n  const { groupProps, inputProps } = useNumberField(\n    { ...props, label, description, errorMessage, isDisabled, isInvalid },\n    state,\n    ref,\n  );\n  const [inFocus, setInFocus] = React.useState(false);\n  const { focusProps } = useFocus({\n    onFocusChange: (isFocused) => setInFocus(isFocused),\n  });\n\n  const isExpanded = Boolean(\n    inFocus || props.placeholder || ref.current?.value || props.value,\n  );\n\n  return (\n    <Field\n      {...groupProps}\n      className={cn(numberFieldVariants(), className)}\n      left={left}\n      right={right}\n      isInvalid={isInvalid}\n      isDisabled={isDisabled}\n      label={label}\n      description={description}\n      errorMessage={errorMessage}\n      fieldClassName={fieldClassName}\n    >\n      {(fieldProps) => (\n        <motion.input\n          {...(mergeProps(\n            props as Props<'input'>,\n            fieldProps,\n            focusProps,\n            inputProps,\n          ) as React.ComponentProps<typeof motion.input>)}\n          animate={{\n            height: isExpanded ? 'auto' : 0,\n            opacity: isExpanded ? 1 : 0,\n          }}\n          transition={{\n            duration: materialDuration.asMotion('medium-1'),\n            ease: materialEasing['standard'],\n          }}\n          className={cn(numberFieldVariants.input())}\n          ref={ref}\n        />\n      )}\n    </Field>\n  );\n};\n",
      "type": "components"
    },
    {
      "name": "input/number-field/number-field.types.ts",
      "content": "import type { AriaProps } from '@/types';\nimport type { VariantProps } from 'class-variance-authority';\nimport type { AriaNumberFieldProps } from 'react-aria';\nimport type { FieldProps } from '../field';\nimport type { numberFieldVariants } from './number-field.variants';\n\nexport type NumberFieldProps = Omit<\n  AriaProps<'label', AriaNumberFieldProps, 'errorMessage'>,\n  'children'\n> &\n  Omit<FieldProps, 'children' | 'isDisabled' | 'isExpanded' | 'isInvalid'> &\n  VariantProps<typeof numberFieldVariants>;\n",
      "type": "components"
    },
    {
      "name": "input/number-field/number-field.variants.ts",
      "content": "import { cva } from '@/utility';\n\nconst variants = cva({\n  name: 'number-field group/number-field',\n});\n\nconst inputVariants = cva({\n  name: 'number-field--input',\n  overflow: 'overflow-hidden',\n  transitions: 'transition easing-standard duration-medium-1',\n  borders: 'outline-none border-transparent',\n  background: 'bg-transparent',\n  typography: [\n    'text-on-surface placeholder:text-on-surface-variant',\n    'group-is-disabled/field:text-on-surface/38',\n  ],\n});\n\nexport const numberFieldVariants = Object.assign(variants, {\n  input: inputVariants,\n});\n",
      "type": "components"
    },
    {
      "name": "input/text-area-field/index.ts",
      "content": "export * from './text-area-field';\nexport * from './text-area-field.types';\nexport * from './text-area-field.variants';\n",
      "type": "components"
    },
    {
      "name": "input/text-area-field/text-area-field.tsx",
      "content": "import { materialDuration, materialEasing } from '@/config';\nimport type { Props } from '@/types';\nimport { cn, mergeProps } from '@/utility';\nimport { motion } from 'motion/react';\nimport React from 'react';\nimport { useFocus, useTextField } from 'react-aria';\nimport { Field } from '../field';\nimport type { TextAreaFieldProps } from './text-area-field.types';\nimport { textAreaFieldVariants } from './text-area-field.variants';\n\nexport const TextAreaField: React.FC<TextAreaFieldProps> = ({\n  left,\n  right,\n  isDisabled,\n  isInvalid,\n  fieldClassName,\n  className,\n  label,\n  description,\n  errorMessage,\n  ...props\n}) => {\n  const ref = React.useRef<HTMLTextAreaElement>(null);\n  const [height, setHeight] = React.useState<string>('auto');\n\n  const { inputProps } = useTextField<'textarea'>(\n    {\n      ...props,\n      label,\n      description,\n      errorMessage,\n      isDisabled,\n      isInvalid,\n      inputElementType: 'textarea',\n      onChange: (value) => {\n        props.onChange?.(value);\n        const textarea = ref.current;\n        if (textarea) {\n          if (textarea) {\n            textarea.style.height = 'auto';\n            setHeight(`${textarea.scrollHeight}px`);\n          }\n        }\n      },\n    },\n    ref,\n  );\n  const [inFocus, setInFocus] = React.useState(false);\n  const { focusProps } = useFocus({\n    onFocusChange: (isFocused) => setInFocus(isFocused),\n  });\n\n  const isExpanded = Boolean(\n    inFocus || props.placeholder || ref.current?.value || props.value,\n  );\n\n  return (\n    <Field\n      className={cn(textAreaFieldVariants(), className)}\n      left={left}\n      right={right}\n      isInvalid={isInvalid}\n      isDisabled={isDisabled}\n      label={label}\n      description={description}\n      errorMessage={errorMessage}\n      fieldClassName={fieldClassName}\n    >\n      {(fieldProps) => (\n        <motion.textarea\n          {...(mergeProps(\n            props as Props<'textarea'>,\n            fieldProps,\n            focusProps,\n            inputProps,\n          ) as React.ComponentProps<typeof motion.textarea>)}\n          animate={{\n            height: isExpanded ? height : 0,\n            opacity: isExpanded ? 1 : 0,\n          }}\n          transition={{\n            duration: materialDuration.asMotion('medium-1'),\n            ease: materialEasing['standard'],\n          }}\n          className={cn(textAreaFieldVariants.textArea())}\n          rows={1}\n          ref={ref}\n        />\n      )}\n    </Field>\n  );\n};\n",
      "type": "components"
    },
    {
      "name": "input/text-area-field/text-area-field.types.ts",
      "content": "import type { AriaProps } from '@/types';\nimport type { VariantProps } from 'class-variance-authority';\nimport type { AriaTextFieldProps } from 'react-aria';\nimport type { FieldProps } from '../field';\nimport type { textAreaFieldVariants } from './text-area-field.variants';\n\nexport type TextAreaFieldProps = Omit<\n  AriaProps<'label', AriaTextFieldProps<HTMLTextAreaElement>, 'errorMessage'>,\n  'children'\n> &\n  Omit<FieldProps, 'children' | 'isDisabled' | 'isExpanded' | 'isInvalid'> &\n  VariantProps<typeof textAreaFieldVariants>;\n",
      "type": "components"
    },
    {
      "name": "input/text-area-field/text-area-field.variants.ts",
      "content": "import { cva } from '@/utility';\n\nconst variants = cva({\n  name: 'text-area-field group/text-area-field',\n});\n\nconst textAreaVariants = cva({\n  name: 'text-area-field--text-area',\n  overflow: 'overflow-y-auto overflow-x-hidden',\n  transitions: 'transition easing-standard duration-medium-1',\n  borders: 'outline-none border-transparent',\n  background: 'bg-transparent',\n  typography: [\n    'text-on-surface placeholder:text-on-surface-variant',\n    'group-is-disabled/field:text-on-surface/38',\n  ],\n  box: 'max-h-[min(var(--spacing-96),60vh)]',\n  other: 'resize-none',\n});\n\nexport const textAreaFieldVariants = Object.assign(variants, {\n  textArea: textAreaVariants,\n});\n",
      "type": "components"
    },
    {
      "name": "input/text-field/index.ts",
      "content": "export * from './text-field';\nexport * from './text-field.types';\nexport * from './text-field.variants';\n",
      "type": "components"
    },
    {
      "name": "input/text-field/text-field.tsx",
      "content": "import { materialDuration, materialEasing } from '@/config';\nimport type { Props } from '@/types';\nimport { cn, mergeProps } from '@/utility';\nimport { motion } from 'motion/react';\nimport React from 'react';\nimport { useFocus, useTextField } from 'react-aria';\nimport { Field } from '../field';\nimport type { TextFieldProps } from './text-field.types';\nimport { textFieldVariants } from './text-field.variants';\n\nexport const TextField: React.FC<TextFieldProps> = ({\n  left,\n  right,\n  isDisabled,\n  isInvalid,\n  fieldClassName,\n  className,\n  label,\n  description,\n  errorMessage,\n  ...props\n}) => {\n  const ref = React.useRef<HTMLInputElement>(null);\n  const { inputProps } = useTextField(\n    { ...props, label, description, errorMessage, isDisabled, isInvalid },\n    ref,\n  );\n  const [inFocus, setInFocus] = React.useState(false);\n  const { focusProps } = useFocus({\n    onFocusChange: (isFocused) => setInFocus(isFocused),\n  });\n\n  const isExpanded = Boolean(\n    inFocus || props.placeholder || ref.current?.value || props.value,\n  );\n\n  return (\n    <Field\n      className={cn(textFieldVariants(), className)}\n      left={left}\n      right={right}\n      isInvalid={isInvalid}\n      isDisabled={isDisabled}\n      label={label}\n      description={description}\n      errorMessage={errorMessage}\n      fieldClassName={fieldClassName}\n    >\n      {(fieldProps) => (\n        <motion.input\n          {...(mergeProps(\n            props as Props<'input'>,\n            fieldProps,\n            focusProps,\n            inputProps,\n          ) as React.ComponentProps<typeof motion.input>)}\n          animate={{\n            height: isExpanded ? 'auto' : 0,\n            opacity: isExpanded ? 1 : 0,\n          }}\n          transition={{\n            duration: materialDuration.asMotion('medium-1'),\n            ease: materialEasing['standard'],\n          }}\n          className={cn(textFieldVariants.input())}\n          ref={ref}\n        />\n      )}\n    </Field>\n  );\n};\n",
      "type": "components"
    },
    {
      "name": "input/text-field/text-field.types.ts",
      "content": "import type { AriaProps } from '@/types';\nimport type { VariantProps } from 'class-variance-authority';\nimport type { AriaTextFieldProps } from 'react-aria';\nimport type { FieldProps } from '../field';\nimport type { textFieldVariants } from './text-field.variants';\n\nexport type TextFieldProps = Omit<\n  AriaProps<'label', AriaTextFieldProps, 'errorMessage'>,\n  'children'\n> &\n  Omit<FieldProps, 'children' | 'isDisabled' | 'isExpanded' | 'isInvalid'> &\n  VariantProps<typeof textFieldVariants>;\n",
      "type": "components"
    },
    {
      "name": "input/text-field/text-field.variants.ts",
      "content": "import { cva } from '@/utility';\n\nconst variants = cva({\n  name: 'text-field group/text-field',\n});\n\nconst inputVariants = cva({\n  name: 'text-field--input',\n  overflow: 'overflow-hidden',\n  transitions: 'transition easing-standard duration-medium-1',\n  borders: 'outline-none border-transparent',\n  background: 'bg-transparent',\n  typography: [\n    'text-on-surface placeholder:text-on-surface-variant',\n    'group-is-disabled/field:text-on-surface/38',\n  ],\n});\n\nexport const textFieldVariants = Object.assign(variants, {\n  input: inputVariants,\n});\n",
      "type": "components"
    },
    {
      "name": "selection/checkbox/checkbox.tsx",
      "content": "import { materialDuration, materialEasing } from '@/config';\nimport { useInteractionsWithRipple, useMergedRefs } from '@/hooks';\nimport { cn } from '@/utility';\nimport { IconCheck, IconMinus } from '@tabler/icons-react';\nimport { AnimatePresence, motion } from 'motion/react';\nimport React from 'react';\nimport { useCheckbox } from 'react-aria';\nimport { useToggleState } from 'react-stately';\nimport type { CheckboxProps } from './checkbox.types';\nimport { checkboxVariants } from './checkbox.variants';\n\nexport const Checkbox = React.forwardRef<HTMLInputElement, CheckboxProps>(\n  (\n    {\n      color,\n      className,\n      children,\n      isReadOnly,\n      isRequired,\n      isIndeterminate = false,\n      ...props\n    },\n    forwardedRef,\n  ) => {\n    const ref = useMergedRefs(forwardedRef);\n    const state = useToggleState(props);\n\n    const { inputProps, labelProps, isInvalid, isSelected, isDisabled } =\n      useCheckbox(\n        {\n          ...props,\n          isIndeterminate,\n          isReadOnly,\n          isRequired,\n        },\n        state,\n        ref,\n      );\n\n    const { interactionsProps, rippleProps } =\n      useInteractionsWithRipple<'label'>({ ...labelProps, isDisabled });\n\n    return (\n      <label\n        {...interactionsProps}\n        className={cn(\n          checkboxVariants({ color: isInvalid ? 'critical' : color }),\n          className,\n        )}\n        data-is-selected={isSelected}\n        data-is-indeterminate={isIndeterminate}\n      >\n        <input {...inputProps} className=\"sr-only\" ref={ref} />\n        <span\n          {...rippleProps}\n          aria-hidden={true}\n          className={cn(\n            checkboxVariants.markWrapper({\n              color: isInvalid ? 'critical' : color,\n            }),\n          )}\n        >\n          <span\n            className={cn(\n              checkboxVariants.mark({\n                color: isInvalid ? 'critical' : color,\n                isSelected,\n                isIndeterminate,\n              }),\n            )}\n          >\n            <AnimatePresence mode=\"wait\">\n              {isSelected ? (\n                <motion.span\n                  key=\"selected\"\n                  initial={{ width: 0, height: 0 }}\n                  animate={{\n                    opacity: 1,\n                    width: 'var(--spacing-4h)',\n                    height: 'var(--spacing-4h)',\n                  }}\n                  exit={{ width: 0, height: 0 }}\n                  transition={{\n                    duration: materialDuration.asMotion('medium-1'),\n                    ease: materialEasing['standard'],\n                  }}\n                  className={cn(checkboxVariants.icon())}\n                >\n                  <IconCheck />\n                </motion.span>\n              ) : null}\n              {!isSelected && isIndeterminate ? (\n                <motion.span\n                  key=\"indeterminate\"\n                  initial={{ width: 0, height: 0 }}\n                  animate={{\n                    opacity: 1,\n                    width: 'var(--spacing-4h)',\n                    height: 'var(--spacing-4h)',\n                  }}\n                  exit={{ width: 0, height: 0 }}\n                  transition={{\n                    duration: materialDuration.asMotion('medium-1'),\n                    ease: materialEasing['standard'],\n                  }}\n                  className={cn(checkboxVariants.icon())}\n                >\n                  <IconMinus />\n                </motion.span>\n              ) : null}\n            </AnimatePresence>\n          </span>\n        </span>\n        {children && (\n          <span className={cn(checkboxVariants.label())}>{children}</span>\n        )}\n      </label>\n    );\n  },\n);\nCheckbox.displayName = 'Checkbox';\n",
      "type": "components"
    },
    {
      "name": "selection/checkbox/checkbox.types.ts",
      "content": "import type { AriaProps } from '@/types';\nimport type { VariantProps } from 'class-variance-authority';\nimport type { AriaCheckboxProps } from 'react-aria';\nimport type { checkboxVariants } from './checkbox.variants';\n\nexport type CheckboxProps = AriaProps<'input', AriaCheckboxProps> &\n  VariantProps<typeof checkboxVariants>;\n",
      "type": "components"
    },
    {
      "name": "selection/checkbox/checkbox.variants.ts",
      "content": "import { cva } from '@/utility';\n\nconst variants = cva(\n  {\n    name: 'checkbox group/checkbox',\n    layout: 'relative',\n    flex: 'inline-flex items-center',\n    spacing: 'gap-xs',\n    states: ['is-disabled:pointer-events-none'],\n  },\n  {\n    variants: {\n      color: {\n        primary: {},\n        secondary: {},\n        info: {},\n        success: {},\n        caution: {},\n        critical: {},\n      },\n    },\n    defaultVariants: {\n      color: 'primary',\n    },\n  },\n);\n\nconst markWrapperVariants = cva(\n  {\n    name: 'checkbox--mark-wrapper',\n    layout: 'relative',\n    flex: 'inline-flex items-center justify-center',\n    transitions: 'transition easing-standard duration-medium-1',\n    background: 'bg-transparent',\n    box: 'size-10 rounded-full',\n    overflow: 'overflow-hidden',\n    states: [\n      'group-is-disabled/checkbox:state-transparent',\n      'group-is-hovered/checkbox:state-hover',\n      'group-in-focus-visible/checkbox:state-focus',\n      'group-is-pressed/checkbox:state-press',\n    ],\n    ripple: ['ripple-wrapper:inset-0', 'ripple-wrapper:rounded-full'],\n  },\n  {\n    variants: {\n      color: {\n        primary: {\n          ripple: 'ripple:bg-primary',\n          states: 'state-primary',\n        },\n        secondary: {\n          ripple: 'ripple:bg-secondary',\n          states: 'state-secondary',\n        },\n        info: {\n          ripple: 'ripple:bg-info',\n          states: 'state-info',\n        },\n        success: {\n          ripple: 'ripple:bg-success',\n          states: 'state-success',\n        },\n        caution: {\n          ripple: 'ripple:bg-caution',\n          states: 'state-caution',\n        },\n        critical: {\n          ripple: 'ripple:bg-critical',\n          states: 'state-critical',\n        },\n      },\n    },\n    defaultVariants: {\n      color: 'primary',\n    },\n  },\n);\n\nconst markVariants = cva(\n  {\n    name: 'checkbox--mark',\n    layout: 'relative',\n    flex: 'inline-flex items-center justify-center',\n    transitions: 'transition easing-standard duration-medium-1',\n    box: 'size-4.5 rounded-3xs',\n    overflow: 'overflow-hidden',\n    borders: 'border-2',\n  },\n  {\n    variants: {\n      color: {\n        primary: {},\n        secondary: {},\n        info: {},\n        success: {},\n        caution: {},\n        critical: {},\n      },\n      isSelected: {\n        true: {\n          borders: 'border-transparent',\n        },\n        false: {},\n      },\n      isIndeterminate: {\n        true: {\n          borders: 'border-transparent',\n        },\n        false: {},\n      },\n    },\n    defaultVariants: {\n      color: 'primary',\n      isSelected: false,\n      isIndeterminate: false,\n    },\n    compoundVariants: [\n      {\n        isSelected: false,\n        isIndeterminate: false,\n        className: {\n          borders: [\n            'border-outline',\n            'group-is-disabled/checkbox:border-on-surface/38',\n          ],\n        },\n      },\n      {\n        isSelected: true,\n        className: {\n          typography: 'group-is-disabled/checkbox:text-surface',\n          background: ['group-is-disabled/checkbox:bg-on-surface/38'],\n        },\n      },\n      {\n        isIndeterminate: true,\n        className: {\n          typography: 'group-is-disabled/checkbox:text-surface',\n          background: ['group-is-disabled/checkbox:bg-on-surface/38'],\n        },\n      },\n      {\n        isSelected: true,\n        color: 'primary',\n        className: {\n          typography: 'text-on-primary',\n          background: 'bg-primary',\n        },\n      },\n      {\n        isIndeterminate: true,\n        color: 'primary',\n        className: {\n          typography: 'text-on-primary',\n          background: 'bg-primary',\n        },\n      },\n      {\n        isSelected: true,\n        color: 'secondary',\n        className: {\n          typography: 'text-on-secondary',\n          background: 'bg-secondary',\n        },\n      },\n      {\n        isIndeterminate: true,\n        color: 'secondary',\n        className: {\n          typography: 'text-on-secondary',\n          background: 'bg-secondary',\n        },\n      },\n      {\n        isSelected: true,\n        color: 'info',\n        className: {\n          typography: 'text-on-info',\n          background: 'bg-info',\n        },\n      },\n      {\n        isIndeterminate: true,\n        color: 'info',\n        className: {\n          typography: 'text-on-info',\n          background: 'bg-info',\n        },\n      },\n      {\n        isSelected: true,\n        color: 'success',\n        className: {\n          typography: 'text-on-success',\n          background: 'bg-success',\n        },\n      },\n      {\n        isIndeterminate: true,\n        color: 'success',\n        className: {\n          typography: 'text-on-success',\n          background: 'bg-success',\n        },\n      },\n      {\n        isSelected: true,\n        color: 'caution',\n        className: {\n          typography: 'text-on-caution',\n          background: 'bg-caution',\n        },\n      },\n      {\n        isIndeterminate: true,\n        color: 'caution',\n        className: {\n          typography: 'text-on-caution',\n          background: 'bg-caution',\n        },\n      },\n      {\n        isSelected: true,\n        color: 'critical',\n        className: {\n          typography: 'text-on-critical',\n          background: 'bg-critical',\n        },\n      },\n      {\n        isIndeterminate: true,\n        color: 'critical',\n        className: {\n          typography: 'text-on-critical',\n          background: 'bg-critical',\n        },\n      },\n    ],\n  },\n);\n\nconst labelVariants = cva({\n  name: 'checkbox--label',\n  typography: 'typography-label-large',\n  transitions: 'transition easing-standard duration-medium-1',\n});\n\nconst iconVariants = cva({\n  name: 'checkbox--icon',\n  layout: 'absolute inline-block',\n  transitions: 'transition easing-standard duration-medium-1',\n  overflow: 'overflow-hidden empty:hidden',\n  other: '[&>*]:absolute [&>*]:inset-0 [&>*]:size-full',\n});\n\nexport const checkboxVariants = Object.assign(variants, {\n  markWrapper: markWrapperVariants,\n  mark: markVariants,\n  label: labelVariants,\n  icon: iconVariants,\n});\n",
      "type": "components"
    },
    {
      "name": "selection/checkbox/compound/checkbox-group-item.tsx",
      "content": "import { materialDuration, materialEasing } from '@/config';\nimport { useInteractionsWithRipple, useMergedRefs } from '@/hooks';\nimport { cn } from '@/utility';\nimport { IconCheck, IconMinus } from '@tabler/icons-react';\nimport { AnimatePresence, motion } from 'motion/react';\nimport React from 'react';\nimport { useCheckboxGroupItem } from 'react-aria';\nimport { useCheckboxGroupContext } from '../context';\nimport type { CheckboxGroupItemProps } from './checkbox-group-item.types';\nimport { checkboxGroupVariants } from './checkbox-group.variants';\n\nexport const CheckboxGroupItem = React.forwardRef<\n  HTMLInputElement,\n  CheckboxGroupItemProps\n>(\n  (\n    { color, className, children, isIndeterminate = false, ...props },\n    forwardedRef,\n  ) => {\n    const ref = useMergedRefs(forwardedRef);\n    const state = useCheckboxGroupContext();\n    const { inputProps, labelProps, isSelected, isInvalid, isDisabled } =\n      useCheckboxGroupItem({ ...props, isIndeterminate }, state, ref);\n\n    const { interactionsProps, rippleProps } =\n      useInteractionsWithRipple<'label'>({ ...labelProps, isDisabled });\n\n    return (\n      <label\n        {...interactionsProps}\n        className={cn(\n          checkboxGroupVariants.item({ color: isInvalid ? 'critical' : color }),\n          className,\n        )}\n        data-is-selected={isSelected}\n        data-is-indeterminate={isIndeterminate}\n      >\n        <input {...inputProps} className=\"sr-only\" ref={ref} />\n        <span\n          {...rippleProps}\n          aria-hidden={true}\n          className={cn(\n            checkboxGroupVariants.item.markWrapper({\n              color: isInvalid ? 'critical' : color,\n            }),\n          )}\n        >\n          <span\n            className={cn(\n              checkboxGroupVariants.item.mark({\n                color: isInvalid ? 'critical' : color,\n                isSelected,\n                isIndeterminate,\n              }),\n            )}\n          >\n            <AnimatePresence mode=\"wait\">\n              {isSelected ? (\n                <motion.span\n                  key=\"selected\"\n                  initial={{ width: 0, height: 0 }}\n                  animate={{\n                    opacity: 1,\n                    width: 'var(--spacing-4h)',\n                    height: 'var(--spacing-4h)',\n                  }}\n                  exit={{ width: 0, height: 0 }}\n                  transition={{\n                    duration: materialDuration.asMotion('medium-1'),\n                    ease: materialEasing['standard'],\n                  }}\n                  className={cn(checkboxGroupVariants.item.icon())}\n                >\n                  <IconCheck />\n                </motion.span>\n              ) : null}\n              {!isSelected && isIndeterminate ? (\n                <motion.span\n                  key=\"indeterminate\"\n                  initial={{ width: 0, height: 0 }}\n                  animate={{\n                    opacity: 1,\n                    width: 'var(--spacing-4h)',\n                    height: 'var(--spacing-4h)',\n                  }}\n                  exit={{ width: 0, height: 0 }}\n                  transition={{\n                    duration: materialDuration.asMotion('medium-1'),\n                    ease: materialEasing['standard'],\n                  }}\n                  className={cn(checkboxGroupVariants.item.icon())}\n                >\n                  <IconMinus />\n                </motion.span>\n              ) : null}\n            </AnimatePresence>\n          </span>\n        </span>\n        {children && (\n          <span className={cn(checkboxGroupVariants.item.label())}>\n            {children}\n          </span>\n        )}\n      </label>\n    );\n  },\n);\nCheckboxGroupItem.displayName = 'CheckboxGroupItem';\n",
      "type": "components"
    },
    {
      "name": "selection/checkbox/compound/checkbox-group-item.types.ts",
      "content": "import type { AriaProps } from '@/types';\nimport type { VariantProps } from 'class-variance-authority';\nimport type { AriaCheckboxGroupItemProps } from 'react-aria';\nimport type { checkboxGroupVariants } from './checkbox-group.variants';\n\nexport type CheckboxGroupItemProps = AriaProps<\n  'input',\n  AriaCheckboxGroupItemProps\n> &\n  VariantProps<typeof checkboxGroupVariants.item>;\n",
      "type": "components"
    },
    {
      "name": "selection/checkbox/compound/checkbox-group.tsx",
      "content": "import { useMergedRefs } from '@/hooks';\nimport { cn } from '@/utility';\nimport React from 'react';\nimport { useCheckboxGroup } from 'react-aria';\nimport { useCheckboxGroupState } from 'react-stately';\nimport { CheckboxGroupContextProvider } from '../context';\nimport type { CheckboxGroupProps } from './checkbox-group.types';\nimport { checkboxGroupVariants } from './checkbox-group.variants';\n\nexport const CheckboxGroup = React.forwardRef<HTMLElement, CheckboxGroupProps>(\n  ({ className, children, ...props }, forwardedRef) => {\n    const ref = useMergedRefs(forwardedRef);\n\n    const state = useCheckboxGroupState(props);\n    const {\n      groupProps,\n      labelProps,\n      descriptionProps,\n      errorMessageProps,\n      isInvalid,\n      validationErrors,\n    } = useCheckboxGroup(props, state);\n\n    return (\n      <section\n        {...groupProps}\n        ref={ref}\n        className={cn(checkboxGroupVariants(), className)}\n      >\n        {props.label && (\n          <span {...labelProps} className={cn(checkboxGroupVariants.label())}>\n            {props.label}\n          </span>\n        )}\n        <CheckboxGroupContextProvider state={state}>\n          {children}\n        </CheckboxGroupContextProvider>\n        {props.description && (\n          <p\n            {...descriptionProps}\n            className={cn(checkboxGroupVariants.description())}\n          >\n            {props.description}\n          </p>\n        )}\n        {isInvalid && validationErrors.join(' ') && (\n          <p\n            {...errorMessageProps}\n            className={cn(checkboxGroupVariants.errorMessage())}\n          >\n            {validationErrors.join(' ')}\n          </p>\n        )}\n      </section>\n    );\n  },\n);\nCheckboxGroup.displayName = 'CheckboxGroup';\n",
      "type": "components"
    },
    {
      "name": "selection/checkbox/compound/checkbox-group.types.ts",
      "content": "import type { AriaProps } from '@/types';\nimport type { VariantProps } from 'class-variance-authority';\nimport type { AriaCheckboxGroupProps } from 'react-aria';\nimport type { checkboxGroupVariants } from './checkbox-group.variants';\n\nexport type CheckboxGroupProps = AriaProps<'section', AriaCheckboxGroupProps> &\n  VariantProps<typeof checkboxGroupVariants>;\n",
      "type": "components"
    },
    {
      "name": "selection/checkbox/compound/checkbox-group.variants.ts",
      "content": "import { cva } from '@/utility';\nimport { checkboxVariants } from '../checkbox.variants';\n\nconst variants = cva({\n  name: 'checkbox-group group/checkbox-group',\n  flex: 'inline-flex flex-col gap-2xs',\n});\n\nconst labelVariants = cva({\n  name: 'checkbox-group--label',\n  typography: 'typography-label-large',\n});\n\nconst descriptionVariants = cva({\n  name: 'checkbox-group--description',\n  typography: 'typography-body-small text-secondary',\n});\n\nconst errorMessageVariants = cva({\n  name: 'checkbox-group--error-message',\n  typography: 'typography-body-small text-critical',\n});\n\nexport const checkboxGroupVariants = Object.assign(variants, {\n  label: labelVariants,\n  description: descriptionVariants,\n  errorMessage: errorMessageVariants,\n  item: checkboxVariants,\n});\n",
      "type": "components"
    },
    {
      "name": "selection/checkbox/compound/index.ts",
      "content": "export * from './checkbox-group';\nexport * from './checkbox-group-item';\nexport * from './checkbox-group-item.types';\nexport * from './checkbox-group.types';\nexport * from './checkbox-group.variants';\n",
      "type": "components"
    },
    {
      "name": "selection/checkbox/context/checkbox-group.context.tsx",
      "content": "import React from 'react';\nimport type { CheckboxGroupState } from 'react-stately';\n\nconst CheckboxGroupContext = React.createContext<CheckboxGroupState | null>(\n  null,\n);\n\nexport const useCheckboxGroupContext = () => {\n  const value = React.useContext(CheckboxGroupContext);\n  if (!value)\n    throw new Error(\n      'This component must be used within a <CheckboxGroup> component',\n    );\n  return value;\n};\n\nexport const CheckboxGroupContextProvider: React.FC<\n  React.PropsWithChildren<{ state: CheckboxGroupState }>\n> = ({ state, children }) => {\n  return (\n    <CheckboxGroupContext.Provider value={state}>\n      {children}\n    </CheckboxGroupContext.Provider>\n  );\n};\n",
      "type": "components"
    },
    {
      "name": "selection/checkbox/context/index.ts",
      "content": "export * from './checkbox-group.context';\n",
      "type": "components"
    },
    {
      "name": "selection/checkbox/index.ts",
      "content": "export * from './checkbox';\nexport * from './checkbox.types';\nexport * from './checkbox.variants';\nexport * from './compound';\n",
      "type": "components"
    },
    {
      "name": "selection/index.ts",
      "content": "export * from './checkbox';\nexport * from './menu';\nexport * from './radio';\nexport * from './slider';\nexport * from './switch';\n",
      "type": "components"
    },
    {
      "name": "selection/menu/compound/index.ts",
      "content": "export * from './menu-content';\nexport * from './menu-item';\nexport * from './menu-item-left';\nexport * from './menu-item-right';\nexport * from './menu-section';\nexport * from './menu-trigger';\n",
      "type": "components"
    },
    {
      "name": "selection/menu/compound/menu-content.tsx",
      "content": "import type { PopoverContentProps } from '@/components/containment';\nimport { PopoverContent } from '@/components/containment';\nimport { cn } from '@/utility';\nimport type { VariantProps } from 'class-variance-authority';\nimport React from 'react';\nimport type { AriaMenuProps } from 'react-aria';\nimport { useMenu } from 'react-aria';\nimport { useTreeState } from 'react-stately';\nimport { useMenuSetContext } from '../context';\nimport type { Item } from '../internal';\nimport { InternalMenuItem, InternalMenuSection } from '../internal';\nimport { menuVariants } from '../menu.variants';\n\nexport type MenuContentProps = AriaMenuProps<Item> &\n  VariantProps<typeof menuVariants> &\n  Pick<PopoverContentProps, 'position' | 'className'> & {\n    checkIcon?: React.ReactNode;\n  };\n\nexport const MenuContent: React.FC<MenuContentProps> = ({\n  position = 'bottom',\n  className,\n  checkIcon,\n  ...props\n}) => {\n  const ref = React.useRef<HTMLUListElement>(null);\n  const state = useTreeState(props);\n  // const [{ triggerMenuProps }] = useMenuContext();\n  const setState = useMenuSetContext();\n\n  const { menuProps } = useMenu({ ...props }, state, ref);\n\n  React.useEffect(() => {\n    setState((p) => ({\n      ...p,\n      state,\n    }));\n\n    return () => setState((p) => ({ ...p, state: undefined }));\n  }, [setState, state]);\n\n  return (\n    <PopoverContent\n      position={position}\n      className={cn(menuVariants(), className)}\n    >\n      <ul {...menuProps} className={cn(menuVariants.list())} ref={ref}>\n        {state &&\n          [...state.collection].map((item) =>\n            item.type === 'section' ? (\n              <InternalMenuSection\n                key={item.key}\n                section={item}\n                state={state}\n              />\n            ) : (\n              <InternalMenuItem\n                key={item.key}\n                checkIcon={checkIcon}\n                item={item}\n                state={state}\n              />\n            ),\n          )}\n      </ul>\n    </PopoverContent>\n  );\n};\n",
      "type": "components"
    },
    {
      "name": "selection/menu/compound/menu-item-left.tsx",
      "content": "import React from 'react';\nimport { useMenuItemContext } from '../context';\n\nexport const MenuItemLeft: React.FC<React.PropsWithChildren> = ({\n  children,\n}) => {\n  const [, setState] = useMenuItemContext();\n\n  React.useEffect(() => {\n    setState((prev) => ({\n      ...prev,\n      left: children,\n    }));\n\n    return () => {\n      setState((prev) => ({ ...prev, left: null }));\n    };\n  }, [children, setState]);\n\n  return null;\n};\n",
      "type": "components"
    },
    {
      "name": "selection/menu/compound/menu-item-right.tsx",
      "content": "import React from 'react';\nimport { useMenuItemContext } from '../context';\n\nexport const MenuItemRight: React.FC<React.PropsWithChildren> = ({\n  children,\n}) => {\n  const [, setState] = useMenuItemContext();\n\n  React.useEffect(() => {\n    setState((prev) => ({\n      ...prev,\n      right: children,\n    }));\n\n    return () => {\n      setState((prev) => ({ ...prev, right: null }));\n    };\n  }, [children, setState]);\n\n  return null;\n};\n",
      "type": "components"
    },
    {
      "name": "selection/menu/compound/menu-item.tsx",
      "content": "import type { ItemProps } from 'react-stately';\nimport { Item } from 'react-stately';\nimport type { Item as InternalItem } from '../internal';\n\nexport const MenuItem = Item as (\n  props: ItemProps<InternalItem>,\n) => React.JSX.Element;\n",
      "type": "components"
    },
    {
      "name": "selection/menu/compound/menu-section.tsx",
      "content": "import type { SectionProps } from 'react-stately';\nimport { Section } from 'react-stately';\nimport type { Item } from '../internal';\n\nexport const MenuSection = Section as (\n  props: SectionProps<Item>,\n) => React.JSX.Element;\n",
      "type": "components"
    },
    {
      "name": "selection/menu/compound/menu-trigger.tsx",
      "content": "import type { PopoverTriggerProps } from '@/components/containment';\nimport { PopoverTrigger } from '@/components/containment';\nimport { useMergedRefs } from '@/hooks';\nimport { mergeProps } from '@/utility';\nimport React from 'react';\nimport type { AriaMenuTriggerProps } from 'react-aria';\nimport { useMenuTrigger } from 'react-aria';\nimport { useMenuTriggerState } from 'react-stately';\nimport { useMenuSetContext } from '../context';\nimport type { Item } from '../internal';\n\nexport type MenuTriggerProps = AriaMenuTriggerProps & PopoverTriggerProps;\n\nexport const MenuTrigger = React.forwardRef<\n  HTMLButtonElement,\n  MenuTriggerProps\n>(({ type, trigger, isDisabled, children, ...props }, forwardedRef) => {\n  const ref = useMergedRefs(forwardedRef);\n  const setState = useMenuSetContext();\n\n  const state = useMenuTriggerState(props);\n  const { menuTriggerProps, menuProps } = useMenuTrigger<Item>(\n    { type, trigger, isDisabled },\n    state,\n    ref,\n  );\n\n  React.useEffect(() => {\n    setState((p) => ({\n      ...p,\n      triggerMenuProps: menuProps,\n    }));\n\n    return () => setState((p) => ({ ...p, triggerMenuProps: undefined }));\n  }, [setState, state, menuProps]);\n\n  return (\n    <PopoverTrigger {...mergeProps(props, menuTriggerProps)} ref={ref}>\n      {children}\n    </PopoverTrigger>\n  );\n});\nMenuTrigger.displayName = 'MenuTrigger';\n",
      "type": "components"
    },
    {
      "name": "selection/menu/context/index.ts",
      "content": "export * from './menu-item.context';\nexport * from './menu.context';\n",
      "type": "components"
    },
    {
      "name": "selection/menu/context/menu-item.context.tsx",
      "content": "import type { ContextState } from '@/types';\nimport React from 'react';\n\nexport type MenuItemContextState = ContextState<{\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n}>;\n\nconst MenuItemContext = React.createContext<MenuItemContextState | null>(null);\n\nexport const useMenuItemContext = () => {\n  const value = React.useContext(MenuItemContext);\n  if (!value)\n    throw new Error(\n      'This component must be used within a <MenuItem> component',\n    );\n  return value;\n};\n\nexport const MenuItemContextProvider: React.FC<React.PropsWithChildren> = ({\n  children,\n}) => {\n  const state = React.useState<MenuItemContextState[0]>({});\n\n  return (\n    <MenuItemContext.Provider value={state}>\n      {children}\n    </MenuItemContext.Provider>\n  );\n};\n",
      "type": "components"
    },
    {
      "name": "selection/menu/context/menu.context.tsx",
      "content": "import { createContext } from '@/utility';\nimport type { AriaMenuOptions } from 'react-aria';\nimport type { TreeState } from 'react-stately';\nimport type { Item } from '../internal';\n\nexport type MenuContextState = {\n  state?: TreeState<Item>;\n  triggerMenuProps?: AriaMenuOptions<Item>;\n};\n\nconst { useStore, useSetStore, Provider } = createContext<MenuContextState>(\n  {},\n  {\n    storeName: 'Menu',\n  },\n);\n\nexport const MenuContextProvider = Provider;\n\nexport const useMenuContext = useStore;\n\nexport const useMenuSetContext = useSetStore;\n",
      "type": "components"
    },
    {
      "name": "selection/menu/index.ts",
      "content": "export * from './compound';\nexport * from './menu';\nexport * from './menu.types';\nexport * from './menu.variants';\n",
      "type": "components"
    },
    {
      "name": "selection/menu/internal/index.ts",
      "content": "export * from './internal-menu-item';\nexport * from './internal-menu-item-icon';\nexport * from './internal-menu-section';\nexport * from './item';\n",
      "type": "components"
    },
    {
      "name": "selection/menu/internal/internal-menu-item-icon.tsx",
      "content": "import { materialDuration, materialEasing } from '@/config';\nimport { cn, keyFromChildren } from '@/utility';\nimport type { VariantProps } from 'class-variance-authority';\nimport { AnimatePresence, motion } from 'motion/react';\nimport type React from 'react';\nimport { menuVariants } from '../menu.variants';\n\nexport const InternalMenuItemIcon: React.FC<\n  React.PropsWithChildren<{\n    className?: string;\n  }> &\n    VariantProps<typeof menuVariants.icon>\n> = ({ position, className, children }) => {\n  return (\n    <AnimatePresence mode=\"sync\">\n      {children && (\n        <motion.span\n          key={keyFromChildren(children)}\n          initial={{\n            width: 0,\n            height: 0,\n            opacity: 0,\n            marginRight: 0,\n            marginLeft: 0,\n          }}\n          animate={{\n            width: 'var(--spacing-6)',\n            height: 'var(--spacing-6)',\n            marginRight: position === 'left' ? 'var(--spacing-sm)' : 0,\n            marginLeft: position === 'right' ? 'var(--spacing-sm)' : 0,\n            opacity: 1,\n          }}\n          exit={{\n            width: 0,\n            height: 0,\n            opacity: 0,\n            marginRight: 0,\n            marginLeft: 0,\n          }}\n          transition={{\n            duration: materialDuration.asMotion('medium-1'),\n            ease: materialEasing['standard'],\n          }}\n          className={cn(menuVariants.icon({ position }), className)}\n        >\n          {children}\n        </motion.span>\n      )}\n    </AnimatePresence>\n  );\n};\n",
      "type": "components"
    },
    {
      "name": "selection/menu/internal/internal-menu-item.tsx",
      "content": "/** eslint-disable no-negated-condition */\nimport { useInteractionsWithRipple } from '@/hooks';\nimport type { Props } from '@/types';\nimport { cn, mergeProps, withProvider } from '@/utility';\nimport { IconCheck } from '@tabler/icons-react';\nimport React from 'react';\nimport { useMenuItem } from 'react-aria';\nimport type { Node, TreeState } from 'react-stately';\nimport { MenuItemContextProvider, useMenuItemContext } from '../context';\nimport { menuVariants } from '../menu.variants';\nimport { InternalMenuItemIcon } from './internal-menu-item-icon';\nimport type { Item } from './item';\n\nconst InternalMenuItemImpl: React.FC<{\n  item: Node<Item>;\n  state: TreeState<Item>;\n  checkIcon?: React.ReactNode;\n}> = ({ item, state, checkIcon }) => {\n  const ref = React.useRef<HTMLLIElement>(null);\n  const [{ left, right }] = useMenuItemContext();\n\n  const { menuItemProps, isSelected, isDisabled } = useMenuItem<Item>(\n    { key: item.key },\n    state,\n    ref,\n  );\n\n  const { interactionsProps, rippleProps } =\n    useInteractionsWithRipple<'button'>({\n      isDisabled: isDisabled,\n    });\n\n  return (\n    <li\n      {...(mergeProps(\n        menuItemProps,\n        interactionsProps,\n        rippleProps,\n      ) as Props<'li'>)}\n      ref={ref}\n      className={cn(menuVariants.item({ isSelected }))}\n      data-is-selected={isSelected ?? false}\n    >\n      <InternalMenuItemIcon position=\"left\" className=\"menu--icon-left\">\n        {isSelected\n          ? (checkIcon ?? <IconCheck key=\"menu--check-icon\" />)\n          : left}\n      </InternalMenuItemIcon>\n      <span className={cn(menuVariants.label())}>{item.rendered}</span>\n      <InternalMenuItemIcon position=\"right\" className=\"menu--icon-right\">\n        {right}\n      </InternalMenuItemIcon>\n    </li>\n  );\n};\n\nexport const InternalMenuItem = withProvider(\n  MenuItemContextProvider,\n  InternalMenuItemImpl,\n);\n",
      "type": "components"
    },
    {
      "name": "selection/menu/internal/internal-menu-section.tsx",
      "content": "import { Divider } from '@/components/containment';\nimport { cn } from '@/utility';\nimport type React from 'react';\nimport { useMenuSection } from 'react-aria';\nimport type { Node, TreeState } from 'react-stately';\nimport { menuVariants } from '../menu.variants';\nimport { InternalMenuItem } from './internal-menu-item';\nimport type { Item } from './item';\n\nexport const InternalMenuSection: React.FC<{\n  section: Node<Item>;\n  state: TreeState<Item>;\n}> = ({ section, state }) => {\n  const { itemProps, groupProps } = useMenuSection({\n    heading: section.rendered,\n    'aria-label': section['aria-label'],\n  });\n\n  return (\n    <>\n      {section.key !== state.collection.getFirstKey() && (\n        <Divider\n          orientation=\"horizontal\"\n          className={cn(menuVariants.divider())}\n        />\n      )}\n      <li {...itemProps}>\n        <ul\n          {...groupProps}\n          className={cn(menuVariants.list({ withScroll: true }))}\n        >\n          {[...section.childNodes].map((node) => (\n            <InternalMenuItem key={node.key} item={node} state={state} />\n          ))}\n        </ul>\n      </li>\n    </>\n  );\n};\n",
      "type": "components"
    },
    {
      "name": "selection/menu/internal/item.ts",
      "content": "import type React from 'react';\n\nexport type Item = {\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n  checkIcon?: React.ReactNode;\n};\n",
      "type": "components"
    },
    {
      "name": "selection/menu/menu.tsx",
      "content": "import { Popover } from '@/components/containment';\nimport { withProvider } from '@/utility';\nimport type React from 'react';\nimport { MenuContextProvider } from './context';\nimport type { MenuProps } from './menu.types';\n\nconst MenuImpl: React.FC<MenuProps> = ({ offset = 4, children, ...props }) => {\n  return (\n    <Popover {...props} offset={offset}>\n      {children}\n    </Popover>\n  );\n};\nMenuImpl.displayName = 'Menu';\n\nexport const Menu = withProvider(MenuContextProvider, MenuImpl);\n",
      "type": "components"
    },
    {
      "name": "selection/menu/menu.types.ts",
      "content": "import type { PopoverProps } from '@/components/containment';\n\nexport type MenuProps = PopoverProps;\n",
      "type": "components"
    },
    {
      "name": "selection/menu/menu.variants.ts",
      "content": "import { cva } from '@/utility';\n\nconst variants = cva({\n  name: 'menu group/menu',\n  layout: 'relative',\n  background: 'bg-surface-container',\n  effects: 'elevation-2',\n  borders: 'rounded-3xs',\n  spacing: 'py-xs',\n  overflow: 'overflow-y-auto overflow-x-hidden',\n  box: 'inline-grid min-w-28 max-w-72',\n});\n\nconst listVariants = cva(\n  {\n    name: 'menu--list',\n    layout: 'relative',\n    box: 'inline-grid w-full',\n  },\n  {\n    variants: {\n      withScroll: {\n        true: {\n          overflow: 'overflow-y-auto overflow-x-hidden',\n        },\n        false: {\n          overflow: 'overflow-hidden',\n        },\n      },\n    },\n    defaultVariants: {\n      withScroll: false,\n    },\n  },\n);\n\nconst itemVariants = cva(\n  {\n    name: 'menu--item group/menu--item',\n    layout: 'relative',\n    borders: 'outline-none border-transparent',\n    overflow: 'overflow-hidden',\n    flex: 'inline-flex items-center',\n    typography: ['typography-label-large', 'is-disabled:text-on-surface/38'],\n    box: 'h-12',\n    spacing: 'px-sm',\n    transitions: 'transition easing-standard duration-medium-1',\n    states: [\n      'is-disabled:state-transparent',\n      'is-disabled:pointer-events-none',\n      'is-hovered:state-hover',\n      'in-focus-visible:state-focus',\n      'is-pressed:state-press',\n    ],\n    ripple: 'ripple-wrapper:inset-0',\n    other: 'cursor-pointer',\n  },\n  {\n    variants: {\n      isSelected: {\n        true: {\n          background: ['bg-primary-container', 'is-disabled:bg-on-surface/8'],\n          typography: 'text-on-primary-container',\n          states: 'state-on-primary-container',\n          ripple: 'ripple:bg-on-primary-container',\n        },\n        false: {\n          background: 'bg-transparent',\n          typography: 'text-on-surface',\n          states: 'state-on-surface',\n          ripple: 'ripple:bg-primary',\n        },\n      },\n    },\n    defaultVariants: {\n      isSelected: false,\n    },\n  },\n);\n\nconst labelVariants = cva({\n  name: 'menu--label',\n  flex: 'inline-flex flex-1 items-center',\n  box: 'min-w-16',\n});\n\nconst iconVariants = cva(\n  {\n    name: 'menu--icon',\n    typography: [\n      'text-on-surface-variant',\n      'group-data-[is-selected=true]/menu--item:text-on-primary-container',\n      'group-is-disabled/menu--item:text-on-surface/38',\n    ],\n    layout: 'relative inline-block',\n    box: 'size-6',\n    overflow: 'overflow-hidden empty:hidden',\n    other: '[&>*]:absolute [&>*]:inset-0 [&>*]:size-full',\n  },\n  {\n    variants: {\n      position: {\n        left: {\n          box: 'mr-sm',\n        },\n        right: {\n          box: 'ml-sm',\n        },\n        none: {},\n      },\n    },\n    defaultVariants: {\n      position: 'none',\n    },\n  },\n);\n\nconst dividerVariants = cva({\n  name: 'menu--divider',\n  spacing: 'my-xs first:mt-0 last:mb-0',\n});\n\nexport const menuVariants = Object.assign(variants, {\n  list: listVariants,\n  item: itemVariants,\n  label: labelVariants,\n  icon: iconVariants,\n  divider: dividerVariants,\n});\n",
      "type": "components"
    },
    {
      "name": "selection/radio/compound/index.ts",
      "content": "export * from './radio-group';\nexport * from './radio-group.types';\nexport * from './radio-group.variants';\n",
      "type": "components"
    },
    {
      "name": "selection/radio/compound/radio-group.tsx",
      "content": "import { useMergedRefs } from '@/hooks';\nimport { cn } from '@/utility';\nimport React from 'react';\nimport { useRadioGroup } from 'react-aria';\nimport { useRadioGroupState } from 'react-stately';\nimport { RadioGroupContextProvider } from '../context';\nimport type { RadioGroupProps } from './radio-group.types';\nimport { radioGroupVariants } from './radio-group.variants';\n\nexport const RadioGroup = React.forwardRef<HTMLElement, RadioGroupProps>(\n  ({ className, children, ...props }, forwardedRef) => {\n    const ref = useMergedRefs(forwardedRef);\n\n    const state = useRadioGroupState(props);\n    const {\n      radioGroupProps,\n      labelProps,\n      descriptionProps,\n      errorMessageProps,\n      isInvalid,\n      validationErrors,\n    } = useRadioGroup(props, state);\n\n    return (\n      <section\n        {...radioGroupProps}\n        ref={ref}\n        className={cn(radioGroupVariants(), className)}\n      >\n        {props.label && (\n          <span {...labelProps} className={cn(radioGroupVariants.label())}>\n            {props.label}\n          </span>\n        )}\n        <RadioGroupContextProvider state={state}>\n          {children}\n        </RadioGroupContextProvider>\n        {props.description && (\n          <p\n            {...descriptionProps}\n            className={cn(radioGroupVariants.description())}\n          >\n            {props.description}\n          </p>\n        )}\n        {isInvalid && validationErrors.join(' ') && (\n          <p\n            {...errorMessageProps}\n            className={cn(radioGroupVariants.errorMessage())}\n          >\n            {validationErrors.join(' ')}\n          </p>\n        )}\n      </section>\n    );\n  },\n);\nRadioGroup.displayName = 'RadioGroup';\n",
      "type": "components"
    },
    {
      "name": "selection/radio/compound/radio-group.types.ts",
      "content": "import type { AriaProps } from '@/types';\nimport type { VariantProps } from 'class-variance-authority';\nimport type { AriaRadioGroupProps } from 'react-aria';\nimport type { radioGroupVariants } from './radio-group.variants';\n\nexport type RadioGroupProps = AriaProps<'section', AriaRadioGroupProps> &\n  VariantProps<typeof radioGroupVariants>;\n",
      "type": "components"
    },
    {
      "name": "selection/radio/compound/radio-group.variants.ts",
      "content": "import { cva } from '@/utility';\n\nconst variants = cva({\n  name: 'radio-group group/radio-group',\n  flex: 'inline-flex flex-col gap-2xs',\n});\n\nconst labelVariants = cva({\n  name: 'radio-group--label',\n  typography: 'typography-label-large',\n});\n\nconst descriptionVariants = cva({\n  name: 'radio-group--description',\n  typography: 'typography-body-small text-secondary',\n});\n\nconst errorMessageVariants = cva({\n  name: 'radio-group--error-message',\n  typography: 'typography-body-small text-critical',\n});\n\nexport const radioGroupVariants = Object.assign(variants, {\n  label: labelVariants,\n  description: descriptionVariants,\n  errorMessage: errorMessageVariants,\n});\n",
      "type": "components"
    },
    {
      "name": "selection/radio/context/index.ts",
      "content": "export * from './radio-group.context';\n",
      "type": "components"
    },
    {
      "name": "selection/radio/context/radio-group.context.tsx",
      "content": "import React from 'react';\nimport type { RadioGroupState } from 'react-stately';\n\nconst RadioGroupContext = React.createContext<RadioGroupState | null>(null);\n\nexport const useRadioGroupContext = () => {\n  const value = React.useContext(RadioGroupContext);\n  if (!value)\n    throw new Error(\n      'This component must be used within a <RadioGroup> component',\n    );\n  return value;\n};\n\nexport const RadioGroupContextProvider: React.FC<\n  React.PropsWithChildren<{ state: RadioGroupState }>\n> = ({ state, children }) => {\n  return (\n    <RadioGroupContext.Provider value={state}>\n      {children}\n    </RadioGroupContext.Provider>\n  );\n};\n",
      "type": "components"
    },
    {
      "name": "selection/radio/index.ts",
      "content": "export * from './compound';\nexport * from './radio';\nexport * from './radio.types';\nexport * from './radio.variants';\n",
      "type": "components"
    },
    {
      "name": "selection/radio/radio.tsx",
      "content": "import { materialDuration, materialEasing } from '@/config';\nimport { useInteractionsWithRipple, useMergedRefs } from '@/hooks';\nimport { cn } from '@/utility';\nimport { AnimatePresence, motion } from 'motion/react';\nimport React from 'react';\nimport { useRadio } from 'react-aria';\nimport { useRadioGroupContext } from './context';\nimport type { RadioProps } from './radio.types';\nimport { radioVariants } from './radio.variants';\n\nexport const Radio = React.forwardRef<HTMLInputElement, RadioProps>(\n  ({ color, className, children, ...props }, forwardedRef) => {\n    const ref = useMergedRefs(forwardedRef);\n    const state = useRadioGroupContext();\n    const { inputProps, labelProps, isSelected, isDisabled } = useRadio(\n      props,\n      state,\n      ref,\n    );\n\n    const { interactionsProps, rippleProps } =\n      useInteractionsWithRipple<'label'>({ ...labelProps, isDisabled });\n\n    return (\n      <label\n        {...interactionsProps}\n        className={cn(\n          radioVariants({ color: state.isInvalid ? 'critical' : color }),\n          className,\n        )}\n        data-is-selected={isSelected}\n      >\n        <input {...inputProps} className=\"sr-only\" ref={ref} />\n        <span\n          {...rippleProps}\n          aria-hidden={true}\n          className={cn(\n            radioVariants.markWrapper({\n              color: state.isInvalid ? 'critical' : color,\n            }),\n          )}\n        >\n          <span\n            className={cn(\n              radioVariants.mark({\n                color: state.isInvalid ? 'critical' : color,\n                isSelected,\n              }),\n            )}\n          >\n            <AnimatePresence mode=\"wait\">\n              {isSelected ? (\n                <motion.span\n                  initial={{ width: 0, height: 0 }}\n                  animate={{\n                    opacity: 1,\n                    width: 'var(--spacing-2-5)',\n                    height: 'var(--spacing-2-5)',\n                  }}\n                  exit={{ width: 0, height: 0 }}\n                  transition={{\n                    duration: materialDuration.asMotion('medium-1'),\n                    ease: materialEasing['standard'],\n                  }}\n                  className={cn(\n                    radioVariants.icon({\n                      color: state.isInvalid ? 'critical' : color,\n                    }),\n                  )}\n                />\n              ) : null}\n            </AnimatePresence>\n          </span>\n        </span>\n        {children && (\n          <span className={cn(radioVariants.label())}>{children}</span>\n        )}\n      </label>\n    );\n  },\n);\nRadio.displayName = 'Radio';\n",
      "type": "components"
    },
    {
      "name": "selection/radio/radio.types.ts",
      "content": "import type { AriaProps } from '@/types';\nimport type { VariantProps } from 'class-variance-authority';\nimport type { AriaRadioProps } from 'react-aria';\nimport type { radioVariants } from './radio.variants';\n\nexport type RadioProps = AriaProps<'input', AriaRadioProps> &\n  VariantProps<typeof radioVariants>;\n",
      "type": "components"
    },
    {
      "name": "selection/radio/radio.variants.ts",
      "content": "import { cva } from '@/utility';\n\nconst variants = cva(\n  {\n    name: 'radio group/radio',\n    layout: 'relative',\n    flex: 'inline-flex items-center',\n    spacing: 'gap-xs',\n    states: ['is-disabled:pointer-events-none'],\n  },\n  {\n    variants: {\n      color: {\n        primary: {},\n        secondary: {},\n        info: {},\n        success: {},\n        caution: {},\n        critical: {},\n      },\n    },\n    defaultVariants: {\n      color: 'primary',\n    },\n  },\n);\n\nconst markWrapperVariants = cva(\n  {\n    name: 'radio--mark-wrapper',\n    layout: 'relative',\n    flex: 'inline-flex items-center justify-center',\n    transitions: 'transition easing-standard duration-medium-1',\n    background: 'bg-transparent',\n    box: 'size-10 rounded-full',\n    overflow: 'overflow-hidden',\n    states: [\n      'group-is-disabled/radio:state-transparent',\n      'group-is-hovered/radio:state-hover',\n      'group-in-focus-visible/radio:state-focus',\n      'group-is-pressed/radio:state-press',\n    ],\n    ripple: ['ripple-wrapper:inset-0', 'ripple-wrapper:rounded-full'],\n  },\n  {\n    variants: {\n      color: {\n        primary: {\n          ripple: 'ripple:bg-primary',\n          states: 'state-primary',\n        },\n        secondary: {\n          ripple: 'ripple:bg-secondary',\n          states: 'state-secondary',\n        },\n        info: {\n          ripple: 'ripple:bg-info',\n          states: 'state-info',\n        },\n        success: {\n          ripple: 'ripple:bg-success',\n          states: 'state-success',\n        },\n        caution: {\n          ripple: 'ripple:bg-caution',\n          states: 'state-caution',\n        },\n        critical: {\n          ripple: 'ripple:bg-critical',\n          states: 'state-critical',\n        },\n      },\n    },\n    defaultVariants: {\n      color: 'primary',\n    },\n  },\n);\n\nconst markVariants = cva(\n  {\n    name: 'radio--mark',\n    layout: 'relative',\n    flex: 'inline-flex items-center justify-center',\n    transitions: 'transition easing-standard duration-medium-1',\n    box: 'size-5 rounded-full',\n    overflow: 'overflow-hidden',\n    borders: ['border-2', 'group-is-disabled/radio:border-on-surface/38'],\n  },\n  {\n    variants: {\n      color: {\n        primary: {},\n        secondary: {},\n        info: {},\n        success: {},\n        caution: {},\n        critical: {},\n      },\n      isSelected: {\n        true: {},\n        false: {\n          borders: 'border-on-surface-variant',\n        },\n      },\n    },\n    defaultVariants: {\n      color: 'primary',\n      isSelected: false,\n    },\n    compoundVariants: [\n      {\n        isSelected: true,\n        color: 'primary',\n        className: {\n          borders: 'border-primary',\n        },\n      },\n      {\n        isSelected: true,\n        color: 'secondary',\n        className: {\n          borders: 'border-secondary',\n        },\n      },\n      {\n        isSelected: true,\n        color: 'info',\n        className: {\n          borders: 'border-info',\n        },\n      },\n      {\n        isSelected: true,\n        color: 'success',\n        className: {\n          borders: 'border-success',\n        },\n      },\n      {\n        isSelected: true,\n        color: 'caution',\n        className: {\n          borders: 'border-caution',\n        },\n      },\n      {\n        isSelected: true,\n        color: 'critical',\n        className: {\n          borders: 'border-critical',\n        },\n      },\n    ],\n  },\n);\n\nconst iconVariants = cva(\n  {\n    name: 'radio--icon',\n    layout: 'relative',\n    transitions: 'transition easing-standard duration-medium-1',\n    box: 'size-2.5 rounded-full',\n    overflow: 'overflow-hidden',\n    background: ['group-is-disabled/radio:bg-on-surface/38'],\n  },\n  {\n    variants: {\n      color: {\n        primary: {\n          background: 'bg-primary',\n        },\n        secondary: {\n          background: 'bg-secondary',\n        },\n        info: {\n          background: 'bg-info',\n        },\n        success: {\n          background: 'bg-success',\n        },\n        caution: {\n          background: 'bg-caution',\n        },\n        critical: {\n          background: 'bg-critical',\n        },\n      },\n    },\n    defaultVariants: {\n      color: 'primary',\n    },\n  },\n);\n\nconst labelVariants = cva({\n  name: 'radio--label',\n  typography: 'typography-label-large',\n  transitions: 'transition easing-standard duration-medium-1',\n});\n\nexport const radioVariants = Object.assign(variants, {\n  markWrapper: markWrapperVariants,\n  mark: markVariants,\n  icon: iconVariants,\n  label: labelVariants,\n});\n",
      "type": "components"
    },
    {
      "name": "selection/slider/index.ts",
      "content": "export * from './slider';\n",
      "type": "components"
    },
    {
      "name": "selection/slider/internal/index.ts",
      "content": "export * from './slider-thumb';\n",
      "type": "components"
    },
    {
      "name": "selection/slider/internal/slider-thumb.tsx",
      "content": "import { materialDuration, materialEasing } from '@/config';\nimport { useMergedRefs } from '@/hooks';\nimport type { AriaProps } from '@/types';\nimport { cn } from '@/utility';\nimport type { VariantProps } from 'class-variance-authority';\nimport { AnimatePresence, motion } from 'motion/react';\nimport React from 'react';\nimport type { AriaSliderThumbOptions } from 'react-aria';\nimport { useSliderThumb } from 'react-aria';\nimport type { SliderState } from 'react-stately';\nimport { sliderVariants } from '../slider.variants';\n\nexport type SliderThumbProps = Omit<\n  AriaProps<'input', AriaSliderThumbOptions>,\n  'inputRef' | 'index'\n> & {\n  state: SliderState;\n  index: number;\n  formatter: Intl.NumberFormat;\n} & VariantProps<typeof sliderVariants.thumb>;\n\nexport const SliderThumb = React.forwardRef<HTMLInputElement, SliderThumbProps>(\n  ({ formatter, color, trackRef, state, index = 0, name }, forwardedRef) => {\n    const ref = useMergedRefs(forwardedRef);\n    const { thumbProps, inputProps, isDragging } = useSliderThumb(\n      {\n        index,\n        trackRef,\n        inputRef: ref,\n        name,\n      },\n      state,\n    );\n\n    return (\n      <section\n        {...thumbProps}\n        className={cn(sliderVariants.thumb({ color, isDragging }))}\n      >\n        <input {...inputProps} ref={ref} className=\"sr-only\" />\n        <AnimatePresence mode=\"wait\">\n          {isDragging && (\n            <motion.section\n              initial={{\n                scale: 0,\n                translateX: '-50%',\n                translateY: '25%',\n              }}\n              animate={{\n                scale: 1,\n                translateX: '-50%',\n                translateY: 'calc(-1 * var(--spacing-1))',\n              }}\n              exit={{\n                scale: 0,\n                translateX: '-50%',\n                translateY: '25%',\n              }}\n              transition={{\n                duration: materialDuration.asMotion('medium-1'),\n                ease: materialEasing['standard'],\n              }}\n              className={cn(sliderVariants.tooltip())}\n            >\n              {formatter.format(state.values[index])}\n            </motion.section>\n          )}\n        </AnimatePresence>\n      </section>\n    );\n  },\n);\nSliderThumb.displayName = 'SliderThumb';\n",
      "type": "components"
    },
    {
      "name": "selection/slider/slider.tsx",
      "content": "import { useMergedRefs } from '@/hooks';\nimport { cn } from '@/utility';\nimport React from 'react';\nimport { useNumberFormatter, useSlider } from 'react-aria';\nimport { useSliderState } from 'react-stately';\nimport { SliderThumb } from './internal';\nimport type { SliderProps } from './slider.types';\nimport { sliderVariants } from './slider.variants';\n\nexport const Slider = React.forwardRef<HTMLElement, SliderProps>(\n  (\n    {\n      isActiveThumb = (index, withMultipleThumbs) => {\n        return withMultipleThumbs ? index % 2 === 1 : index === 0;\n      },\n      color,\n      variant = 'continuous',\n      className,\n      minValue = 0,\n      maxValue = 100,\n      step,\n      ...props\n    },\n    forwardedRef,\n  ) => {\n    const ref = useMergedRefs(forwardedRef);\n    const numberFormatter = useNumberFormatter(props.formatOptions);\n    const state = useSliderState({\n      ...props,\n      minValue,\n      maxValue,\n      step,\n      numberFormatter,\n    });\n\n    const { groupProps, trackProps, labelProps, outputProps } = useSlider(\n      props,\n      state,\n      ref,\n    );\n\n    const percent = state.values.map((v) =>\n      Number.parseFloat((state.getValuePercent(v) * 100).toFixed(2)),\n    );\n\n    const trackStyles = Array(percent.length + 1)\n      .fill(null)\n      .map((_, index, arr) => {\n        const percentBefore = percent[index - 1] ?? 0;\n        let currentTrackPercent = percent[index] - percentBefore;\n        const isFirst = index === 0;\n        const isLast = index + 1 === arr.length;\n        const inCenter = !isFirst && !isLast;\n        if (isLast) {\n          currentTrackPercent = 100 - percentBefore;\n        }\n\n        return {\n          width: `calc(${currentTrackPercent}% - ${inCenter ? '16px' : '8px'})`,\n          left: isFirst ? '0%' : `calc(${percentBefore}% + 8px)`,\n        };\n      });\n\n    return (\n      <section\n        {...groupProps}\n        className={cn(sliderVariants({ color }), className)}\n        data-is-disabled={state.isDisabled}\n      >\n        {props.label && (\n          <section className={cn(sliderVariants.label())}>\n            <label {...labelProps}>{props.label}</label>\n            <output {...outputProps}>\n              {state.values\n                .map((_, index) => state.getThumbValueLabel(index))\n                .join(' - ')}\n            </output>\n          </section>\n        )}\n        <section\n          {...trackProps}\n          className={cn(sliderVariants.track())}\n          ref={ref}\n        >\n          {state.values.map((_, i) => (\n            <SliderThumb\n              key={i}\n              index={i}\n              state={state}\n              trackRef={ref}\n              color={color}\n              formatter={numberFormatter}\n            />\n          ))}\n          {trackStyles.map((style, index, arr) => {\n            const isFirst = index === 0;\n            const isLast = index + 1 === arr.length;\n            const withMultipleThumbs = arr.length !== 2;\n\n            let position: 'center' | 'right' | 'left' = 'center';\n            if (isFirst) position = 'left';\n            if (isLast) position = 'right';\n\n            return (\n              <section\n                key={index}\n                style={style}\n                className={cn(\n                  variant === 'continuous' &&\n                    isActiveThumb(index, withMultipleThumbs)\n                    ? sliderVariants.activeTrack({\n                        position,\n                        color,\n                      })\n                    : sliderVariants.inactiveTrack({\n                        position,\n                        color,\n                      }),\n                )}\n              />\n            );\n          })}\n\n          {/* {trackWidth.length === 3 && (\n            <section\n              style={{\n                width: trackWidth[1],\n              }}\n              className={cn(sliderVariants.activeTrack({ color }))}\n            >\n              {step === undefined && (\n                <span className=\"absolute right-1.5 size-1 rounded-full bg-primary\" />\n              )}\n            </section>\n          )}\n          <section\n            style={{\n              width: trackWidth[2] ?? trackWidth[1],\n            }}\n            className={cn(\n              sliderVariants.inactiveTrack({ position: 'right', color }),\n            )}\n          /> */}\n        </section>\n      </section>\n    );\n  },\n);\nSlider.displayName = 'Slider';\n",
      "type": "components"
    },
    {
      "name": "selection/slider/slider.types.ts",
      "content": "import type { AriaProps } from '@/types';\nimport type { VariantProps } from 'class-variance-authority';\nimport type { AriaSliderProps } from 'react-aria';\nimport type { sliderVariants } from './slider.variants';\n\nexport type SliderProps = AriaProps<'section', AriaSliderProps> &\n  VariantProps<typeof sliderVariants> & {\n    formatOptions?: Intl.NumberFormatOptions;\n    variant?: 'continuous' | 'centered';\n    isActiveThumb?: (index: number, withMultipleThumbs: boolean) => boolean;\n  };\n",
      "type": "components"
    },
    {
      "name": "selection/slider/slider.variants.ts",
      "content": "import { cva } from '@/utility';\n\nconst variants = cva(\n  {\n    name: 'slider group/slider',\n    flex: 'inline-flex flex-col',\n    layout: 'relative',\n  },\n  {\n    variants: {\n      color: {\n        primary: {},\n        secondary: {},\n        info: {},\n        success: {},\n        caution: {},\n        critical: {},\n      },\n    },\n    defaultVariants: {\n      color: 'primary',\n    },\n  },\n);\n\nconst labelVariants = cva({\n  name: 'slider--label',\n  flex: 'inline-flex items-center justify-between',\n  spacing: 'gap-xs',\n  typography: 'typography-label-large',\n});\n\nconst trackVariants = cva({\n  name: 'slider--track',\n  flex: 'inline-flex items-center',\n  box: 'h-12',\n  layout: 'relative',\n});\n\nconst activeTrackVariants = cva(\n  {\n    name: 'slider--active-track',\n    layout: 'absolute',\n    box: 'h-4',\n    flex: 'inline-flex items-center',\n    background: 'bg-primary',\n    overflow: 'overflow-hidden',\n    transitions: 'transition easing-standard duration-medium-1',\n    states: ['group-is-disabled/slider:bg-on-surface/38'],\n  },\n  {\n    variants: {\n      color: {\n        primary: {\n          background: 'bg-primary',\n        },\n        secondary: {\n          background: 'bg-secondary',\n        },\n        info: {\n          background: 'bg-info',\n        },\n        success: {\n          background: 'bg-success',\n        },\n        caution: {\n          background: 'bg-caution',\n        },\n        critical: {\n          background: 'bg-critical',\n        },\n      },\n      position: {\n        left: {\n          borders: 'rounded-l-3xl rounded-r-xs',\n        },\n        center: {\n          borders: 'rounded-3xs',\n        },\n        right: {\n          borders: 'rounded-l-xs rounded-r-3xl',\n        },\n      },\n    },\n    defaultVariants: {\n      color: 'primary',\n      position: 'center',\n    },\n  },\n);\n\nconst inactiveTrackVariants = cva(\n  {\n    name: 'slider--inactive-track',\n    layout: 'absolute',\n    box: 'h-4',\n    flex: 'inline-flex items-center',\n    overflow: 'overflow-hidden',\n    transitions: 'transition easing-standard duration-medium-1',\n    states: [\n      'group-is-disabled/slider:bg-on-surface/12',\n      'group-is-disabled/slider:after:bg-on-surface/38',\n    ],\n  },\n  {\n    variants: {\n      color: {\n        primary: {\n          background: 'bg-primary-container',\n          after: 'after:bg-primary',\n        },\n        secondary: {\n          background: 'bg-secondary-container',\n          after: 'after:bg-secondary',\n        },\n        info: {\n          background: 'bg-info-container',\n          after: 'after:bg-info',\n        },\n        success: {\n          background: 'bg-success-container',\n          after: 'after:bg-success',\n        },\n        caution: {\n          background: 'bg-caution-container',\n          after: 'after:bg-caution',\n        },\n        critical: {\n          background: 'bg-critical-container',\n          after: 'after:bg-critical',\n        },\n      },\n      position: {\n        left: {\n          borders: 'rounded-l-3xl rounded-r-xs',\n          after: [\n            'after:absolute',\n            'after:left-1.5',\n            'after:size-1',\n            'after:rounded-full',\n          ],\n        },\n        center: {\n          borders: 'rounded-3xs',\n        },\n        right: {\n          borders: 'rounded-l-xs rounded-r-3xl',\n          after: [\n            'after:absolute',\n            'after:right-1.5',\n            'after:size-1',\n            'after:rounded-full',\n          ],\n        },\n      },\n    },\n    defaultVariants: {\n      color: 'primary',\n      position: 'center',\n    },\n  },\n);\n\nconst thumbVariants = cva(\n  {\n    name: 'slider--thumb',\n    flex: 'inline-flex items-center justify-between',\n    transitions: [\n      'transition-[width,height,color,background-color,border-color,text-decoration-color,fill,stroke,opacity,box-shadow,transform,filter,backdrop-filter,-webkit-backdrop-filter]',\n      'easing-standard duration-medium-1',\n    ],\n    box: 'h-11',\n    borders: 'rounded-full',\n    layout: 'relative top-1/2',\n    states: ['group-is-disabled/slider:bg-on-surface/38'],\n  },\n  {\n    variants: {\n      color: {\n        primary: {\n          background: 'bg-primary',\n        },\n        secondary: {\n          background: 'bg-secondary',\n        },\n        info: {\n          background: 'bg-info',\n        },\n        success: {\n          background: 'bg-success',\n        },\n        caution: {\n          background: 'bg-caution',\n        },\n        critical: {\n          background: 'bg-critical',\n        },\n      },\n      isDragging: {\n        true: { box: 'w-0.5' },\n        false: { box: 'w-1' },\n      },\n    },\n    defaultVariants: {\n      color: 'primary',\n      isDragging: false,\n    },\n  },\n);\n\nconst tooltipVariants = cva({\n  name: 'slider--tooltip',\n  layout: 'absolute bottom-full left-1/2',\n  transforms: '-translate-y-1',\n  spacing: 'px-4 py-3',\n  background: 'bg-inverse-surface',\n  typography: 'typography-label-large text-inverse-on-surface',\n  borders: 'rounded-full',\n});\n\nexport const sliderVariants = Object.assign(variants, {\n  label: labelVariants,\n  track: trackVariants,\n  activeTrack: activeTrackVariants,\n  inactiveTrack: inactiveTrackVariants,\n  thumb: thumbVariants,\n  tooltip: tooltipVariants,\n});\n",
      "type": "components"
    },
    {
      "name": "selection/switch/compound/index.ts",
      "content": "export * from './switch-selected-icon';\nexport * from './switch-unselected-icon';\n",
      "type": "components"
    },
    {
      "name": "selection/switch/compound/switch-selected-icon.tsx",
      "content": "import React from 'react';\nimport { useSwitchContext } from '../context';\n\nexport const SwitchSelectedIcon: React.FC<React.PropsWithChildren> = ({\n  children,\n}) => {\n  const [, setState] = useSwitchContext();\n\n  React.useEffect(() => {\n    setState((prev) => ({\n      ...prev,\n      selectedIcon: children,\n    }));\n\n    return () => {\n      setState((prev) => ({ ...prev, selectedIcon: null }));\n    };\n  }, [children, setState]);\n\n  return null;\n};\n",
      "type": "components"
    },
    {
      "name": "selection/switch/compound/switch-unselected-icon.tsx",
      "content": "import React from 'react';\nimport { useSwitchContext } from '../context';\n\nexport const SwitchUnselectedIcon: React.FC<React.PropsWithChildren> = ({\n  children,\n}) => {\n  const [, setState] = useSwitchContext();\n\n  React.useEffect(() => {\n    setState((prev) => ({\n      ...prev,\n      unselectedIcon: children,\n    }));\n\n    return () => {\n      setState((prev) => ({ ...prev, unselectedIcon: null }));\n    };\n  }, [children, setState]);\n\n  return null;\n};\n",
      "type": "components"
    },
    {
      "name": "selection/switch/context/index.ts",
      "content": "export * from './switch.context';\n",
      "type": "components"
    },
    {
      "name": "selection/switch/context/switch.context.tsx",
      "content": "import type { ContextState } from '@/types';\nimport React from 'react';\n\nexport type SwitchContextState = ContextState<{\n  selectedIcon?: React.ReactNode;\n  unselectedIcon?: React.ReactNode;\n}>;\n\nconst SwitchContext = React.createContext<SwitchContextState | null>(null);\n\nexport const useSwitchContext = () => {\n  const value = React.useContext(SwitchContext);\n  if (!value)\n    throw new Error('This component must be used within a <Switch> component');\n  return value;\n};\n\nexport const SwitchContextProvider: React.FC<React.PropsWithChildren> = ({\n  children,\n}) => {\n  const state = React.useState<SwitchContextState[0]>({});\n\n  return (\n    <SwitchContext.Provider value={state}>{children}</SwitchContext.Provider>\n  );\n};\n",
      "type": "components"
    },
    {
      "name": "selection/switch/index.ts",
      "content": "export * from './compound';\nexport * from './switch';\nexport * from './switch.types';\nexport * from './switch.variants';\n",
      "type": "components"
    },
    {
      "name": "selection/switch/switch.tsx",
      "content": "import { materialDuration, materialEasing } from '@/config';\nimport { useInteractions, useMergedRefs } from '@/hooks';\nimport { cn, withProvider } from '@/utility';\nimport { AnimatePresence, motion } from 'motion/react';\nimport React from 'react';\nimport { useSwitch } from 'react-aria';\nimport { useToggleState } from 'react-stately';\nimport { SwitchContextProvider, useSwitchContext } from './context';\nimport type { SwitchProps } from './switch.types';\nimport { switchVariants } from './switch.variants';\n\nconst SwitchImpl = React.forwardRef<HTMLInputElement, SwitchProps>(\n  ({ color, className, children, ...props }, forwardedRef) => {\n    const ref = useMergedRefs(forwardedRef);\n    const [{ selectedIcon, unselectedIcon }] = useSwitchContext();\n    const state = useToggleState(props);\n\n    const { inputProps, labelProps, isSelected, isDisabled } = useSwitch(\n      props,\n      state,\n      ref,\n    );\n\n    const { interactionsProps } = useInteractions<'label'>({\n      ...labelProps,\n      isDisabled,\n    });\n\n    return (\n      <label\n        {...interactionsProps}\n        className={cn(switchVariants({ color }), className)}\n        data-is-selected={isSelected}\n      >\n        <input {...inputProps} className=\"sr-only\" ref={ref} />\n        <span\n          aria-hidden={true}\n          className={cn(switchVariants.track({ color, isSelected }))}\n        >\n          <span\n            className={cn(switchVariants.thumbWrapper({ color, isSelected }))}\n          >\n            <span\n              className={cn(\n                switchVariants.thumb({\n                  size: unselectedIcon ? 'icon' : 'default',\n                  color,\n                  isSelected,\n                }),\n              )}\n            >\n              <AnimatePresence mode=\"wait\">\n                {isSelected && selectedIcon ? (\n                  <motion.span\n                    key=\"selected\"\n                    initial={{ width: 0, height: 0 }}\n                    animate={{\n                      opacity: 1,\n                      width: 'var(--spacing-4)',\n                      height: 'var(--spacing-4)',\n                    }}\n                    exit={{ width: 0, height: 0 }}\n                    transition={{\n                      duration: materialDuration.asMotion('medium-1'),\n                      ease: materialEasing['standard'],\n                    }}\n                    className={cn(switchVariants.icon())}\n                  >\n                    {selectedIcon}\n                  </motion.span>\n                ) : null}\n                {!isSelected && unselectedIcon ? (\n                  <motion.span\n                    key=\"unselected\"\n                    initial={{ width: 0, height: 0 }}\n                    animate={{\n                      opacity: 1,\n                      width: 'var(--spacing-4)',\n                      height: 'var(--spacing-4)',\n                    }}\n                    exit={{ width: 0, height: 0 }}\n                    transition={{\n                      duration: materialDuration.asMotion('medium-1'),\n                      ease: materialEasing['standard'],\n                    }}\n                    className={cn(switchVariants.icon())}\n                  >\n                    {unselectedIcon}\n                  </motion.span>\n                ) : null}\n              </AnimatePresence>\n            </span>\n          </span>\n        </span>\n        {children && (\n          <span className={cn(switchVariants.label())}>{children}</span>\n        )}\n      </label>\n    );\n  },\n);\nSwitchImpl.displayName = 'Switch';\n\nexport const Switch = withProvider(SwitchContextProvider, SwitchImpl);\n",
      "type": "components"
    },
    {
      "name": "selection/switch/switch.types.ts",
      "content": "import type { AriaProps } from '@/types';\nimport type { VariantProps } from 'class-variance-authority';\nimport type { AriaSwitchProps } from 'react-aria';\nimport type { switchVariants } from './switch.variants';\n\nexport type SwitchProps = AriaProps<'input', AriaSwitchProps> &\n  VariantProps<typeof switchVariants>;\n",
      "type": "components"
    },
    {
      "name": "selection/switch/switch.variants.ts",
      "content": "import { cva } from '@/utility';\n\nconst variants = cva(\n  {\n    name: 'switch group/switch',\n    layout: 'relative',\n    flex: 'inline-flex items-center',\n    spacing: 'gap-xs',\n    states: ['is-disabled:pointer-events-none'],\n  },\n  {\n    variants: {\n      color: {\n        primary: {},\n        secondary: {},\n        info: {},\n        success: {},\n        caution: {},\n        critical: {},\n      },\n    },\n    defaultVariants: {\n      color: 'primary',\n    },\n  },\n);\n\nconst trackVariants = cva(\n  {\n    name: 'switch--track',\n    layout: 'relative',\n    flex: 'inline-flex items-center',\n    transitions: 'transition easing-standard duration-medium-1',\n    borders: ['border-2'],\n    box: 'h-8 w-13 rounded-full',\n  },\n  {\n    variants: {\n      color: {\n        primary: {},\n        secondary: {},\n        info: {},\n        success: {},\n        caution: {},\n        critical: {},\n      },\n      isSelected: {\n        true: {\n          borders: 'border-transparent',\n          background: [\n            'bg-surface-container-highest',\n            'group-is-disabled/switch:bg-on-surface/12',\n          ],\n          typography: 'group-is-disabled/switch:text-on-surface/38',\n        },\n        false: {\n          borders: [\n            'border-outline',\n            'group-is-disabled/switch:border-outline/12',\n          ],\n          typography: 'text-surface-container-highest',\n        },\n      },\n    },\n    defaultVariants: {\n      color: 'primary',\n      isSelected: false,\n    },\n    compoundVariants: [\n      {\n        isSelected: true,\n        color: 'primary',\n        className: {\n          background: 'bg-primary',\n          typography: 'text-on-primary-container',\n        },\n      },\n      {\n        isSelected: true,\n        color: 'secondary',\n        className: {\n          background: 'bg-secondary',\n          typography: 'text-on-secondary-container',\n        },\n      },\n      {\n        isSelected: true,\n        color: 'info',\n        className: {\n          background: 'bg-info',\n          typography: 'text-on-info-container',\n        },\n      },\n      {\n        isSelected: true,\n        color: 'success',\n        className: {\n          background: 'bg-secondary',\n          typography: 'text-on-secondary-container',\n        },\n      },\n      {\n        isSelected: true,\n        color: 'caution',\n        className: {\n          background: 'bg-caution',\n          typography: 'text-on-caution-container',\n        },\n      },\n      {\n        isSelected: true,\n        color: 'critical',\n        className: {\n          background: 'bg-critical',\n          typography: 'text-on-critical-container',\n        },\n      },\n    ],\n  },\n);\n\nconst thumbWrapperVariants = cva(\n  {\n    name: 'switch--thumb-wrapper',\n    layout: 'absolute',\n    flex: 'inline-flex items-center justify-center',\n    transitions: 'transition easing-standard duration-medium-1',\n    box: 'size-10 rounded-full',\n    background: 'bg-transparent',\n    states: [\n      'group-is-disabled/switch:state-transparent',\n      'group-is-hovered/switch:state-hover',\n      'group-in-focus-visible/switch:state-focus',\n      'group-is-pressed/switch:state-press',\n    ],\n  },\n  {\n    variants: {\n      color: {\n        primary: {\n          states: 'state-primary',\n        },\n        secondary: {\n          states: 'state-secondary',\n        },\n        info: {\n          states: 'state-info',\n        },\n        success: {\n          states: 'state-success',\n        },\n        caution: {\n          states: 'state-caution',\n        },\n        critical: {\n          states: 'state-critical',\n        },\n      },\n      isSelected: {\n        true: {\n          transforms: 'translate-x-3.5',\n        },\n        false: {\n          transforms: '-translate-x-1.5',\n        },\n      },\n    },\n    defaultVariants: {\n      color: 'primary',\n      isSelected: false,\n    },\n  },\n);\n\nconst thumbVariants = cva(\n  {\n    name: 'switch--thumb',\n    layout: 'relative',\n    flex: 'inline-flex items-center justify-center',\n    transitions: [\n      'transition-[width,height,color,background-color,border-color,text-decoration-color,fill,stroke,opacity,box-shadow,transform,filter,backdrop-filter,-webkit-backdrop-filter]',\n      'easing-standard duration-medium-1',\n    ],\n    background: 'bg-outline',\n    box: ['rounded-full', 'group-is-pressed/switch:size-7'],\n  },\n  {\n    variants: {\n      size: {\n        default: {},\n        icon: {\n          box: 'size-6',\n        },\n      },\n      color: {\n        primary: {},\n        secondary: {},\n        info: {},\n        success: {},\n        caution: {},\n        critical: {},\n      },\n      isSelected: {\n        true: {\n          background: ['group-is-disabled/switch:bg-surface'],\n        },\n        false: {\n          background: ['group-is-disabled/switch:bg-on-surface/38'],\n        },\n      },\n    },\n    defaultVariants: {\n      size: 'default',\n      color: 'primary',\n      isSelected: false,\n    },\n    compoundVariants: [\n      {\n        isSelected: false,\n        size: 'default',\n        className: {\n          box: 'size-4',\n        },\n      },\n      {\n        isSelected: true,\n        className: {\n          box: 'size-6',\n        },\n      },\n      {\n        isSelected: true,\n        color: 'primary',\n        className: {\n          background: 'bg-on-primary',\n        },\n      },\n      {\n        isSelected: true,\n        color: 'secondary',\n        className: {\n          background: 'bg-on-secondary',\n        },\n      },\n      {\n        isSelected: true,\n        color: 'info',\n        className: {\n          background: 'bg-on-info',\n        },\n      },\n      {\n        isSelected: true,\n        color: 'success',\n        className: {\n          background: 'bg-on-success',\n        },\n      },\n      {\n        isSelected: true,\n        color: 'caution',\n        className: {\n          background: 'bg-on-caution',\n        },\n      },\n      {\n        isSelected: true,\n        color: 'critical',\n        className: {\n          background: 'bg-on-critical',\n        },\n      },\n    ],\n  },\n);\n\nconst iconVariants = cva({\n  name: 'switch--icon',\n  layout: 'relative inline-block',\n  box: 'size-4',\n  overflow: 'overflow-hidden empty:hidden',\n  other: '[&>*]:absolute [&>*]:inset-0 [&>*]:size-full',\n});\n\nconst labelVariants = cva({\n  name: 'switch--label',\n  typography: 'typography-label-large',\n  transitions: 'transition easing-standard duration-medium-1',\n  box: 'empty:hidden',\n});\n\nexport const switchVariants = Object.assign(variants, {\n  track: trackVariants,\n  thumbWrapper: thumbWrapperVariants,\n  thumb: thumbVariants,\n  icon: iconVariants,\n  label: labelVariants,\n});\n",
      "type": "components"
    },
    {
      "name": "utility/index.ts",
      "content": "export * from './portal';\n",
      "type": "components"
    },
    {
      "name": "utility/portal/index.ts",
      "content": "export * from './portal';\nexport * from './portal.types';\n",
      "type": "components"
    },
    {
      "name": "utility/portal/portal.tsx",
      "content": "import React from 'react';\nimport { createPortal } from 'react-dom';\nimport type { PortalProps } from './portal.types';\n\nexport const Portal: React.FC<PortalProps> = ({ children, container }) => {\n  const [mounted, setMounted] = React.useState(false);\n\n  React.useEffect(() => {\n    setMounted(true);\n    return () => setMounted(false);\n  }, []);\n\n  if (!mounted) return null;\n\n  return createPortal(children, container ?? document.body);\n};\n",
      "type": "components"
    },
    {
      "name": "utility/portal/portal.types.ts",
      "content": "export type PortalProps = React.PropsWithChildren<{\n  container?: Element | DocumentFragment;\n}>;\n",
      "type": "components"
    },
    {
      "name": "index.ts",
      "content": "export * from './material-duration';\nexport * from './material-easing';\n",
      "type": "config"
    },
    {
      "name": "material-duration.ts",
      "content": "export const materialDurationValues = {\n  'short-1': 50,\n  'short-2': 100,\n  'short-3': 150,\n  'short-4': 200,\n  'medium-1': 250,\n  'medium-2': 300,\n  'medium-3': 350,\n  'medium-4': 400,\n  'long-1': 450,\n  'long-2': 500,\n  'long-3': 550,\n  'long-4': 600,\n  'extra-long-1': 700,\n  'extra-long-2': 800,\n  'extra-long-3': 900,\n  'extra-long-4': 1000,\n} as const;\n\ntype Registry = typeof materialDurationValues;\n\ntype Key = keyof Registry;\n\ntype AsString<T extends Key> = `${Registry[T]}ms`;\n\ntype StringRegistry = {\n  [key in Key]: AsString<key>;\n};\n\nexport const materialDuration = {\n  ...materialDurationValues,\n  keys(): Key[] {\n    return Object.keys(materialDurationValues) as Key[];\n  },\n  has(key: string): key is Key {\n    return Object.keys(materialDurationValues).includes(key);\n  },\n  asMotion(key: Key) {\n    return materialDurationValues[key] / 1000;\n  },\n  asString<T extends Key>(key: T): AsString<T> {\n    return `${materialDurationValues[key]}ms`;\n  },\n  toStringRegistry(): StringRegistry {\n    const result = {} as Record<Key, AsString<Key>>;\n\n    this.keys().forEach((key) => {\n      result[key] = this.asString(key);\n    });\n\n    return result as StringRegistry;\n  },\n} as const;\n",
      "type": "config"
    },
    {
      "name": "material-easing.ts",
      "content": "export const materialEasingValues = {\n  standard: [0.2, 0.0, 0, 1.0],\n  'standard-decelerate': [0, 0, 0, 1],\n  'standard-accelerate': [0.3, 0.0, 0.8, 0.15],\n  emphasized: [0.2, 0.0, 0, 1.0],\n  'emphasized-decelerate': [0.05, 0.7, 0.1, 1.0],\n  'emphasized-accelerate': [0.3, 0.0, 0.8, 0.15],\n} as const;\n\ntype Registry = typeof materialEasingValues;\n\ntype Key = keyof Registry;\n\ntype AsString<T extends Key> =\n  `cubic-bezier(${Registry[T][0]}, ${Registry[T][1]}, ${Registry[T][2]}, ${Registry[T][3]})`;\n\ntype StringRegistry = {\n  [key in Key]: AsString<key>;\n};\n\nexport const materialEasing = {\n  ...materialEasingValues,\n  keys(): Key[] {\n    return Object.keys(materialEasingValues) as Key[];\n  },\n  has(key: string): key is Key {\n    return Object.keys(materialEasingValues).includes(key);\n  },\n  asString<T extends Key>(key: T): AsString<T> {\n    const [p0, p1, p2, p3] = materialEasingValues[key];\n\n    return `cubic-bezier(${p0}, ${p1}, ${p2}, ${p3})` as AsString<T>;\n  },\n  toStringRegistry(): StringRegistry {\n    const result = {} as Record<Key, AsString<Key>>;\n\n    this.keys().forEach((key) => {\n      result[key] = this.asString(key);\n    });\n\n    return result as StringRegistry;\n  },\n} as const;\n",
      "type": "config"
    },
    {
      "name": "index.ts",
      "content": "export * from './use-debounced';\nexport * from './use-interactions';\nexport * from './use-interactions-with-ripple';\nexport * from './use-merge-refs';\nexport * from './use-ripple';\n",
      "type": "hooks"
    },
    {
      "name": "use-debounced/index.ts",
      "content": "export * from './use-debounced';\n",
      "type": "hooks"
    },
    {
      "name": "use-debounced/use-debounced.ts",
      "content": "import React from 'react';\n\nexport const useDebounced = <T>(value: T, ms = 200): T => {\n  const [debounced, setDebounced] = React.useState(value);\n\n  React.useEffect(() => {\n    const timeout = setTimeout(() => {\n      setDebounced(value);\n    }, ms);\n    return () => clearTimeout(timeout);\n  }, [value, ms]);\n\n  return debounced;\n};\n",
      "type": "hooks"
    },
    {
      "name": "use-interactions/index.ts",
      "content": "export * from './use-interactions';\n",
      "type": "hooks"
    },
    {
      "name": "use-interactions/use-interactions.ts",
      "content": "import type { Props } from '@/types';\nimport { mergeProps } from '@/utility';\nimport type React from 'react';\nimport type {\n  AriaFocusRingProps,\n  HoverProps,\n  LongPressProps,\n  PressHookProps,\n} from 'react-aria';\nimport { useFocusRing, useHover, useLongPress, usePress } from 'react-aria';\n\nexport type UseInteractions<\n  T extends\n    | keyof React.JSX.IntrinsicElements\n    | React.JSXElementConstructor<unknown> = 'div',\n> = typeof useInteractions<T>;\n\nexport const useInteractions = <\n  T extends\n    | keyof React.JSX.IntrinsicElements\n    | React.JSXElementConstructor<unknown> = 'div',\n>(\n  props: Omit<AriaFocusRingProps, 'within'> &\n    HoverProps &\n    LongPressProps &\n    PressHookProps,\n) => {\n  const { focusProps, isFocused, isFocusVisible } = useFocusRing(props);\n  const {\n    focusProps: focusVisibleWithinProps,\n    isFocused: isFocusedWithin,\n    isFocusVisible: isFocusVisibleWithin,\n  } = useFocusRing({\n    ...props,\n    within: true,\n  });\n  const { hoverProps, isHovered } = useHover(props);\n  const { pressProps, isPressed } = usePress(props);\n  const { longPressProps } = useLongPress(props);\n\n  return {\n    interactionsProps: mergeProps(\n      focusProps as Props<T>,\n      focusVisibleWithinProps as Props<T>,\n      hoverProps as Props<T>,\n      longPressProps as Props<T>,\n      pressProps as Props<T>,\n      {\n        'data-in-focus': isFocused,\n        'data-in-focus-within': isFocusedWithin,\n        'data-in-focus-visible': isFocusVisible,\n        'data-in-focus-visible-within': isFocusVisibleWithin,\n        'data-is-hovered': isHovered,\n        'data-is-pressed': isPressed,\n        'data-is-disabled': props.isDisabled,\n      } as unknown as Props<T>,\n    ),\n    isFocusVisible,\n    isFocusWithinVisible: isFocusVisibleWithin,\n    isHovered,\n    isPressed,\n  };\n};\n",
      "type": "hooks"
    },
    {
      "name": "use-interactions-with-ripple/index.ts",
      "content": "export * from './use-interactions-with-ripple';\n",
      "type": "hooks"
    },
    {
      "name": "use-interactions-with-ripple/use-interactions-with-ripple.ts",
      "content": "import type { Props } from '@/types';\nimport type { UseInteractions } from '../use-interactions/use-interactions';\nimport { useInteractions } from '../use-interactions/use-interactions';\nimport type { UseRipple, UseRippleOptions } from '../use-ripple';\nimport { useRipple } from '../use-ripple';\n\nexport const useInteractionsWithRipple = <\n  T extends\n    | keyof React.JSX.IntrinsicElements\n    | React.JSXElementConstructor<unknown> = 'div',\n>(\n  props: Parameters<UseInteractions<T>>[0],\n  rippleOptions: Partial<UseRippleOptions> = {},\n): ReturnType<UseInteractions<T>> & {\n  rippleProps: ReturnType<UseRipple<T>>;\n} => {\n  const rippleProps = useRipple(rippleOptions);\n  const interaction = useInteractions<T>({\n    ...props,\n    onPressStart: (e) => {\n      // start(e);\n      props.onPressStart?.(e);\n    },\n    onPressUp: (e) => {\n      // onUnpress(e);\n      props.onPressUp?.(e);\n    },\n  });\n\n  return {\n    ...interaction,\n    rippleProps: rippleProps as Props<T>,\n  };\n};\n",
      "type": "hooks"
    },
    {
      "name": "use-merge-refs/index.ts",
      "content": "export * from './use-merge-refs';\n",
      "type": "hooks"
    },
    {
      "name": "use-merge-refs/use-merge-refs.ts",
      "content": "import React from 'react';\n\nexport const useMergedRefs = <T>(\n  ...refs: (React.Ref<T> | null | undefined)[]\n): React.RefObject<T> => {\n  const mergedRef = React.useRef<T>(null);\n\n  React.useEffect(() => {\n    refs.forEach((ref) => {\n      if (!ref) return;\n\n      if (typeof ref === 'function') {\n        ref(mergedRef.current);\n      } else {\n        // eslint-disable-next-line no-param-reassign\n        (ref as React.MutableRefObject<T | null>).current = mergedRef.current;\n      }\n    });\n  }, [refs]);\n\n  return mergedRef as React.RefObject<T>;\n};\n",
      "type": "hooks"
    },
    {
      "name": "use-ripple/index.ts",
      "content": "export * from './use-ripple';\nexport * from './use-ripple.types';\n",
      "type": "hooks"
    },
    {
      "name": "use-ripple/use-ripple.tsx",
      "content": "import { materialDuration } from '@/config';\nimport type { Props } from '@/types';\nimport { animate } from 'motion';\nimport type { AnimationPlaybackControls } from 'motion/react';\nimport React from 'react';\nimport type { PressEvent } from 'react-aria';\nimport { usePress } from 'react-aria';\nimport type { UseRippleOptions } from './use-ripple.types';\n\ntype RippleData = {\n  id: string | undefined;\n  isAnimationEnded: boolean;\n  isPressed: boolean;\n  animation: 'entering' | 'exiting' | null;\n  controls: AnimationPlaybackControls | undefined;\n};\n\ntype Controls = {\n  get: (id: string) => AnimationPlaybackControls | undefined;\n  set: (id: string, controls: AnimationPlaybackControls) => void;\n  remove: (id: string) => void;\n};\n\nconst rippleData = (\n  ripple: HTMLSpanElement,\n  controls: Controls,\n): RippleData => {\n  const r = ripple;\n  const data: RippleData = {\n    get id(): string | undefined {\n      return r.dataset.id;\n    },\n    set id(value: string | undefined) {\n      r.dataset.id = value;\n    },\n    get isAnimationEnded(): boolean {\n      return r.dataset.isAnimationEnded === 'true';\n    },\n    set isAnimationEnded(value: boolean) {\n      r.dataset.isAnimationEnded = `${value}`;\n    },\n    get isPressed(): boolean {\n      return r.dataset.isPressed === 'true';\n    },\n    set isPressed(value: boolean) {\n      r.dataset.isPressed = `${value}`;\n    },\n    get animation(): 'entering' | 'exiting' | null {\n      const animation = r.dataset.animation;\n      if (animation === 'entering' || animation === 'exiting') {\n        return animation;\n      }\n      return null;\n    },\n    set animation(value: 'entering' | 'exiting' | null) {\n      r.dataset.animation = value || undefined;\n    },\n    get controls(): AnimationPlaybackControls | undefined {\n      if (!this.id) return undefined;\n      return controls.get(this.id);\n    },\n    set controls(ctrls: AnimationPlaybackControls | undefined) {\n      if (!this.id) return;\n      if (ctrls) {\n        controls.set(this.id, ctrls);\n      } else {\n        controls.remove(this.id);\n      }\n    },\n  };\n\n  return data;\n};\n\nexport type UseRipple<\n  T extends\n    | keyof React.JSX.IntrinsicElements\n    | React.JSXElementConstructor<unknown> = 'div',\n> = typeof useRipple<T>;\n\nconst speedDelta = 2;\n\nexport const useRipple = <\n  T extends\n    | keyof React.JSX.IntrinsicElements\n    | React.JSXElementConstructor<unknown> = 'div',\n>({\n  duration = materialDuration['extra-long-4'],\n  centered = false,\n}: Partial<UseRippleOptions> = {}): Props<T> => {\n  const animationControls = React.useRef<[string, AnimationPlaybackControls][]>(\n    [],\n  );\n  const controls = React.useMemo<Controls>(() => {\n    const c: Controls = {\n      get(id: string): AnimationPlaybackControls | undefined {\n        const tuple = animationControls.current.find((v) => v[0] === id);\n        return tuple?.[1];\n      },\n      set(id: string, ctrls: AnimationPlaybackControls): void {\n        const current = this.get(id);\n        current?.cancel();\n\n        animationControls.current = [\n          ...animationControls.current.filter((v) => v[0] !== id),\n          [id, ctrls],\n        ];\n      },\n      remove(id: string): void {\n        const current = this.get(id);\n        current?.cancel();\n        animationControls.current = animationControls.current.filter(\n          (v) => v[0] !== id,\n        );\n      },\n    };\n\n    return c;\n  }, [animationControls]);\n\n  const animateEnter = React.useCallback(\n    (ripple: HTMLSpanElement, onComplete: () => void) => {\n      return animate(\n        ripple,\n        { '--ripple-scale': 1 },\n        {\n          duration: (duration * 2) / 1000,\n          onComplete: () => {\n            onComplete();\n          },\n        },\n      );\n    },\n    [duration],\n  );\n\n  const animateExit = React.useCallback(\n    (ripple: HTMLSpanElement, onComplete: () => void) => {\n      return animate(\n        ripple,\n        { opacity: 0 },\n        {\n          duration: duration / (speedDelta * 2) / 1000,\n          onComplete: () => {\n            onComplete();\n          },\n        },\n      );\n    },\n    [duration],\n  );\n\n  const onPressUp = React.useCallback(\n    (e: PressEvent) => {\n      const target = e.target;\n      const ripples = target.querySelectorAll<HTMLSpanElement>('span.ripple');\n      ripples.forEach((ripple) => {\n        const data = rippleData(ripple, controls);\n        data.isPressed = false;\n        if (data.animation !== 'entering') return;\n        if (data.isAnimationEnded) {\n          data.animation = 'exiting';\n          data.isAnimationEnded = false;\n          data.controls = animateExit(ripple, () => {\n            ripple.remove();\n          });\n          return;\n        }\n        if (!data.controls) return;\n        data.controls.speed = speedDelta * 2;\n      });\n    },\n    [animateExit, controls],\n  );\n\n  const onPressStart = React.useCallback(\n    (e: PressEvent) => {\n      const target = e.target;\n      const ripple = document.createElement('span');\n      const data = rippleData(ripple, controls);\n      const diameter = Math.max(target.clientWidth, target.clientHeight) * 2;\n      if (centered) {\n        ripple.style.setProperty('--ripple-x', `${target.clientWidth / 2}px`);\n        ripple.style.setProperty('--ripple-y', `${target.clientHeight / 2}px`);\n      } else {\n        ripple.style.setProperty('--ripple-x', `${e.x}px`);\n        ripple.style.setProperty('--ripple-y', `${e.y}px`);\n      }\n      ripple.className = 'ripple';\n      ripple.style.setProperty('--ripple-diameter', `${diameter}px`);\n      ripple.setAttribute('aria-hidden', 'true');\n      target.append(ripple);\n\n      data.id = `ripple-${Math.random().toString(16).substring(2)}`;\n      data.isPressed = true;\n      data.isAnimationEnded = false;\n      data.animation = 'entering';\n      data.controls = animateEnter(ripple, () => {\n        if (!data.isPressed) {\n          data.animation = 'exiting';\n          data.controls = animateExit(ripple, () => {\n            ripple.remove();\n          });\n          return;\n        }\n        data.isAnimationEnded = true;\n      });\n    },\n    [animateEnter, animateExit, centered, controls],\n  );\n\n  const { pressProps } = usePress({\n    onPressStart,\n    onPressUp,\n    shouldCancelOnPointerExit: true,\n  });\n\n  return {\n    ...pressProps,\n    onMouseLeave: (e: MouseEvent) => onPressUp(e as unknown as PressEvent),\n  } as unknown as Props<T>;\n};\n",
      "type": "hooks"
    },
    {
      "name": "use-ripple/use-ripple.types.ts",
      "content": "export type UseRippleOptions = {\n  duration: number;\n  centered: boolean;\n};\n",
      "type": "hooks"
    },
    {
      "name": "index.css",
      "content": "@theme {\n  --duration-short-1: 50ms;\n  --duration-short-2: 100ms;\n  --duration-short-3: 150ms;\n  --duration-short-4: 200ms;\n  --duration-medium-1: 250ms;\n  --duration-medium-2: 300ms;\n  --duration-medium-3: 350ms;\n  --duration-medium-4: 400ms;\n  --duration-long-1: 450ms;\n  --duration-long-2: 500ms;\n  --duration-long-3: 550ms;\n  --duration-long-4: 600ms;\n  --duration-extra-long-1: 700ms;\n  --duration-extra-long-2: 800ms;\n  --duration-extra-long-3: 900ms;\n  --duration-extra-long-4: 1000ms;\n\n  --easing-standard: cubic-bezier(0.2, 0, 0, 1);\n  --easing-standard-decelerate: cubic-bezier(0, 0, 0, 1);\n  --easing-standard-accelerate: cubic-bezier(0.3, 0, 0.8, 0.15);\n  --easing-emphasized: cubic-bezier(0.2, 0, 0, 1);\n  --easing-emphasized-decelerate: cubic-bezier(0.05, 0.7, 0.1, 1);\n  --easing-emphasized-accelerate: cubic-bezier(0.3, 0, 0.8, 0.15);\n\n  --elevation-0: 0px 0px #0000;\n  --elevation-1:\n    rgba(0, 0, 0, 0.2) 0px 2px 1px -1px, rgba(0, 0, 0, 0.14) 0px 1px 1px 0px,\n    rgba(0, 0, 0, 0.12) 0px 1px 3px 0px;\n  --elevation-2:\n    rgba(0, 0, 0, 0.2) 0px 3px 3px -2px, rgba(0, 0, 0, 0.14) 0px 3px 4px 0px,\n    rgba(0, 0, 0, 0.12) 0px 1px 8px 0px;\n  --elevation-3:\n    rgba(0, 0, 0, 0.2) 0px 3px 5px -1px, rgba(0, 0, 0, 0.14) 0px 6px 10px 0px,\n    rgba(0, 0, 0, 0.12) 0px 1px 18px 0px;\n  --elevation-4:\n    rgba(0, 0, 0, 0.2) 0px 5px 5px -3px, rgba(0, 0, 0, 0.14) 0px 8px 10px 1px,\n    rgba(0, 0, 0, 0.12) 0px 3px 14px 2px;\n  --elevation-5:\n    rgba(0, 0, 0, 0.2) 0px 7px 8px -4px, rgba(0, 0, 0, 0.14) 0px 12px 17px 2px,\n    rgba(0, 0, 0, 0.12) 0px 5px 22px 4px;\n\n  --state-hover: 8%;\n  --state-focus: 10%;\n  --state-press: 10%;\n  --state-drag: 16%;\n}\n\n@custom-variant in-focus (&[data-in-focus=true]);\n@custom-variant in-focus-within (&[data-in-focus-within=true]);\n@custom-variant in-focus-visible (&[data-in-focus-visible=true]);\n@custom-variant in-focus-visible-within (&[data-in-focus-visible-within=true]);\n@custom-variant is-hovered (&[data-is-hovered=true]);\n@custom-variant is-pressed (&[data-is-pressed=true]);\n@custom-variant is-disabled (&[data-is-disabled=true]);\n\n@utility duration-* {\n  transition-duration: --value(--duration- *);\n}\n\n@utility easing-* {\n  transition-timing-function: --value(--easing- *);\n}\n\n@utility elevation-* {\n  box-shadow: --value(--elevation- *);\n}\n\n@property --ui-background-color {\n  syntax: '<color>';\n  inherits: false;\n  initial-value: transparent;\n}\n\n@property --ui-state-color {\n  syntax: '<color>';\n  inherits: false;\n  initial-value: transparent;\n}\n\n@property --ui-background-opacity {\n  syntax: '<percent>';\n  inherits: false;\n  initial-value: 100%;\n}\n\n@utility bg-* {\n  --ui-background-color: --value(--color- *);\n  --ui-background-opacity: 100%;\n  background: color-mix(\n    in oklab,\n    var(--ui-background-color) var(--ui-background-opacity),\n    var(--ui-state-color)\n  );\n}\n\n@utility state-transparent {\n  --ui-state-color: transparent;\n  --ui-background-opacity: 100%;\n}\n\n@utility state-* {\n  --ui-state-color: --value(--color- *);\n  --ui-background-opacity: calc(100% - --value(--state- *));\n  background: color-mix(\n    in oklab,\n    var(--ui-background-color) var(--ui-background-opacity),\n    var(--ui-state-color)\n  );\n}\n\n@custom-variant ripple (& > .ripple::after);\n@custom-variant ripple-wrapper (& > .ripple);\n\n@layer components {\n  .ripple {\n    z-index: 2;\n    position: absolute;\n    inset: 0;\n    overflow: hidden;\n\n    &::after {\n      content: '';\n      position: absolute;\n      translate: -50% -50%;\n      width: var(--ripple-diameter);\n      height: var(--ripple-diameter);\n      top: var(--ripple-y);\n      left: var(--ripple-x);\n      scale: var(--ripple-scale, 0);\n      filter: blur(4px);\n      opacity: 0.1;\n      border-radius: 9999px;\n    }\n  }\n}\n",
      "type": "tailwind"
    },
    {
      "name": "context-state/context-state.ts",
      "content": "import type React from 'react';\n\nexport type ContextState<T> = [T, React.Dispatch<React.SetStateAction<T>>];\n",
      "type": "types"
    },
    {
      "name": "context-state/index.ts",
      "content": "export * from './context-state';\n",
      "type": "types"
    },
    {
      "name": "index.ts",
      "content": "export * from './context-state';\nexport * from './props';\n",
      "type": "types"
    },
    {
      "name": "props/aria-props.ts",
      "content": "import type { EmptyObject, Schema } from '@bruhabruh/type-safe';\nimport type { AsChildProp } from './as-prop';\n\nexport type AriaProps<\n  T extends React.ElementType,\n  Props = EmptyObject,\n  OmitKeys extends keyof Props | '' = '',\n  OmitProps extends Schema<Props, unknown> | EmptyObject = EmptyObject,\n> = Omit<Props, keyof OmitProps | OmitKeys> &\n  Pick<React.ComponentPropsWithRef<T>, 'ref' | 'className' | 'children'>;\n\nexport type AriaPropsWithAsChild<\n  T extends React.ElementType,\n  Props = EmptyObject,\n  OmitKeys extends keyof Props | '' = '',\n  OmitProps extends Schema<Props, unknown> | EmptyObject = EmptyObject,\n> = AriaProps<T, Props, OmitKeys, OmitProps> & AsChildProp;\n",
      "type": "types"
    },
    {
      "name": "props/as-prop.ts",
      "content": "export type AsChildProp = { asChild?: boolean };\n",
      "type": "types"
    },
    {
      "name": "props/index.ts",
      "content": "export * from './aria-props';\nexport * from './as-prop';\nexport * from './props';\nexport * from './props-with-as-child';\nexport * from './split-props';\n",
      "type": "types"
    },
    {
      "name": "props/props-with-as-child.ts",
      "content": "import type { EmptyObject, Schema } from '@bruhabruh/type-safe';\nimport type React from 'react';\nimport type { AsChildProp } from './as-prop';\nimport type { Props } from './props';\n\nexport type PropsWithAsChild<\n  T extends\n    | keyof React.JSX.IntrinsicElements\n    | React.JSXElementConstructor<unknown>,\n  OmitKeys extends keyof React.ComponentProps<T> | '' = '',\n  OmitProps extends\n    | Schema<React.ComponentProps<T>, unknown>\n    | EmptyObject = EmptyObject,\n> = Props<T, OmitKeys, OmitProps> & AsChildProp;\n",
      "type": "types"
    },
    {
      "name": "props/props.ts",
      "content": "import type { EmptyObject, Schema } from '@bruhabruh/type-safe';\nimport type React from 'react';\n\nexport type Props<\n  T extends\n    | keyof React.JSX.IntrinsicElements\n    | React.JSXElementConstructor<unknown>,\n  OmitKeys extends keyof React.ComponentProps<T> | '' = '',\n  OmitProps extends\n    | Schema<React.ComponentProps<T>, unknown>\n    | EmptyObject = EmptyObject,\n> = Omit<React.ComponentProps<T>, keyof OmitProps | OmitKeys>;\n",
      "type": "types"
    },
    {
      "name": "props/split-props.ts",
      "content": "export type SplitProps<T1 extends object, T2 extends object> = [\n  T1,\n  Omit<T2, keyof T1>,\n];\n\nexport type SplitPropsFn<T1 extends object, T2 extends object> = (\n  props: T2,\n) => SplitProps<T1, T2>;\n",
      "type": "types"
    },
    {
      "name": "cn/cn.ts",
      "content": "import type { ClassValue } from 'clsx';\nimport { clsx } from 'clsx';\nimport { extendTailwindMerge, mergeConfigs, validators } from 'tailwind-merge';\n\nconst twMerge = extendTailwindMerge((c) =>\n  mergeConfigs(c, {\n    extend: {\n      classGroups: {\n        typography: [{ typography: [validators.isAny] }],\n        aspect: [{ aspect: [validators.isAny] }],\n        container: [{ container: [validators.isAny] }],\n        columns: [{ columns: [validators.isAny] }],\n        'break-after': [{ 'break-after': [validators.isAny] }],\n        'break-before': [{ 'break-before': [validators.isAny] }],\n        'break-inside': [{ 'break-inside': [validators.isAny] }],\n        'box-decoration': [{ 'box-decoration': [validators.isAny] }],\n        box: [{ box: [validators.isAny] }],\n        display: [{ display: [validators.isAny] }],\n        sr: [{ sr: [validators.isAny] }],\n        float: [{ float: [validators.isAny] }],\n        clear: [{ clear: [validators.isAny] }],\n        isolation: [{ isolation: [validators.isAny] }],\n        'object-fit': [{ 'object-fit': [validators.isAny] }],\n        'object-position': [{ 'object-position': [validators.isAny] }],\n        overflow: [{ overflow: [validators.isAny] }],\n        'overflow-x': [{ 'overflow-x': [validators.isAny] }],\n        'overflow-y': [{ 'overflow-y': [validators.isAny] }],\n        overscroll: [{ overscroll: [validators.isAny] }],\n        'overscroll-x': [{ 'overscroll-x': [validators.isAny] }],\n        'overscroll-y': [{ 'overscroll-y': [validators.isAny] }],\n        position: [{ position: [validators.isAny] }],\n        inset: [{ inset: [validators.isAny] }],\n        'inset-x': [{ 'inset-x': [validators.isAny] }],\n        'inset-y': [{ 'inset-y': [validators.isAny] }],\n        start: [{ start: [validators.isAny] }],\n        end: [{ end: [validators.isAny] }],\n        top: [{ top: [validators.isAny] }],\n        right: [{ right: [validators.isAny] }],\n        bottom: [{ bottom: [validators.isAny] }],\n        left: [{ left: [validators.isAny] }],\n        visibility: [{ visibility: [validators.isAny] }],\n        z: [{ z: [validators.isAny] }],\n        basis: [{ basis: [validators.isAny] }],\n        'flex-direction': [{ 'flex-direction': [validators.isAny] }],\n        'flex-wrap': [{ 'flex-wrap': [validators.isAny] }],\n        flex: [{ flex: [validators.isAny] }],\n        grow: [{ grow: [validators.isAny] }],\n        shrink: [{ shrink: [validators.isAny] }],\n        order: [{ order: [validators.isAny] }],\n        'grid-cols': [{ 'grid-cols': [validators.isAny] }],\n        'col-start-end': [{ 'col-start-end': [validators.isAny] }],\n        'col-start': [{ 'col-start': [validators.isAny] }],\n        'col-end': [{ 'col-end': [validators.isAny] }],\n        'grid-rows': [{ 'grid-rows': [validators.isAny] }],\n        'row-start-end': [{ 'row-start-end': [validators.isAny] }],\n        'row-start': [{ 'row-start': [validators.isAny] }],\n        'row-end': [{ 'row-end': [validators.isAny] }],\n        'grid-flow': [{ 'grid-flow': [validators.isAny] }],\n        'auto-cols': [{ 'auto-cols': [validators.isAny] }],\n        'auto-rows': [{ 'auto-rows': [validators.isAny] }],\n        gap: [{ gap: [validators.isAny] }],\n        'gap-x': [{ 'gap-x': [validators.isAny] }],\n        'gap-y': [{ 'gap-y': [validators.isAny] }],\n        'justify-content': [{ 'justify-content': [validators.isAny] }],\n        'justify-items': [{ 'justify-items': [validators.isAny] }],\n        'justify-self': [{ 'justify-self': [validators.isAny] }],\n        'align-content': [{ 'align-content': [validators.isAny] }],\n        'align-items': [{ 'align-items': [validators.isAny] }],\n        'align-self': [{ 'align-self': [validators.isAny] }],\n        'place-content': [{ 'place-content': [validators.isAny] }],\n        'place-items': [{ 'place-items': [validators.isAny] }],\n        'place-self': [{ 'place-self': [validators.isAny] }],\n        p: [{ p: [validators.isAny] }],\n        px: [{ px: [validators.isAny] }],\n        py: [{ py: [validators.isAny] }],\n        ps: [{ ps: [validators.isAny] }],\n        pe: [{ pe: [validators.isAny] }],\n        pt: [{ pt: [validators.isAny] }],\n        pr: [{ pr: [validators.isAny] }],\n        pb: [{ pb: [validators.isAny] }],\n        pl: [{ pl: [validators.isAny] }],\n        m: [{ m: [validators.isAny] }],\n        mx: [{ mx: [validators.isAny] }],\n        my: [{ my: [validators.isAny] }],\n        ms: [{ ms: [validators.isAny] }],\n        me: [{ me: [validators.isAny] }],\n        mt: [{ mt: [validators.isAny] }],\n        mr: [{ mr: [validators.isAny] }],\n        mb: [{ mb: [validators.isAny] }],\n        ml: [{ ml: [validators.isAny] }],\n        'space-x': [{ 'space-x': [validators.isAny] }],\n        'space-x-reverse': [{ 'space-x-reverse': [validators.isAny] }],\n        'space-y': [{ 'space-y': [validators.isAny] }],\n        'space-y-reverse': [{ 'space-y-reverse': [validators.isAny] }],\n        size: [{ size: [validators.isAny] }],\n        w: [{ w: [validators.isAny] }],\n        'min-w': [{ 'min-w': [validators.isAny] }],\n        'max-w': [{ 'max-w': [validators.isAny] }],\n        h: [{ h: [validators.isAny] }],\n        'min-h': [{ 'min-h': [validators.isAny] }],\n        'max-h': [{ 'max-h': [validators.isAny] }],\n        'font-size': [{ 'font-size': [validators.isAny] }],\n        'font-smoothing': [{ 'font-smoothing': [validators.isAny] }],\n        'font-style': [{ 'font-style': [validators.isAny] }],\n        'font-weight': [{ 'font-weight': [validators.isAny] }],\n        'font-stretch': [{ 'font-stretch': [validators.isAny] }],\n        'font-family': [{ 'font-family': [validators.isAny] }],\n        'fvn-normal': [{ 'fvn-normal': [validators.isAny] }],\n        'fvn-ordinal': [{ 'fvn-ordinal': [validators.isAny] }],\n        'fvn-slashed-zero': [{ 'fvn-slashed-zero': [validators.isAny] }],\n        'fvn-figure': [{ 'fvn-figure': [validators.isAny] }],\n        'fvn-spacing': [{ 'fvn-spacing': [validators.isAny] }],\n        'fvn-fraction': [{ 'fvn-fraction': [validators.isAny] }],\n        tracking: [{ tracking: [validators.isAny] }],\n        'line-clamp': [{ 'line-clamp': [validators.isAny] }],\n        leading: [{ leading: [validators.isAny] }],\n        'list-image': [{ 'list-image': [validators.isAny] }],\n        'list-style-position': [{ 'list-style-position': [validators.isAny] }],\n        'list-style-type': [{ 'list-style-type': [validators.isAny] }],\n        'text-alignment': [{ 'text-alignment': [validators.isAny] }],\n        'placeholder-color': [{ 'placeholder-color': [validators.isAny] }],\n        'text-color': [{ 'text-color': [validators.isAny] }],\n        'text-decoration': [{ 'text-decoration': [validators.isAny] }],\n        'text-decoration-style': [\n          { 'text-decoration-style': [validators.isAny] },\n        ],\n        'text-decoration-thickness': [\n          { 'text-decoration-thickness': [validators.isAny] },\n        ],\n        'text-decoration-color': [\n          { 'text-decoration-color': [validators.isAny] },\n        ],\n        'underline-offset': [{ 'underline-offset': [validators.isAny] }],\n        'text-transform': [{ 'text-transform': [validators.isAny] }],\n        'text-overflow': [{ 'text-overflow': [validators.isAny] }],\n        'text-wrap': [{ 'text-wrap': [validators.isAny] }],\n        indent: [{ indent: [validators.isAny] }],\n        'vertical-align': [{ 'vertical-align': [validators.isAny] }],\n        whitespace: [{ whitespace: [validators.isAny] }],\n        break: [{ break: [validators.isAny] }],\n        hyphens: [{ hyphens: [validators.isAny] }],\n        content: [{ content: [validators.isAny] }],\n        'bg-attachment': [{ 'bg-attachment': [validators.isAny] }],\n        'bg-clip': [{ 'bg-clip': [validators.isAny] }],\n        'bg-origin': [{ 'bg-origin': [validators.isAny] }],\n        'bg-position': [{ 'bg-position': [validators.isAny] }],\n        'bg-repeat': [{ 'bg-repeat': [validators.isAny] }],\n        'bg-size': [{ 'bg-size': [validators.isAny] }],\n        'bg-image': [{ 'bg-image': [validators.isAny] }],\n        'bg-color': [{ 'bg-color': [validators.isAny] }],\n        'gradient-from-pos': [{ 'gradient-from-pos': [validators.isAny] }],\n        'gradient-via-pos': [{ 'gradient-via-pos': [validators.isAny] }],\n        'gradient-to-pos': [{ 'gradient-to-pos': [validators.isAny] }],\n        'gradient-from': [{ 'gradient-from': [validators.isAny] }],\n        'gradient-via': [{ 'gradient-via': [validators.isAny] }],\n        'gradient-to': [{ 'gradient-to': [validators.isAny] }],\n        rounded: [{ rounded: [validators.isAny] }],\n        'rounded-s': [{ 'rounded-s': [validators.isAny] }],\n        'rounded-e': [{ 'rounded-e': [validators.isAny] }],\n        'rounded-t': [{ 'rounded-t': [validators.isAny] }],\n        'rounded-r': [{ 'rounded-r': [validators.isAny] }],\n        'rounded-b': [{ 'rounded-b': [validators.isAny] }],\n        'rounded-l': [{ 'rounded-l': [validators.isAny] }],\n        'rounded-ss': [{ 'rounded-ss': [validators.isAny] }],\n        'rounded-se': [{ 'rounded-se': [validators.isAny] }],\n        'rounded-ee': [{ 'rounded-ee': [validators.isAny] }],\n        'rounded-es': [{ 'rounded-es': [validators.isAny] }],\n        'rounded-tl': [{ 'rounded-tl': [validators.isAny] }],\n        'rounded-tr': [{ 'rounded-tr': [validators.isAny] }],\n        'rounded-br': [{ 'rounded-br': [validators.isAny] }],\n        'rounded-bl': [{ 'rounded-bl': [validators.isAny] }],\n        'border-w': [{ 'border-w': [validators.isAny] }],\n        'border-w-x': [{ 'border-w-x': [validators.isAny] }],\n        'border-w-y': [{ 'border-w-y': [validators.isAny] }],\n        'border-w-s': [{ 'border-w-s': [validators.isAny] }],\n        'border-w-e': [{ 'border-w-e': [validators.isAny] }],\n        'border-w-t': [{ 'border-w-t': [validators.isAny] }],\n        'border-w-r': [{ 'border-w-r': [validators.isAny] }],\n        'border-w-b': [{ 'border-w-b': [validators.isAny] }],\n        'border-w-l': [{ 'border-w-l': [validators.isAny] }],\n        'divide-x': [{ 'divide-x': [validators.isAny] }],\n        'divide-x-reverse': [{ 'divide-x-reverse': [validators.isAny] }],\n        'divide-y': [{ 'divide-y': [validators.isAny] }],\n        'divide-y-reverse': [{ 'divide-y-reverse': [validators.isAny] }],\n        'border-style': [{ 'border-style': [validators.isAny] }],\n        'divide-style': [{ 'divide-style': [validators.isAny] }],\n        'border-color': [{ 'border-color': [validators.isAny] }],\n        'border-color-x': [{ 'border-color-x': [validators.isAny] }],\n        'border-color-y': [{ 'border-color-y': [validators.isAny] }],\n        'border-color-s': [{ 'border-color-s': [validators.isAny] }],\n        'border-color-e': [{ 'border-color-e': [validators.isAny] }],\n        'border-color-t': [{ 'border-color-t': [validators.isAny] }],\n        'border-color-r': [{ 'border-color-r': [validators.isAny] }],\n        'border-color-b': [{ 'border-color-b': [validators.isAny] }],\n        'border-color-l': [{ 'border-color-l': [validators.isAny] }],\n        'divide-color': [{ 'divide-color': [validators.isAny] }],\n        'outline-style': [{ 'outline-style': [validators.isAny] }],\n        'outline-offset': [{ 'outline-offset': [validators.isAny] }],\n        'outline-w': [{ 'outline-w': [validators.isAny] }],\n        'outline-color': [{ 'outline-color': [validators.isAny] }],\n        shadow: [{ shadow: [validators.isAny] }],\n        'shadow-color': [{ 'shadow-color': [validators.isAny] }],\n        'inset-shadow': [{ 'inset-shadow': [validators.isAny] }],\n        'inset-shadow-color': [{ 'inset-shadow-color': [validators.isAny] }],\n        'ring-w': [{ 'ring-w': [validators.isAny] }],\n        'ring-w-inset': [{ 'ring-w-inset': [validators.isAny] }],\n        'ring-color': [{ 'ring-color': [validators.isAny] }],\n        'ring-offset-w': [{ 'ring-offset-w': [validators.isAny] }],\n        'ring-offset-color': [{ 'ring-offset-color': [validators.isAny] }],\n        'inset-ring-w': [{ 'inset-ring-w': [validators.isAny] }],\n        'inset-ring-color': [{ 'inset-ring-color': [validators.isAny] }],\n        opacity: [{ opacity: [validators.isAny] }],\n        'mix-blend': [{ 'mix-blend': [validators.isAny] }],\n        'bg-blend': [{ 'bg-blend': [validators.isAny] }],\n        filter: [{ filter: [validators.isAny] }],\n        blur: [{ blur: [validators.isAny] }],\n        brightness: [{ brightness: [validators.isAny] }],\n        contrast: [{ contrast: [validators.isAny] }],\n        'drop-shadow': [{ 'drop-shadow': [validators.isAny] }],\n        grayscale: [{ grayscale: [validators.isAny] }],\n        'hue-rotate': [{ 'hue-rotate': [validators.isAny] }],\n        invert: [{ invert: [validators.isAny] }],\n        saturate: [{ saturate: [validators.isAny] }],\n        sepia: [{ sepia: [validators.isAny] }],\n        'backdrop-filter': [{ 'backdrop-filter': [validators.isAny] }],\n        'backdrop-blur': [{ 'backdrop-blur': [validators.isAny] }],\n        'backdrop-brightness': [{ 'backdrop-brightness': [validators.isAny] }],\n        'backdrop-contrast': [{ 'backdrop-contrast': [validators.isAny] }],\n        'backdrop-grayscale': [{ 'backdrop-grayscale': [validators.isAny] }],\n        'backdrop-hue-rotate': [{ 'backdrop-hue-rotate': [validators.isAny] }],\n        'backdrop-invert': [{ 'backdrop-invert': [validators.isAny] }],\n        'backdrop-opacity': [{ 'backdrop-opacity': [validators.isAny] }],\n        'backdrop-saturate': [{ 'backdrop-saturate': [validators.isAny] }],\n        'backdrop-sepia': [{ 'backdrop-sepia': [validators.isAny] }],\n        'border-collapse': [{ 'border-collapse': [validators.isAny] }],\n        'border-spacing': [{ 'border-spacing': [validators.isAny] }],\n        'border-spacing-x': [{ 'border-spacing-x': [validators.isAny] }],\n        'border-spacing-y': [{ 'border-spacing-y': [validators.isAny] }],\n        'table-layout': [{ 'table-layout': [validators.isAny] }],\n        caption: [{ caption: [validators.isAny] }],\n        transition: [{ transition: [validators.isAny] }],\n        'transition-behavior': [{ 'transition-behavior': [validators.isAny] }],\n        duration: [{ duration: [validators.isAny] }],\n        ease: [{ ease: [validators.isAny] }],\n        delay: [{ delay: [validators.isAny] }],\n        animate: [{ animate: [validators.isAny] }],\n        backface: [{ backface: [validators.isAny] }],\n        perspective: [{ perspective: [validators.isAny] }],\n        'perspective-origin': [{ 'perspective-origin': [validators.isAny] }],\n        rotate: [{ rotate: [validators.isAny] }],\n        'rotate-x': [{ 'rotate-x': [validators.isAny] }],\n        'rotate-y': [{ 'rotate-y': [validators.isAny] }],\n        'rotate-z': [{ 'rotate-z': [validators.isAny] }],\n        scale: [{ scale: [validators.isAny] }],\n        'scale-x': [{ 'scale-x': [validators.isAny] }],\n        'scale-y': [{ 'scale-y': [validators.isAny] }],\n        'scale-z': [{ 'scale-z': [validators.isAny] }],\n        'scale-3d': [{ 'scale-3d': [validators.isAny] }],\n        skew: [{ skew: [validators.isAny] }],\n        'skew-x': [{ 'skew-x': [validators.isAny] }],\n        'skew-y': [{ 'skew-y': [validators.isAny] }],\n        transform: [{ transform: [validators.isAny] }],\n        'transform-origin': [{ 'transform-origin': [validators.isAny] }],\n        'transform-style': [{ 'transform-style': [validators.isAny] }],\n        translate: [{ translate: [validators.isAny] }],\n        'translate-x': [{ 'translate-x': [validators.isAny] }],\n        'translate-y': [{ 'translate-y': [validators.isAny] }],\n        'translate-z': [{ 'translate-z': [validators.isAny] }],\n        'translate-none': [{ 'translate-none': [validators.isAny] }],\n        accent: [{ accent: [validators.isAny] }],\n        appearance: [{ appearance: [validators.isAny] }],\n        'caret-color': [{ 'caret-color': [validators.isAny] }],\n        'color-scheme': [{ 'color-scheme': [validators.isAny] }],\n        cursor: [{ cursor: [validators.isAny] }],\n        'field-sizing': [{ 'field-sizing': [validators.isAny] }],\n        'pointer-events': [{ 'pointer-events': [validators.isAny] }],\n        resize: [{ resize: [validators.isAny] }],\n        'scroll-behavior': [{ 'scroll-behavior': [validators.isAny] }],\n        'scroll-m': [{ 'scroll-m': [validators.isAny] }],\n        'scroll-mx': [{ 'scroll-mx': [validators.isAny] }],\n        'scroll-my': [{ 'scroll-my': [validators.isAny] }],\n        'scroll-ms': [{ 'scroll-ms': [validators.isAny] }],\n        'scroll-me': [{ 'scroll-me': [validators.isAny] }],\n        'scroll-mt': [{ 'scroll-mt': [validators.isAny] }],\n        'scroll-mr': [{ 'scroll-mr': [validators.isAny] }],\n        'scroll-mb': [{ 'scroll-mb': [validators.isAny] }],\n        'scroll-ml': [{ 'scroll-ml': [validators.isAny] }],\n        'scroll-p': [{ 'scroll-p': [validators.isAny] }],\n        'scroll-px': [{ 'scroll-px': [validators.isAny] }],\n        'scroll-py': [{ 'scroll-py': [validators.isAny] }],\n        'scroll-ps': [{ 'scroll-ps': [validators.isAny] }],\n        'scroll-pe': [{ 'scroll-pe': [validators.isAny] }],\n        'scroll-pt': [{ 'scroll-pt': [validators.isAny] }],\n        'scroll-pr': [{ 'scroll-pr': [validators.isAny] }],\n        'scroll-pb': [{ 'scroll-pb': [validators.isAny] }],\n        'scroll-pl': [{ 'scroll-pl': [validators.isAny] }],\n        'snap-align': [{ 'snap-align': [validators.isAny] }],\n        'snap-stop': [{ 'snap-stop': [validators.isAny] }],\n        'snap-type': [{ 'snap-type': [validators.isAny] }],\n        'snap-strictness': [{ 'snap-strictness': [validators.isAny] }],\n        touch: [{ touch: [validators.isAny] }],\n        'touch-x': [{ 'touch-x': [validators.isAny] }],\n        'touch-y': [{ 'touch-y': [validators.isAny] }],\n        'touch-pz': [{ 'touch-pz': [validators.isAny] }],\n        select: [{ select: [validators.isAny] }],\n        'will-change': [{ 'will-change': [validators.isAny] }],\n        fill: [{ fill: [validators.isAny] }],\n        'stroke-w': [{ 'stroke-w': [validators.isAny] }],\n        stroke: [{ stroke: [validators.isAny] }],\n        'forced-color-adjust': [{ 'forced-color-adjust': [validators.isAny] }],\n      },\n    },\n  }),\n);\n\nexport const cn = (...inputs: ClassValue[]) => twMerge(clsx(inputs));\n",
      "type": "utility"
    },
    {
      "name": "cn/index.ts",
      "content": "export * from './cn';\n",
      "type": "utility"
    },
    {
      "name": "create-context/create-context.tsx",
      "content": "/* eslint-disable @typescript-eslint/naming-convention */\nimport { deepEqual } from 'fast-equals';\nimport React from 'react';\nimport type {\n  ContextOptions,\n  Selector,\n  StoreSetFn,\n  StoreState,\n} from './create-context.types';\n\nconst storeNameRegExp = /^[a-z][a-z0-9]*$/i;\n\nexport const createContext = <T extends object>(\n  defaultState: T,\n  options: ContextOptions = {},\n) => {\n  const { storeName = 'undefined', compareFn = deepEqual } = options;\n\n  if (!storeNameRegExp.test(storeName)) {\n    throw Error('Store name is invalid');\n  }\n  const capitalizedStoreName =\n    storeName.charAt(0).toUpperCase() + storeName.slice(1);\n\n  const useStoreState = (state: T): StoreState<T> => {\n    const store = React.useRef(state);\n    const subscribers = React.useRef(new Set<() => void>());\n    const get = React.useCallback(() => store.current, []);\n    const set = React.useCallback((value: Partial<T>) => {\n      const newState = { ...store.current, ...value };\n      if (compareFn(store.current, newState)) return;\n      store.current = newState;\n      subscribers.current.forEach((callback) => callback());\n    }, []);\n    const subscribe = React.useCallback((callback: () => void) => {\n      subscribers.current.add(callback);\n      return () => subscribers.current.delete(callback);\n    }, []);\n\n    return {\n      get,\n      set,\n      subscribe,\n    };\n  };\n\n  const StoreContext = React.createContext<StoreState<T> | null>(null);\n\n  const Provider: React.FC<{\n    value?: T;\n    children: React.ReactNode;\n  }> = ({ value = defaultState, children }) => {\n    const store = useStoreState(value);\n\n    return (\n      <StoreContext.Provider value={store}>{children}</StoreContext.Provider>\n    );\n  };\n  Provider.displayName = `${capitalizedStoreName}Provider`;\n\n  const defaultSelector: Selector<T, T> = (s) => s;\n\n  const useStore = <_ extends T = T, Return = T>(\n    selectorParam?: Selector<T, Return>,\n  ): [Return, StoreSetFn<T>] => {\n    const store = React.useContext(StoreContext);\n    if (!store) {\n      throw Error(`Store \"${storeName}\" not found`);\n    }\n\n    const selector = React.useCallback(\n      (s: T): Return => {\n        if (selectorParam) return selectorParam(s);\n        return defaultSelector(s) as unknown as Return;\n      },\n      [selectorParam],\n    );\n\n    const selectedState = React.useSyncExternalStore(\n      store.subscribe,\n      () => selector(store.get()),\n      () => selector(defaultState),\n    );\n\n    const setFn: StoreSetFn<T> = (valueOrFn) => {\n      if (typeof valueOrFn === 'function') {\n        const newValue = valueOrFn(store.get());\n        store.set(newValue);\n      } else {\n        store.set(valueOrFn);\n      }\n    };\n\n    return [selectedState, setFn];\n  };\n\n  const useHasStore = () => {\n    const store = React.useContext(StoreContext);\n\n    return Boolean(store);\n  };\n\n  const useStoreValue = () => {\n    const [value] = useStore();\n    return value;\n  };\n\n  const useSetStore = (): StoreSetFn<T> => {\n    const store = React.useContext(StoreContext);\n    if (!store) {\n      throw Error(`Store \"${storeName}\" not found`);\n    }\n\n    const setFn: StoreSetFn<T> = (valueOrFn) => {\n      if (typeof valueOrFn === 'function') {\n        const newValue = valueOrFn(store.get());\n        store.set(newValue);\n      } else {\n        store.set(valueOrFn);\n      }\n    };\n\n    return setFn;\n  };\n\n  const ProviderWithDepend: typeof Provider = ({ value, children }) => {\n    const hasStore = useHasStore();\n\n    if (hasStore) return children;\n\n    return <Provider value={value}>{children}</Provider>;\n  };\n  ProviderWithDepend.displayName = `${capitalizedStoreName}ProviderWithDepend`;\n\n  return {\n    Provider,\n    ProviderWithDepend,\n    useStore,\n    useHasStore,\n    useStoreValue,\n    useSetStore,\n  };\n};\n",
      "type": "utility"
    },
    {
      "name": "create-context/create-context.types.ts",
      "content": "export type Selector<State, Result> = (store: State) => Result;\n\nexport type StoreSetFnWithoutPreviousValue<State> = (\n  value: Partial<State>,\n) => void;\n\nexport type StoreSetFnWithPreviousValue<State> = (\n  fn: (previousValue: State) => Partial<State>,\n) => void;\n\nexport type StoreSetFn<State> = StoreSetFnWithoutPreviousValue<State> &\n  StoreSetFnWithPreviousValue<State>;\n\nexport type StoreState<State> = {\n  get: () => State;\n  set: (value: Partial<State>) => void;\n  subscribe: (callback: () => void) => () => void;\n};\n\nexport type ContextOptions = {\n  storeName?: string;\n  compareFn?: <A, B>(a: A, b: B) => boolean;\n};\n\nexport type UseStore<State> = <Return = State>(\n  selector?: Selector<State, Return>,\n) => [Return, StoreSetFn<State>];\n",
      "type": "utility"
    },
    {
      "name": "create-context/index.ts",
      "content": "export * from './create-context';\nexport type { ContextOptions, Selector } from './create-context.types';\n",
      "type": "utility"
    },
    {
      "name": "cva/cva.ts",
      "content": "import { cva as baseCva } from 'class-variance-authority';\nimport type {\n  BaseConfig,\n  ClassCategories,\n  Config,\n  ResultFn,\n} from './cva.types';\nimport { mergeClassCategories } from './merge-class-categories';\n\nexport const cva = <T>(\n  classCategories: ClassCategories,\n  config?: Config<T>,\n): ResultFn<T> => {\n  const base = mergeClassCategories(classCategories);\n  if (!config) return baseCva(base) as ResultFn<T>;\n  const baseConfig: BaseConfig = {};\n\n  if (config.variants) {\n    if (!baseConfig.variants) baseConfig.variants = {};\n    Object.entries(config.variants).forEach(([variantName, variants]) => {\n      if (!baseConfig.variants) return;\n      if (!baseConfig.variants[variantName])\n        baseConfig.variants[variantName] = {};\n      Object.entries(variants).forEach(([variant, categories]) => {\n        if (!baseConfig.variants) return;\n        if (!baseConfig.variants[variantName]) return;\n        baseConfig.variants[variantName][variant] =\n          mergeClassCategories(categories);\n      });\n    });\n  }\n  if (config.defaultVariants) {\n    if (!baseConfig.defaultVariants) baseConfig.defaultVariants = {};\n    Object.entries(config.defaultVariants).forEach(([variantName, value]) => {\n      if (!baseConfig.defaultVariants) return;\n      baseConfig.defaultVariants[variantName] = value;\n    });\n  }\n  if (config.compoundVariants) {\n    if (!baseConfig.compoundVariants) baseConfig.compoundVariants = [];\n    for (let i = 0; i < config.compoundVariants.length; i++) {\n      const compoundVariant = config.compoundVariants[i];\n      baseConfig.compoundVariants.push({\n        ...compoundVariant,\n        className: mergeClassCategories(compoundVariant.className),\n      } as NonNullable<BaseConfig['compoundVariants']>[number]);\n    }\n  }\n\n  return baseCva(base, baseConfig) as ResultFn<T>;\n};\n",
      "type": "utility"
    },
    {
      "name": "cva/cva.types.ts",
      "content": "import type { cva } from 'class-variance-authority';\nimport type {\n  ClassProp as BaseClassProp,\n  ClassValue,\n  StringToBoolean,\n} from 'class-variance-authority/types';\n\nexport type ClassCategories = {\n  name?: ClassValue;\n  layout?: ClassValue;\n  box?: ClassValue;\n  typography?: ClassValue;\n  background?: ClassValue;\n  borders?: ClassValue;\n  effects?: ClassValue;\n  transitions?: ClassValue;\n  states?: ClassValue;\n  ripple?: ClassValue;\n  overflow?: ClassValue;\n  before?: ClassValue;\n  after?: ClassValue;\n  flex?: ClassValue;\n  tables?: ClassValue;\n  spacing?: ClassValue;\n  transforms?: ClassValue;\n  filters?: ClassValue;\n  accessibility?: ClassValue;\n  other?: ClassValue;\n};\n\ntype ClassProp = {\n  className: ClassCategories;\n};\n\nexport type ConfigSchema = Record<string, Record<string, ClassCategories>>;\n\nexport type BaseConfigSchema = Record<string, Record<string, ClassValue>>;\n\ntype ConfigVariants<T extends ConfigSchema> = {\n  [Variant in keyof T]?: StringToBoolean<keyof T[Variant]> | null | undefined;\n};\n\ntype ConfigVariantsMulti<T extends ConfigSchema> = {\n  [Variant in keyof T]?:\n    | StringToBoolean<keyof T[Variant]>\n    | StringToBoolean<keyof T[Variant]>[]\n    | undefined;\n};\n\ntype ConfigCompoundVariants<T extends ConfigSchema> = ((\n  | ConfigVariants<T>\n  | ConfigVariantsMulti<T>\n) &\n  ClassProp)[];\n\nexport type Config<T> = T extends ConfigSchema\n  ? {\n      variants?: T;\n      defaultVariants?: ConfigVariants<T>;\n      compoundVariants?: ConfigCompoundVariants<T>;\n    }\n  : never;\n\nexport type BaseConfig = NonNullable<\n  Parameters<typeof cva<BaseConfigSchema>>[1]\n>;\n\ntype Props<T> = T extends ConfigSchema\n  ? ConfigVariants<T> & BaseClassProp\n  : BaseClassProp;\n\nexport type ResultFn<T> = (props?: Props<T>) => string;\n",
      "type": "utility"
    },
    {
      "name": "cva/index.ts",
      "content": "export * from './cva';\n",
      "type": "utility"
    },
    {
      "name": "cva/merge-class-categories.ts",
      "content": "import type { ClassValue } from 'class-variance-authority/types';\nimport type { ClassCategories } from './cva.types';\n\nexport const mergeClassCategories = (\n  classCategories: ClassCategories,\n): ClassValue => Object.values(classCategories);\n",
      "type": "utility"
    },
    {
      "name": "index.ts",
      "content": "export * from './cn';\nexport * from './create-context';\nexport * from './cva';\nexport * from './key-from-children';\nexport * from './merge-props';\nexport * from './throttle';\nexport * from './unwrap-children';\nexport * from './with-provider';\n",
      "type": "utility"
    },
    {
      "name": "key-from-children/index.ts",
      "content": "export * from './key-from-children';\n",
      "type": "utility"
    },
    {
      "name": "key-from-children/key-from-children.ts",
      "content": "import React from 'react';\n\nexport const keyFromChildren = (children: React.ReactNode): string => {\n  const childrenString =\n    React.Children.map(children, (child) => {\n      if (React.isValidElement<React.PropsWithChildren>(child)) {\n        return JSON.stringify({\n          type: child.type,\n          props: child.props,\n          key: child.key,\n        });\n      }\n      return String(child);\n    })?.join('') ?? '';\n\n  let hash = 0;\n  for (let i = 0; i < childrenString.length; i++) {\n    const char = childrenString.charCodeAt(i);\n    hash = (hash * 31 + char) % 1_000_000_007;\n  }\n\n  return hash.toString(16);\n};\n",
      "type": "utility"
    },
    {
      "name": "merge-props/index.ts",
      "content": "export * from './merge-props';\n",
      "type": "utility"
    },
    {
      "name": "merge-props/merge-props.ts",
      "content": "import type { Props } from '@/types';\nimport { cn } from '../cn';\n\n/* eslint-disable no-param-reassign */\nexport const mergeProps = <\n  T extends\n    | keyof React.JSX.IntrinsicElements\n    | React.JSXElementConstructor<unknown> = 'div',\n>(\n  ...props: (Props<T> | undefined | null)[]\n): Props<T> => {\n  return (\n    props.filter((v) => v !== undefined && v !== null) as Record<\n      string,\n      unknown\n    >[]\n  ).reduce(\n    (merged, currentProps) => {\n      Object.keys(currentProps).forEach((key) => {\n        const currentValue = currentProps[key];\n        const mergedValue = merged[key];\n\n        if (\n          typeof currentValue === 'function' &&\n          typeof mergedValue === 'function'\n        ) {\n          merged[key] = (...args: unknown[]) => {\n            mergedValue(...args);\n            currentValue(...args);\n          };\n        } else if (key === 'className') {\n          merged[key] = cn(mergedValue ?? '', currentValue ?? '');\n        } else {\n          merged[key] = mergedValue ?? currentValue;\n        }\n      });\n      return merged;\n    },\n    {} as Record<string, unknown>,\n  ) as Props<T>;\n};\n",
      "type": "utility"
    },
    {
      "name": "throttle/index.ts",
      "content": "export * from './throttle';\n",
      "type": "utility"
    },
    {
      "name": "throttle/throttle.ts",
      "content": "// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const throttle = <T extends (...args: any[]) => void>(\n  fn: T,\n  delay = 200,\n) => {\n  let timer: number | undefined;\n  let lastExecutedAt: number | undefined;\n\n  return function (this: unknown, ...args: Parameters<T>) {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const context = this;\n    const now = performance.now();\n\n    if (lastExecutedAt === undefined) {\n      fn.apply(context, args);\n      lastExecutedAt = now;\n    } else {\n      if (timer !== undefined) {\n        clearTimeout(timer);\n      }\n\n      const remaining = delay - (now - lastExecutedAt);\n      timer = window.setTimeout(\n        () => {\n          fn.apply(context, args);\n          lastExecutedAt = performance.now();\n        },\n        Math.max(remaining, 0),\n      );\n    }\n  } as T;\n};\n",
      "type": "utility"
    },
    {
      "name": "unwrap-children/index.ts",
      "content": "export * from './unwrap-children';\n",
      "type": "utility"
    },
    {
      "name": "unwrap-children/unwrap-children.ts",
      "content": "import type { UnknownRecord } from '@bruhabruh/type-safe';\nimport React from 'react';\n\nexport const unwrapChildren = (\n  node: React.ReactNode,\n  render: (children: React.ReactNode) => React.ReactNode,\n  ignore = false,\n) => {\n  if (\n    !React.isValidElement<React.PropsWithChildren<UnknownRecord>>(node) ||\n    ignore\n  )\n    return render(node);\n\n  return React.cloneElement(node, node.props, render(node.props.children));\n};\n",
      "type": "utility"
    },
    {
      "name": "with-provider/index.ts",
      "content": "export * from './with-provider';\n",
      "type": "utility"
    },
    {
      "name": "with-provider/with-provider.tsx",
      "content": "import React from 'react';\n\nexport const withProvider = <T extends object, ProviderValue>(\n  Provider: React.FC<{ value?: ProviderValue; children: React.ReactNode }>,\n  Component: React.FC<T>,\n  value?: ProviderValue,\n) => {\n  const hoc = React.forwardRef<HTMLElement, T>((props, ref) => {\n    const propsWithRef = { ...props, ref } as T;\n    return (\n      <Provider value={value}>\n        <Component {...propsWithRef} />\n      </Provider>\n    );\n  });\n  const providerName = Provider.displayName ?? Provider.name;\n  const componentName = (Component.displayName ?? Component.name).replace(\n    /Impl$/,\n    '',\n  );\n  hoc.displayName = `${componentName}With${providerName}`;\n\n  return hoc;\n};\n",
      "type": "utility"
    }
  ]
}
